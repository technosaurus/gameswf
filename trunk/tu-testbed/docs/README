TU-TESTBED README
Thatcher Ulrich <tu@tulrich.com> http://tulrich.com

The tu-testbed is a collection of my game engine experiments.  At some
times it may resemble an engine with demo programs; at other times it
may resemble a code junkyard.  Most of the time it will probably
resemble both.


LICENSE

This code is Public Domain; have a look at LICENSE and MANIFESTO for
details.  Executive Summary: the code is completely unrestricted, so
you can do whatever you want with it.


PLATFORMS

My goal is to have this code work on Linux and Win32.  Linux because I
like it, and Win32 because it's ubiquitous in game development.  At
any given time one platform or the other is likely to be more up to
date, depending on which one I've been using lately.

I'm depending on:

* SDL (see http://www.libsdl.org) for the base set of media APIs and
  helper libraries.  SDL is the greatest thing since sliced bread.
  It's covers the non-3D functionality of DirectX, but much prettier
  and easier to use.  Plus it's open-source, and cross-platform.  It
  has many great, free easy to use add-on libraries for dealing with
  image and sound media types.  Really, it's great.

* Lua (see http://www.lua.org) for the configuration/scripting
  language.  Lua is a beautiful tiny thing.  It's one of the most
  minimal languages I know of, yet it's extremely readable, powerful
  and easy to use.

* OpenGL for 3D graphics.  I really like OpenGL; it's practically the
  ideal API ideal for GeForce1-level hardware.  SDL wraps much of the
  system-specific OpenGL stuff, which is always the worst part of
  dealing with it.  I also have some helpers in the engine to make it
  easier to use extensions.

* GNU Make as a build tool on all platforms.  I might experiment with
  other build tools in the future.  MSVC .dsp's are happily accepted
  and I'll throw them in the repository, but I'm not going to try to
  maintain those.  I'm not just using Make (rather than .dsp) because
  it's cross-platform, although that's a necessity for this project.
  I'm continually amazed that any real project would use .dsp's.  I
  have a whole long rant about why you really want a real programming
  language for build configuration (we're all programmers here,
  right?), but I'll save it for some other venue.

* Cygwin under Win32 for a sane development environment.  I don't
  really want to become too Cygwin-dependent for building under Win32,
  since most Win32 people probably don't have it installed.  But then
  again, I don't want to struggle too much with awkward, incomplete
  and Windows-specific tools.  Cygwin is pretty darn good; besides the
  usual Unix amenities, it includes power tools like rsync and ssh
  that are just too useful not to have.

* gcc as the main compiler, and MSVC under Windows.  I would like to try
  gcc/mingwin under Windows at some point.


LANGUAGE

The code is written mostly in C++ at the moment.  For various reasons
that I won't go into right now, I think it's high time to retire C++
before it rots my brain any further.  I think Ocaml might be the best
contender for a replacement, and I hope to do some experiments along
those lines.


STABILITY

This is experimental code.  One of the things I will probably want to
experiment with is engine APIs and organization.  As a result,
stability of APIs is a low priority for me at this early stage of
development; I may completely change the organization of the code at
any time, run all the source through perl one-liners to change all the
module names, etc.  Old demos may not build or run.  Engine features
may be completely broken, or incompletely working (or more likely,
completely missing).

If you use this code, it may be most helpful to take a snapshot and
have your own private fork of the code, or just cut-n-paste the bits
you want.  Someday in the far-off future I can imagine the engine
stabilizing and having release numbers and such, but don't hold your
breath.


CONTRIBUTIONS

I would love to get contributions, provided the author is willing and
able to place them in the Public Domain.  I'll put your name on the
contributors list unless you don't want that.  Bug fixes & reports are
always appreciated; likewise with ports.  However, I reserve the right
to not use your contribution, to break ports etc.  It's important to
me to be able to experiment at whim as much as possible so if
something gets in the way I'm liable to remove it.


CODING STYLE

Another thing I'm experimenting with is coding style.  So it's
inconsistent, which is the one thing everybody says not to do :) Well,
I'm still striving for the One True Style, so sorry about that.  It
would be good if contributions attempted to conform to nearby code, or
the style du jour.  Don't sweat it too much though.  See the STYLE doc
for more info.
