-- SDL.lm

--
-- Lua module that provides a binding to the Simple DirectMedia Layer.
-- The Lua binding follows the C binding very closely, with a few
-- minor omissions.
--
-- Packaged by Thatcher Ulrich <tu@tulrich.com> using luaswig, SDL, and
-- Ingacio Casta~no's luauselib.
--

if use == nil then
	error("This module requires the 'use' function to load dynamic libraries.")
end
use("SDL")	-- dynamically load the library libluaSDL.so/luaSDL.dll

-- dofile("shadow40.lua")	-- inline this for SDL.lm
-- 
-- shadow40.lua
--
-- Copyright (C) 2000 D.Jorand <didier.jorand@free.fr>
--
-- This code is free software; you can redistribute it and/or
-- modify it under the terms of the GNU General Public
-- License as published by the Free Software Foundation; either
-- version 2 of the License, or (at your option) any later version.
--
-- This code is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- General Public License for more details.
--
-- You should have received a copy of the GNU General Public
-- License along with this code; if not, write to the
-- Free Software Foundation, Inc., 59 Temple Place - Suite 330,
-- Boston, MA 02111-1307, USA.
--
--

function object_get(class, instance, member)
	if(type(member) == "number") then
		__object_get_v = getglobal(class.."___index__")
		if( type(__object_get_v) == "function" ) then
	if swig_lua_debug then
			print( format("%s::%s: %s: found by 'getglobal', as '__index__' function", class, member, tostring( instance )) )
	end
			return call(__object_get_v, {instance, member}), 1
		end
	end	
	
	__object_get_v = getglobal(class.."_"..member)
	if( __object_get_v~=nil ) then 
		if( type(__object_get_v) == "function" ) then
	if swig_lua_debug then
			print( format("%s::%s: %s: found by 'getglobal', as function", class, member, tostring(instance)) )
	end
			return function(...)
					local args, i, n
					args={%instance}
					n=arg.n
					i=1
					while( i<=n ) do
						args[i+1] = arg[i]
						i = i+1
					end
					return call(%__object_get_v, args)
				end, 1
		else
	if swig_lua_debug then
			print( format("%s::%s: %s: found by 'getglobal'", class, member, tostring( instance )) )
	end
			return __object_get_v, 1
		end
	end
	
	__object_get_v = getglobal(class.."_"..member.."_get")
	if( type(__object_get_v) == "function" ) then
	if swig_lua_debug then
		print( format("%s::%s: %s: found by 'getglobal', as '_get' function", class, member, tostring( instance )) )
	end
		return call(__object_get_v, {instance}), 1
	end
	
	__object_get_v = getglobal(class.."_get_"..member)
	if( type(__object_get_v) == "function" ) then
	if swig_lua_debug then
		print( format("%s::%s: %s: found by 'getglobal', as 'get_' function", class, member, tostring( instance )) )
	end
		return call(__object_get_v, {instance}), 1
	end
	
	if( member == "__class__") then
		return class, 1
	end
	
	if( member == "__parent__") then
		return getglobal(class.."___parent__"), 1
	end
	
	__object_get_p = getglobal(class.."___parent__")
	local result, found
	if( __object_get_p ~= nil ) then
		result, found = object_get( __object_get_p, instance, member )
		return result, found
	end
	
	return nil, nil
end

function object_set(class, instance, member, value)
	local args
	__object_set_v = getglobal(class.."_"..member.."_set")
	if( type(__object_set_v) == "function" ) then 
	if swig_lua_debug then
		print( format("%s::%s: %s: found by 'getglobal', as '_set' function", class, member, tostring( instance )) )
	end
		args={instance, value}
		return call(__object_set_v, args)
	end
	__object_set_v = getglobal(class.."_set_"..member)
	if( type(__object_set_v) == "function" ) then 
	if swig_lua_debug then
		print( format("%s::%s: %s: found by 'getglobal', as 'set_' function", class, member, tostring( instance )) )
	end
		args={instance, value}
		return call(__object_set_v, args)
	end
	__object_set_p = getglobal(class.."___parent__")
	if( __object_set_p ~= nil ) then
		return object_set( __object_set_p, instance, member, value )
	else
		error( format("no member named %s in %s", member, class) )
	end
end

-- dofile("luaSDL.lua")	-- inlined for SDL.lm

-- This file was created automatically by SWIG for lua-4.0 or better.
function SDL_Joystick_gettable_tm(object, member)
	return object_get("SDL_Joystick", object, member)
end

function SDL_Joystick_settable_tm(object, member, value)
	object_set("SDL_Joystick", object, member, value)
end

settagmethod( SDL_Joystick_tag, "gettable", SDL_Joystick_gettable_tm);
settagmethod( SDL_Joystick_tag, "settable", SDL_Joystick_settable_tm);
function SDL_keysym_gettable_tm(object, member)
	return object_get("SDL_keysym", object, member)
end

function SDL_keysym_settable_tm(object, member, value)
	object_set("SDL_keysym", object, member, value)
end

settagmethod( SDL_keysym_tag, "gettable", SDL_keysym_gettable_tm);
settagmethod( SDL_keysym_tag, "settable", SDL_keysym_settable_tm);
function WMcursor_gettable_tm(object, member)
	return object_get("WMcursor", object, member)
end

function WMcursor_settable_tm(object, member, value)
	object_set("WMcursor", object, member, value)
end

settagmethod( WMcursor_tag, "gettable", WMcursor_gettable_tm);
settagmethod( WMcursor_tag, "settable", WMcursor_settable_tm);
function SDL_Cursor_gettable_tm(object, member)
	return object_get("SDL_Cursor", object, member)
end

function SDL_Cursor_settable_tm(object, member, value)
	object_set("SDL_Cursor", object, member, value)
end

settagmethod( SDL_Cursor_tag, "gettable", SDL_Cursor_gettable_tm);
settagmethod( SDL_Cursor_tag, "settable", SDL_Cursor_settable_tm);
function luaSDL_MouseState_gettable_tm(object, member)
	return object_get("luaSDL_MouseState", object, member)
end

function luaSDL_MouseState_settable_tm(object, member, value)
	object_set("luaSDL_MouseState", object, member, value)
end

settagmethod( luaSDL_MouseState_tag, "gettable", luaSDL_MouseState_gettable_tm);
settagmethod( luaSDL_MouseState_tag, "settable", luaSDL_MouseState_settable_tm);
function SDL_ActiveEvent_gettable_tm(object, member)
	return object_get("SDL_ActiveEvent", object, member)
end

function SDL_ActiveEvent_settable_tm(object, member, value)
	object_set("SDL_ActiveEvent", object, member, value)
end

settagmethod( SDL_ActiveEvent_tag, "gettable", SDL_ActiveEvent_gettable_tm);
settagmethod( SDL_ActiveEvent_tag, "settable", SDL_ActiveEvent_settable_tm);
function SDL_KeyboardEvent_gettable_tm(object, member)
	return object_get("SDL_KeyboardEvent", object, member)
end

function SDL_KeyboardEvent_settable_tm(object, member, value)
	object_set("SDL_KeyboardEvent", object, member, value)
end

settagmethod( SDL_KeyboardEvent_tag, "gettable", SDL_KeyboardEvent_gettable_tm);
settagmethod( SDL_KeyboardEvent_tag, "settable", SDL_KeyboardEvent_settable_tm);
function SDL_MouseMotionEvent_gettable_tm(object, member)
	return object_get("SDL_MouseMotionEvent", object, member)
end

function SDL_MouseMotionEvent_settable_tm(object, member, value)
	object_set("SDL_MouseMotionEvent", object, member, value)
end

settagmethod( SDL_MouseMotionEvent_tag, "gettable", SDL_MouseMotionEvent_gettable_tm);
settagmethod( SDL_MouseMotionEvent_tag, "settable", SDL_MouseMotionEvent_settable_tm);
function SDL_MouseButtonEvent_gettable_tm(object, member)
	return object_get("SDL_MouseButtonEvent", object, member)
end

function SDL_MouseButtonEvent_settable_tm(object, member, value)
	object_set("SDL_MouseButtonEvent", object, member, value)
end

settagmethod( SDL_MouseButtonEvent_tag, "gettable", SDL_MouseButtonEvent_gettable_tm);
settagmethod( SDL_MouseButtonEvent_tag, "settable", SDL_MouseButtonEvent_settable_tm);
function SDL_JoyAxisEvent_gettable_tm(object, member)
	return object_get("SDL_JoyAxisEvent", object, member)
end

function SDL_JoyAxisEvent_settable_tm(object, member, value)
	object_set("SDL_JoyAxisEvent", object, member, value)
end

settagmethod( SDL_JoyAxisEvent_tag, "gettable", SDL_JoyAxisEvent_gettable_tm);
settagmethod( SDL_JoyAxisEvent_tag, "settable", SDL_JoyAxisEvent_settable_tm);
function SDL_JoyBallEvent_gettable_tm(object, member)
	return object_get("SDL_JoyBallEvent", object, member)
end

function SDL_JoyBallEvent_settable_tm(object, member, value)
	object_set("SDL_JoyBallEvent", object, member, value)
end

settagmethod( SDL_JoyBallEvent_tag, "gettable", SDL_JoyBallEvent_gettable_tm);
settagmethod( SDL_JoyBallEvent_tag, "settable", SDL_JoyBallEvent_settable_tm);
function SDL_JoyHatEvent_gettable_tm(object, member)
	return object_get("SDL_JoyHatEvent", object, member)
end

function SDL_JoyHatEvent_settable_tm(object, member, value)
	object_set("SDL_JoyHatEvent", object, member, value)
end

settagmethod( SDL_JoyHatEvent_tag, "gettable", SDL_JoyHatEvent_gettable_tm);
settagmethod( SDL_JoyHatEvent_tag, "settable", SDL_JoyHatEvent_settable_tm);
function SDL_JoyButtonEvent_gettable_tm(object, member)
	return object_get("SDL_JoyButtonEvent", object, member)
end

function SDL_JoyButtonEvent_settable_tm(object, member, value)
	object_set("SDL_JoyButtonEvent", object, member, value)
end

settagmethod( SDL_JoyButtonEvent_tag, "gettable", SDL_JoyButtonEvent_gettable_tm);
settagmethod( SDL_JoyButtonEvent_tag, "settable", SDL_JoyButtonEvent_settable_tm);
function SDL_ResizeEvent_gettable_tm(object, member)
	return object_get("SDL_ResizeEvent", object, member)
end

function SDL_ResizeEvent_settable_tm(object, member, value)
	object_set("SDL_ResizeEvent", object, member, value)
end

settagmethod( SDL_ResizeEvent_tag, "gettable", SDL_ResizeEvent_gettable_tm);
settagmethod( SDL_ResizeEvent_tag, "settable", SDL_ResizeEvent_settable_tm);
function SDL_ExposeEvent_gettable_tm(object, member)
	return object_get("SDL_ExposeEvent", object, member)
end

function SDL_ExposeEvent_settable_tm(object, member, value)
	object_set("SDL_ExposeEvent", object, member, value)
end

settagmethod( SDL_ExposeEvent_tag, "gettable", SDL_ExposeEvent_gettable_tm);
settagmethod( SDL_ExposeEvent_tag, "settable", SDL_ExposeEvent_settable_tm);
function SDL_QuitEvent_gettable_tm(object, member)
	return object_get("SDL_QuitEvent", object, member)
end

function SDL_QuitEvent_settable_tm(object, member, value)
	object_set("SDL_QuitEvent", object, member, value)
end

settagmethod( SDL_QuitEvent_tag, "gettable", SDL_QuitEvent_gettable_tm);
settagmethod( SDL_QuitEvent_tag, "settable", SDL_QuitEvent_settable_tm);
function SDL_UserEvent_gettable_tm(object, member)
	return object_get("SDL_UserEvent", object, member)
end

function SDL_UserEvent_settable_tm(object, member, value)
	object_set("SDL_UserEvent", object, member, value)
end

settagmethod( SDL_UserEvent_tag, "gettable", SDL_UserEvent_gettable_tm);
settagmethod( SDL_UserEvent_tag, "settable", SDL_UserEvent_settable_tm);
function SDL_SysWMEvent_gettable_tm(object, member)
	return object_get("SDL_SysWMEvent", object, member)
end

function SDL_SysWMEvent_settable_tm(object, member, value)
	object_set("SDL_SysWMEvent", object, member, value)
end

settagmethod( SDL_SysWMEvent_tag, "gettable", SDL_SysWMEvent_gettable_tm);
settagmethod( SDL_SysWMEvent_tag, "settable", SDL_SysWMEvent_settable_tm);
SDL_Event = new_SDL_Event
function SDL_Event_gettable_tm(object, member)
	return object_get("SDL_Event", object, member)
end

function SDL_Event_settable_tm(object, member, value)
	object_set("SDL_Event", object, member, value)
end

settagmethod( SDL_Event_tag, "gettable", SDL_Event_gettable_tm);
settagmethod( SDL_Event_tag, "settable", SDL_Event_settable_tm);
SDL_Rect = new_SDL_Rect
function SDL_Rect_gettable_tm(object, member)
	return object_get("SDL_Rect", object, member)
end

function SDL_Rect_settable_tm(object, member, value)
	object_set("SDL_Rect", object, member, value)
end

settagmethod( SDL_Rect_tag, "gettable", SDL_Rect_gettable_tm);
settagmethod( SDL_Rect_tag, "settable", SDL_Rect_settable_tm);
function SDL_Color_gettable_tm(object, member)
	return object_get("SDL_Color", object, member)
end

function SDL_Color_settable_tm(object, member, value)
	object_set("SDL_Color", object, member, value)
end

settagmethod( SDL_Color_tag, "gettable", SDL_Color_gettable_tm);
settagmethod( SDL_Color_tag, "settable", SDL_Color_settable_tm);
function SDL_Palette_gettable_tm(object, member)
	return object_get("SDL_Palette", object, member)
end

function SDL_Palette_settable_tm(object, member, value)
	object_set("SDL_Palette", object, member, value)
end

settagmethod( SDL_Palette_tag, "gettable", SDL_Palette_gettable_tm);
settagmethod( SDL_Palette_tag, "settable", SDL_Palette_settable_tm);
function SDL_PixelFormat_gettable_tm(object, member)
	return object_get("SDL_PixelFormat", object, member)
end

function SDL_PixelFormat_settable_tm(object, member, value)
	object_set("SDL_PixelFormat", object, member, value)
end

settagmethod( SDL_PixelFormat_tag, "gettable", SDL_PixelFormat_gettable_tm);
settagmethod( SDL_PixelFormat_tag, "settable", SDL_PixelFormat_settable_tm);
function SDL_Surface_gettable_tm(object, member)
	return object_get("SDL_Surface", object, member)
end

function SDL_Surface_settable_tm(object, member, value)
	object_set("SDL_Surface", object, member, value)
end

settagmethod( SDL_Surface_tag, "gettable", SDL_Surface_gettable_tm);
settagmethod( SDL_Surface_tag, "settable", SDL_Surface_settable_tm);
function SDL_VideoInfo_gettable_tm(object, member)
	return object_get("SDL_VideoInfo", object, member)
end

function SDL_VideoInfo_settable_tm(object, member, value)
	object_set("SDL_VideoInfo", object, member, value)
end

settagmethod( SDL_VideoInfo_tag, "gettable", SDL_VideoInfo_gettable_tm);
settagmethod( SDL_VideoInfo_tag, "settable", SDL_VideoInfo_settable_tm);
function SDL_Overlay_gettable_tm(object, member)
	return object_get("SDL_Overlay", object, member)
end

function SDL_Overlay_settable_tm(object, member, value)
	object_set("SDL_Overlay", object, member, value)
end

settagmethod( SDL_Overlay_tag, "gettable", SDL_Overlay_gettable_tm);
settagmethod( SDL_Overlay_tag, "settable", SDL_Overlay_settable_tm);
function FILE_gettable_tm(object, member)
	return object_get("FILE", object, member)
end

function FILE_settable_tm(object, member, value)
	object_set("FILE", object, member, value)
end

settagmethod( FILE_tag, "gettable", FILE_gettable_tm);
settagmethod( FILE_tag, "settable", FILE_settable_tm);
function SDL_RWops_gettable_tm(object, member)
	return object_get("SDL_RWops", object, member)
end

function SDL_RWops_settable_tm(object, member, value)
	object_set("SDL_RWops", object, member, value)
end

settagmethod( SDL_RWops_tag, "gettable", SDL_RWops_gettable_tm);
settagmethod( SDL_RWops_tag, "settable", SDL_RWops_settable_tm);

