luaSDL
======

A Lua binding for SDL.  Built using the SDL header files, tolua, and
Ignacio Castaño's prototype luselib code.

Lua programs that want SDL just need to use the "luse" executable (or
incorporate luselib in their interpreter), and say
  
		use("SDL")

before using any SDL stuff.

WIN32:

To run the sample, just unzip, change to the directory, and type "luse
meteor_shower.lua", or "go.bat".

LINUX:

Unzip the files somewhere.  Move liblua.so, liblualib.so, and
libluaSDL.so to somewhere in your library path.  For example, I put
them in ~/lib , and then do "export LD_LIBRARY_PATH=$HOME/lib".  Leave
everything else in the luaSDL/ directory.  Change to luaSDL/, and do
"./luse meteor_shower.lua" to run the sample.

BOTH PLATFORMS:

You can also run 'luse' interactively -- it's vanilla Lua 4.0, plus
the use() function.

NOTES:

* The actual binding is all in libluaSDL.so (Linux) and luaSDL.dll
  (Win32).  The code for this was generated by tolua, from a cleaned
  version of the SDL headers.  See the file "SDL.pkg".

* I had to comment out the part of Ignacio's code which registers some
  library info in a Lua table -- it was causing crashes on both
  platforms.  So use()'ing a library more than once may create
  problems!

* My SDL module does not yet use the excellent recommendations from
  Roberto's LTN7 (the core idea being, put all module symbols in a
  table, to prevent namespace problems).  Unfortunately it's not
  straightforward to implement this nicely using tolua.  tolua does
  have a handy "module" feature, but it would cause all the SDL calls
  to look like "SDL.SDL_Init(SDL.SDL_INIT_VIDEO)", which is silly,
  because SDL already has a namespace prefix on all its symbols.  And
  there's no easy way to get rid of the SDL_ prefix on the Lua size,
  but keep it on the C binding side.

  I think I'll just leave it as is; the SDL_ prefix should be adequate
  for preventing namespace problems.
