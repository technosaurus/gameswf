Renderer
========

* optimizations

  * treat line segments as true line segments, instead of a flat curve.

  * coarse clip/cull

  * maybe we can pre-digest shapes, to make a rough segmentation into
    fans/strips?  I.e. don't determine the curve tesselation, but do
    get the basic sequence of verts to emit, so that rendering can be
    very fast and direct with no sorting or edge clipping, etc.

  * turn outline fonts into textures, render glyphs using textured
    quads.

* handle gradients

  linear gradients could be done w/ a 1-D texture and texgen or
  explicit UV calcs.  Problem: potential banding.

  radial gradients need a 2D texture, or a pixel shader + 1D texture,
  or lots of subdivision w/ vertex coloring.  Not sure what the best
  policy is.

* antialiasing

  Do it using alpha channel in font textures.  For general vector
  shapes, probably just punt.  Provide sample setup for hardware
  assist (multisample or whatever).  Leave the decision up to the app.

* real lines

  Approach: within a path that has a line style, save the coords that
  come in and keep them in line-strip order.  Then, at the end of
  end_shape(), trace them out directly, including rounded edges.
  Should be pretty straightforward.

  Better (?): generate an outline from the line definition.


General
=======

* bitmapped fonts; not a native part of swf, but should be a good win
  in rendering speed on most hardware.  Perhaps render the font glyphs
  off to a texture, and pull them out at run-time instead of drawing
  the outline shapes.

  Alternative: make a separate tool that processes .swf's, and
  substitutes conventional text with bitmap shapes.  This actually
  sounds pretty good to me; reduces the amount of work at playback
  time.

* buttons

* text entry

* action stuff
