
AVRASM ver. 1.52  Main.asm Tue Nov 26 12:02:45 2002


         ;CodeVisionAVR C Compiler V1.23.6a Standard
         ;(C) Copyright 1998-2002 HP InfoTech s.r.l.
         ;http://www.hpinfotech.ro
         ;e-mail:office@hpinfotech.ro , hpinfotech@xnet.ro
         
         ;Chip type           : AT90S8535
         ;Clock frequency     : 4.000000 MHz
         ;Memory model        : Small
         ;Optimize for        : Size
         ;(s)printf features  : int, width
         ;Internal SRAM size  : 512
         ;External SRAM size  : 0
         ;Data Stack size     : 128
         ;Promote char to int : No
         ;char is unsigned    : Yes
         ;8 bit enums         : Yes
         ;Automatic register allocation : On
         ;Use AVR Studio Terminal I/O   : No
         
          	.DEVICE AT90S8535
          	.LISTMAC
          	.EQU UDRE=0x5
          	.EQU RXC=0x7
          	.EQU USR=0xB
          	.EQU UDR=0xC
          	.EQU EERE=0x0
          	.EQU EEWE=0x1
          	.EQU EEMWE=0x2
          	.EQU SPSR=0xE
          	.EQU SPDR=0xF
          	.EQU EECR=0x1C
          	.EQU EEDR=0x1D
          	.EQU EEARL=0x1E
          	.EQU EEARH=0x1F
          	.EQU WDTCR=0x21
          	.EQU MCUCR=0x35
          	.EQU RAMPZ=0x3B
          	.EQU SPL=0x3D
          	.EQU SPH=0x3E
          	.EQU SREG=0x3F
          	.DEF R0X0=R0
          	.DEF R0X1=R1
          	.DEF R0X2=R2
          	.DEF R0X3=R3
          	.DEF R0X4=R4
          	.DEF R0X5=R5
          	.DEF R0X6=R6
          	.DEF R0X7=R7
          	.DEF R0X8=R8
          	.DEF R0X9=R9
          	.DEF R0XA=R10
          	.DEF R0XB=R11
          	.DEF R0XC=R12
          	.DEF R0XD=R13
          	.DEF R0XE=R14
          	.DEF R0XF=R15
          	.DEF R0X10=R16
          	.DEF R0X11=R17
          	.DEF R0X12=R18
          	.DEF R0X13=R19
          	.DEF R0X14=R20
          	.DEF R0X15=R21
          	.DEF R0X16=R22
          	.DEF R0X17=R23
          	.DEF R0X18=R24
          	.DEF R0X19=R25
          	.DEF R0X1A=R26
          	.DEF R0X1B=R27
          	.DEF R0X1C=R28
          	.DEF R0X1D=R29
          	.DEF R0X1E=R30
          	.DEF R0X1F=R31
          	.EQU __se_bit=0x40
          	.EQU __sm_mask=0x30
          	.EQU __sm_powerdown=0x20
         
          	.MACRO __CPD1N
          	CPI  R30,LOW(@0)
          	LDI  R26,HIGH(@0)
          	CPC  R31,R26
          	LDI  R26,BYTE3(@0)
          	CPC  R22,R26
          	LDI  R26,BYTE4(@0)
          	CPC  R23,R26
          	.ENDM
         
          	.MACRO __CPD2N
          	CPI  R26,LOW(@0)
          	LDI  R30,HIGH(@0)
          	CPC  R27,R30
          	LDI  R30,BYTE3(@0)
          	CPC  R24,R30
          	LDI  R30,BYTE4(@0)
          	CPC  R25,R30
          	.ENDM
         
          	.MACRO __CPWRR
          	CP   R@0,R@2
          	CPC  R@1,R@3
          	.ENDM
         
          	.MACRO __CPWRN
          	CPI  R@0,LOW(@2)
          	LDI  R30,HIGH(@2)
          	CPC  R@1,R30
          	.ENDM
         
          	.MACRO __ADDD1N
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	SBCI R22,BYTE3(-@0)
          	SBCI R23,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __ADDD2N
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	SBCI R24,BYTE3(-@0)
          	SBCI R25,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __SUBD1N
          	SUBI R30,LOW(@0)
          	SBCI R31,HIGH(@0)
          	SBCI R22,BYTE3(@0)
          	SBCI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __SUBD2N
          	SUBI R26,LOW(@0)
          	SBCI R27,HIGH(@0)
          	SBCI R24,BYTE3(@0)
          	SBCI R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ANDD1N
          	ANDI R30,LOW(@0)
          	ANDI R31,HIGH(@0)
          	ANDI R22,BYTE3(@0)
          	ANDI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ORD1N
          	ORI  R30,LOW(@0)
          	ORI  R31,HIGH(@0)
          	ORI  R22,BYTE3(@0)
          	ORI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __DELAY_USB
          	LDI  R24,LOW(@0)
          __DELAY_USB_LOOP:
          	DEC  R24
          	BRNE __DELAY_USB_LOOP
          	.ENDM
         
          	.MACRO __DELAY_USW
          	LDI  R24,LOW(@0)
          	LDI  R25,HIGH(@0)
          __DELAY_USW_LOOP:
          	SBIW R24,1
          	BRNE __DELAY_USW_LOOP
          	.ENDM
         
          	.MACRO __CLRD1S
          	CLR  R30
          	STD  Y+@0,R30
          	STD  Y+@0+1,R30
          	STD  Y+@0+2,R30
          	STD  Y+@0+3,R30
          	.ENDM
         
          	.MACRO __GETD1S
          	LDD  R30,Y+@0
          	LDD  R31,Y+@0+1
          	LDD  R22,Y+@0+2
          	LDD  R23,Y+@0+3
          	.ENDM
         
          	.MACRO __PUTD1S
          	STD  Y+@0,R30
          	STD  Y+@0+1,R31
          	STD  Y+@0+2,R22
          	STD  Y+@0+3,R23
          	.ENDM
         
          	.MACRO __POINTB1MN
          	LDI  R30,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1MN
          	LDI  R30,LOW(@0+@1)
          	LDI  R31,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	.ENDM
         
          	.MACRO __POINTB2MN
          	LDI  R26,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW2MN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __GETD1N
          	LDI  R30,LOW(@0)
          	LDI  R31,HIGH(@0)
          	LDI  R22,BYTE3(@0)
          	LDI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2N
          	LDI  R26,LOW(@0)
          	LDI  R27,HIGH(@0)
          	LDI  R24,BYTE3(@0)
          	LDI  R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2S
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	LDD  R24,Y+@0+2
          	LDD  R25,Y+@0+3
          	.ENDM
         
          	.MACRO __GETB1MN
          	LDS  R30,@0+@1
          	.ENDM
         
          	.MACRO __GETW1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	LDS  R22,@0+@1+2
          	LDS  R23,@0+@1+3
          	.ENDM
         
          	.MACRO __GETBRMN
          	LDS  R@2,@0+@1
          	.ENDM
         
          	.MACRO __GETWRMN
          	LDS  R@2,@0+@1
          	LDS  R@3,@0+@1+1
          	.ENDM
         
          	.MACRO __GETB2MN
          	LDS  R26,@0+@1
          	.ENDM
         
          	.MACRO __GETW2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	LDS  R24,@0+@1+2
          	LDS  R25,@0+@1+3
          	.ENDM
         
          	.MACRO __PUTB1MN
          	STS  @0+@1,R30
          	.ENDM
         
          	.MACRO __PUTW1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	.ENDM
         
          	.MACRO __PUTD1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	STS  @0+@1+2,R22
          	STS  @0+@1+3,R23
          	.ENDM
         
          	.MACRO __PUTBMRN
          	STS  @0+@1,R@2
          	.ENDM
         
          	.MACRO __PUTWMRN
          	STS  @0+@1,R@2
          	STS  @0+@1+1,R@3
          	.ENDM
         
          	.MACRO __GETW1R
          	MOV  R30,R@0
          	MOV  R31,R@1
          	.ENDM
         
          	.MACRO __GETW2R
          	MOV  R26,R@0
          	MOV  R27,R@1
          	.ENDM
         
          	.MACRO __GETWRN
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __PUTW1R
          	MOV  R@0,R30
          	MOV  R@1,R31
          	.ENDM
         
          	.MACRO __PUTW2R
          	MOV  R@0,R26
          	MOV  R@1,R27
          	.ENDM
         
          	.MACRO __ADDWRN
          	SUBI R@0,LOW(-@2)
          	SBCI R@1,HIGH(-@2)
          	.ENDM
         
          	.MACRO __ADDWRR
          	ADD  R@0,R@2
          	ADC  R@1,R@3
          	.ENDM
         
          	.MACRO __SUBWRN
          	SUBI R@0,LOW(@2)
          	SBCI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __SUBWRR
          	SUB  R@0,R@2
          	SBC  R@1,R@3
          	.ENDM
         
          	.MACRO __ANDWRN
          	ANDI R@0,LOW(@2)
          	ANDI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ANDWRR
          	AND  R@0,R@2
          	AND  R@1,R@3
          	.ENDM
         
          	.MACRO __ORWRN
          	ORI  R@0,LOW(@2)
          	ORI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ORWRR
          	OR   R@0,R@2
          	OR   R@1,R@3
          	.ENDM
         
          	.MACRO __EORWRR
          	EOR  R@0,R@2
          	EOR  R@1,R@3
          	.ENDM
         
          	.MACRO __GETWRS
          	LDD  R@0,Y+@2
          	LDD  R@1,Y+@2+1
          	.ENDM
         
          	.MACRO __PUTWSR
          	STD  Y+@2,R@0
          	STD  Y+@2+1,R@1
          	.ENDM
         
          	.MACRO __MOVEWRR
          	MOV  R@0,R@2
          	MOV  R@1,R@3
          	.ENDM
         
          	.MACRO __INWR
          	IN   R@0,@2
          	IN   R@1,@2+1
          	.ENDM
         
          	.MACRO __OUTWR
          	OUT  @2+1,R@1
          	OUT  @2,R@0
          	.ENDM
         
          	.MACRO __CALL1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	ICALL
          	.ENDM
         
          	.MACRO __NBST
          	BST  R@0,@1
          	IN   R30,SREG
          	LDI  R31,0x40
          	EOR  R30,R31
          	OUT  SREG,R30
          	.ENDM
         
         
          	.MACRO __PUTB1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __GETB1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R30,Z
          	.ENDM
         
          	.MACRO __GETW1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R31,Z
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __GETD1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R1,Z+
          	LD   R22,Z+
          	LD   R23,Z
          	MOV  R30,R0
          	MOV  R31,R1
          	.ENDM
         
          	.MACRO __GETB2SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R26,X
          	.ENDM
         
          	.MACRO __GETW2SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	.ENDM
         
          	.MACRO __GETD2SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R1,X+
          	LD   R24,X+
          	LD   R25,X
          	MOV  R26,R0
          	MOV  R27,R1
          	.ENDM
         
          	.MACRO __GETBRSX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@1)
          	SBCI R31,HIGH(-@1)
          	LD   R@0,Z
          	.ENDM
         
          	.MACRO __GETWRSX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	LD   R@0,Z+
          	LD   R@1,Z
          	.ENDM
         
          	.MACRO __LSLW8SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R31,Z
          	CLR  R30
          	.ENDM
         
          	.MACRO __PUTB1SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __CLRW1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __CLRD1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __PUTB2SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R26
          	.ENDM
         
          	.MACRO __PUTW2SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z+,R26
          	ST   Z,R27
          	.ENDM
         
          	.MACRO __PUTBSRX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTWSRX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	ST   Z+,R@0
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTB1SNX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.CSEG
          	.ORG 0
         
          	.INCLUDE "Main.vec"
         
         ;INTERRUPT VECTORS
000000 c075      	RJMP __RESET
000001 cffe      	RJMP 0
000002 cffd      	RJMP 0
000003 cffc      	RJMP 0
000004 cffb      	RJMP 0
000005 cffa      	RJMP 0
000006 cff9      	RJMP 0
000007 cff8      	RJMP 0
000008 c1b5      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0
00000a cff5      	RJMP 0
00000b c1a1      	RJMP _UART_IntReceived
00000c cff3      	RJMP 0
00000d cff2      	RJMP 0
00000e cff1      	RJMP 0
00000f cff0      	RJMP 0
000010 cfef      	RJMP 0
         
          	.INCLUDE "Main.inc"
          __SOC_LEDS:
          	.DW  _SOC_LEDS
000011 00e0
          	.DW  0x6
000012 0006
          	.DB  0x0,0x1,0x3,0x7,0xF,0x1F
000013 0100
000014 0703
000015 1f0f
          __DischargePoints:
          	.DW  _DischargePoints
000016 00e6
          	.DW  0x32
000017 0032
          	.DW  0xF32,0xE9C,0xE42,0xDCA,0xD52,0xE38,0xDDE,0xDA2
000018 0f32
000019 0e9c
00001a 0e42
00001b 0dca
00001c 0d52
00001d 0e38
00001e 0dde
00001f 0da2
          	.DW  0xD0C,0xC94,0xD70,0xD52,0xCF8,0xC62,0xB90,0xCD0
000020 0d0c
000021 0c94
000022 0d70
000023 0d52
000024 0cf8
000025 0c62
000026 0b90
000027 0cd0
          	.DW  0xCB2,0xC58,0xBC2,0xAF0,0xC44,0xC26,0xBAE,0xADC
000028 0cb2
000029 0c58
00002a 0bc2
00002b 0af0
00002c 0c44
00002d 0c26
00002e 0bae
00002f 0adc
          	.DW  0xA46
000030 0a46
          	.DEF _BatteryPowerLow=R4
          	.DEF _RecBuffPtr=R5
          	.DEF _RecByteRdy=R6
          __PhaseOutFWD:
          	.DW  _PhaseOutFWD
000031 013c
          	.DW  0x8
000032 0008
          	.DB  0x7,0xB,0x16,0x13,0x25,0xD,0x26,0x7
000033 0b07
000034 1316
000035 0d25
000036 0726
          	.DEF _PhasePtr=R7
          	.DEF _PhaseErr=R8
          	.DEF _OvrTemp=R9
          	.DEF _CruiseMode=R10
          	.DEF _AdcPWMVal=R11
          	.DEF _AdcTempVal=R13
          _157:
          	.DB  0xD,0xA,0x56,0x31,0x30,0x30,0x20,0x52
000037 0a0d
000038 3156
000039 3030
00003a 5220
          	.DB  0x33,0x2E,0x31,0x32,0xD,0xA,0x0,0x4C
00003b 2e33
00003c 3231
00003d 0a0d
00003e 4c00
          	.DB  0x6F,0x77,0x20,0x56,0x6F,0x6C,0x74,0x61
00003f 776f
000040 5620
000041 6c6f
000042 6174
          	.DB  0x67,0x65,0xD,0xA,0x0
000043 6567
000044 0a0d
000045 0000
          _240:
          	.DB  0x45,0x63,0x2D,0x54,0x48,0x2C,0x25,0x64
000046 6345
000047 542d
000048 2c48
000049 6425
          	.DB  0x2C,0x0,0x50,0x66,0x2D,0x54,0x48,0x2C
00004a 002c
00004b 6650
00004c 542d
00004d 2c48
          	.DB  0x25,0x64,0x2C,0x0,0x20,0x52,0x50,0x4D
00004e 6425
00004f 002c
000050 5220
000051 4d50
          	.DB  0x2C,0x25,0x64,0x2C,0x0,0x42,0x56,0x2C
000052 252c
000053 2c64
000054 4200
000055 2c56
          	.DB  0x25,0x64,0x2C,0x0,0x20,0x42,0x43,0x2C
000056 6425
000057 002c
000058 4220
000059 2c43
          	.DB  0x25,0x64,0x2C,0x0,0x43,0x54,0x2C,0x25
00005a 6425
00005b 002c
00005c 5443
00005d 252c
          	.DB  0x64,0x2C,0x0,0x20,0x50,0x43,0x2C,0x25
00005e 2c64
00005f 2000
000060 4350
000061 252c
          	.DB  0x64,0x2C,0x0,0x20,0x48,0x53,0x2C,0x25
000062 2c64
000063 2000
000064 5348
000065 252c
          	.DB  0x64,0x0,0xD,0xA,0x0
000066 0064
000067 0a0d
000068 0000
          _tbl10_G2:
          	.DW  0x2710,0x3E8,0x64,0xA,0x1
000069 2710
00006a 03e8
00006b 0064
00006c 000a
00006d 0001
          _tbl16_G2:
          	.DW  0x1000,0x100,0x10,0x1
00006e 1000
00006f 0100
000070 0010
000071 0001
         
          __GLOBAL_INI_TBL:
          	.DW  __SOC_LEDS*2
000072 0022
          	.DW  __DischargePoints*2
000073 002c
          	.DW  __PhaseOutFWD*2
000074 0062
          	.DW  0
000075 0000
          __RESET:
000076 94f8      	CLI
000077 27ee      	CLR  R30
000078 bbec      	OUT  EECR,R30
000079 bfe5      	OUT  MCUCR,R30
         
         ;DISABLE WATCHDOG
00007a e1f8      	LDI  R31,0x18
00007b bdf1      	OUT  WDTCR,R31
00007c e1f0      	LDI  R31,0x10
00007d bdf1      	OUT  WDTCR,R31
         
         ;CLEAR R2-R14
00007e e08d      	LDI  R24,13
00007f e0a2      	LDI  R26,2
000080 27bb      	CLR  R27
          __CLEAR_REG:
000081 93ed      	ST   X+,R30
000082 958a      	DEC  R24
000083 f7e9      	BRNE __CLEAR_REG
         
         ;CLEAR SRAM
000084 e080      	LDI  R24,LOW(0x200)
000085 e092      	LDI  R25,HIGH(0x200)
000086 e6a0      	LDI  R26,0x60
          __CLEAR_SRAM:
000087 93ed      	ST   X+,R30
000088 9701      	SBIW R24,1
000089 f7e9      	BRNE __CLEAR_SRAM
         
         ;GLOBAL VARIABLES INITIALIZATION
00008a eee4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
          __GLOBAL_INI_NEXT:
00008c 95c8      	LPM
00008d 9631      	ADIW R30,1
00008e 2c10      	MOV  R1,R0
00008f 95c8      	LPM
000090 9631      	ADIW R30,1
000091 2f6e      	MOV  R22,R30
000092 2f7f      	MOV  R23,R31
000093 2df0      	MOV  R31,R0
000094 2de1      	MOV  R30,R1
000095 9730      	SBIW R30,0
000096 f0a1      	BREQ __GLOBAL_INI_END
000097 95c8      	LPM
000098 9631      	ADIW R30,1
000099 2da0      	MOV  R26,R0
00009a 95c8      	LPM
00009b 9631      	ADIW R30,1
00009c 2db0      	MOV  R27,R0
00009d 95c8      	LPM
00009e 9631      	ADIW R30,1
00009f 2d80      	MOV  R24,R0
0000a0 95c8      	LPM
0000a1 9631      	ADIW R30,1
0000a2 2d90      	MOV  R25,R0
          __GLOBAL_INI_LOOP:
0000a3 95c8      	LPM
0000a4 9631      	ADIW R30,1
0000a5 920d      	ST   X+,R0
0000a6 9701      	SBIW R24,1
0000a7 f7d9      	BRNE __GLOBAL_INI_LOOP
0000a8 2fe6      	MOV  R30,R22
0000a9 2ff7      	MOV  R31,R23
0000aa cfe1      	RJMP __GLOBAL_INI_NEXT
          __GLOBAL_INI_END:
         
         ;STACK POINTER INITIALIZATION
0000ab e5ef      	LDI  R30,LOW(0x25F)
0000ac bfed      	OUT  SPL,R30
0000ad e0e2      	LDI  R30,HIGH(0x25F)
0000ae bfee      	OUT  SPH,R30
         
         ;DATA STACK POINTER INITIALIZATION
0000af edcf      	LDI  R28,LOW(0xDF)
0000b0 e0d0      	LDI  R29,HIGH(0xDF)
         
0000b1 c183      	RJMP _main
         
          	.ESEG
          	.ORG 0
          	.DB  0 ; FIRST EEPROM LOCATION NOT USED, SEE ATMEL ERRATA SHEETS
000000 00
         
          	.DSEG
          	.ORG 0xE0
         ;       1 /*
         ;       2 Project : X50Cpu
         ;       3 Version : 1.01
         ;       4 Date    : 1/9/2002
         ;       5 Author  : Jeff Greason                    
         ;       6 Company : True Logic
         ;       7 Comments: 
         ;       8 
         ;       9 
         ;      10 Chip type           : AT90S8535
         ;      11 Clock frequency     : 4.000000 MHz
         ;      12 Memory model        : Small
         ;      13 Internal SRAM size  : 512
         ;      14 External SRAM size  : 0
         ;      15 Data Stack size     : 128
         ;      16 *********************************************/
         ;      17 
         ;      18 #include <90s8535.h>  
         ;      19 
         ;      20 // Standard Input/Output functions
         ;      21 #include <stdio.h>      
         ;      22 #include <string.h>
         ;      23 #include <math.h>                       
         ;      24                   
         ;      25                   
         ;      26 //#define __48VOLTS	
         ;      27 #define __REV_3_95A
         ;      28 
         ;      29 
         ;      30 //#define _DEBUG_FREQ_OUTPUT
         ;      31 
         ;      32 #define _SOFTWARE_VERSION "\015\012V100 R3.12\015\012" 
         ;      33 #define __CURRENT_SCALE_FACTOR	1.0
         ;      34 
         ;      35 #ifdef __48VOLTS 
         ;      36 	#define	__NEW_NIMH_VOLTAGE	5225
         ;      37 	#define __NEW_SLA_VOLTAGE	5092
         ;      38 	#define __MIN_STARTUP_VOLTAGE	4400
         ;      39 	#define __LOW_BATTERY_VOLTAGE	3750
         ;      40 	#define __MAX_WATT_SECONDS 	1866000
         ;      41 	#define __USED_WATT_SECONDS	1492000
         ;      42 	#define __DEFAULT_WATT_SECONDS	380000
         ;      43 	#define __ADC0_DIV_FACTOR	0.186
         ;      44 
         ;      45 #else
         ;      46 	#define __NEW_NIMH_VOLTAGE     3920
         ;      47 	#define __NEW_SLA_VOLTAGE      3820
         ;      48 	#define __MIN_STARTUP_VOLTAGE	3300
         ;      49 	#define __LOW_BATTERY_VOLTAGE	2800
         ;      50 	#define __MAX_WATT_SECONDS 	1400000
         ;      51 	#define __USED_WATT_SECONDS	1120000
         ;      52 	#define __DEFAULT_WATT_SECONDS	280000
         ;      53 	#define __ADC0_DIV_FACTOR	0.2046
         ;      54 #endif
         ;      55 
         ;      56 
         ;      57 #define TIMER_FREQ     		29440 
         ;      58 #define TIMER_HALF_SECOND     14720  
         ;      59 #define TIEMR_LED_SCAN		3000
         ;      60 #define TIMER_LONG_BLINK       22080 
         ;      61 #define AUTO_SHUTOFF_TIME	120
         ;      62                                           
         ;      63 
         ;      64 
         ;      65 #define COM_SEQ_FREQ	1275   // 8 com outputs / second...
         ;      66 #define _CALC_SECOND	15
         ;      67 #define _MAX_LOW_VOLTAGE_TIME	80
         ;      68                           
         ;      69 #pragma warn-     
         ;      70 
         ;      71 
         ;      72 //eeprom int LastBattVoltage = 0;
         ;      73 eeprom long PowerWattSeconds[4] = { __DEFAULT_WATT_SECONDS, __DEFAULT_WATT_SECONDS, __DEFAULT_WATT_SECONDS, __DEFAULT_WATT_SECONDS };
         
          	.ESEG
          _PowerWattSeconds:
          	.DW  0x45C0,0x4,0x45C0,0x4,0x45C0,0x4,0x45C0,0x4
000001 c0 45
000003 04 00
000005 c0 45
000007 04 00
000009 c0 45
00000b 04 00
00000d c0 45
00000f 04 00
         ;      74 
         ;      75 #pragma warn+
         ;      76         
         ;      77 //char szVerStr[19] = { _SOFTWARE_VERSION };
         ;      78 unsigned char SOC_LEDS[6] = { 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f };
         
          	.DSEG
          _SOC_LEDS:
0000e0      	.BYTE 0x6
         ;      79 int DischargePoints[5][5] = {
          _DischargePoints:
         ;      80 { 3890, 3740, 3650, 3530, 3410 },
         ;      81 { 3640, 3550, 3490, 3340, 3220 },
         ;      82 { 3440, 3410, 3320, 3170, 2960 },
         ;      83 { 3280, 3250, 3160, 3010, 2800 },
         ;      84 { 3140, 3110, 2990, 2780, 2630 }
         ;      85 };
0000e6      	.BYTE 0x32
         ;      86 
         ;      87 char BatteryPowerLow;
         ;      88 
         ;      89 
         ;      90 //char eeprom *eepptr;
         ;      91 //char *eepptr;  
         ;      92 //char *tptr;
         ;      93 
         ;      94 // Gear ratios
         ;      95 // Motor 11
         ;      96 // Wheel 45
         ;      97 // Tire  68.5" around
         ;      98 // Interupt freq 31.25 Khz
         ;      99 // Halls / Rotation 4:1
         ;     100            
         ;     101 #define	__PWM_RES_TOTAL 5 
         ;     102 
         ;     103 #define _LED_DATA_MSK	0x04;
         ;     104 #define _LED_CLK_MSK	0x08;
         ;     105 //#define _LED_SEL_MSK	0x10;
         ;     106 
         ;     107          
         ;     108             
         ;     109 #define TCOUNT_0	 78 
         ;     110 #define TCOUNT_1	65535 - 28 //  10Khz interupt rate... __PWM_RES_TOTAL
         ;     111 
         ;     112 #define _COM_BUFFER_SIZE	15              
         ;     113 unsigned char ComStr[ _COM_BUFFER_SIZE + 5 ];
          _ComStr:
000118      	.BYTE 0x14
         ;     114 unsigned char ComRecBuff[ _COM_BUFFER_SIZE + 1 ];   
          _ComRecBuff:
00012c      	.BYTE 0x10
         ;     115 //unsigned char ComRecStr[ _COM_BUFFER_SIZE + 1 ];
         ;     116 
         ;     117 unsigned char RecBuffPtr; 
         ;     118 unsigned char RecByteRdy;
         ;     119  
         ;     120 
         ;     121 //unsigned char PhaseOutREV[8] = { 0x07, 0x26, 0x0d, 0x25, 0x13, 0x16, 0x0b, 0x07 };
         ;     122 unsigned char PhaseOutFWD[8] = { 0x07, 0x0b, 0x16, 0x13, 0x25, 0x0d, 0x26, 0x07 };
          _PhaseOutFWD:
00013c      	.BYTE 0x8
         ;     123 //unsigned char PhaseSeq[8] = { 0, 3, 6, 2, 5, 1, 4, 0 };
         ;     124 unsigned char PhasePtr;
         ;     125 unsigned char PhaseErr;
         ;     126 
         ;     127 unsigned char OvrTemp;
         ;     128 unsigned char CruiseMode;
         ;     129                                                                                     
         ;     130 long MaxWattSeconds; // = 1400000; //1425000; 
          _MaxWattSeconds:
000144      	.BYTE 0x4
         ;     131 
         ;     132 unsigned char ActiveOut[8];
          _ActiveOut:
000148      	.BYTE 0x8
         ;     133 
         ;     134 void WriteDataToConsoleLEDS( unsigned char cdata );
         ;     135 
         ;     136 int AdcPWMVal;           
         ;     137 int AdcTempVal;
         ;     138 unsigned char HeatSinkTemp;    
          _HeatSinkTemp:
000150      	.BYTE 0x1
         ;     139  
         ;     140 unsigned char BatteryCurrent;
          _BatteryCurrent:
000151      	.BYTE 0x1
         ;     141 unsigned int BatteryVoltage; 
          _BatteryVoltage:
000152      	.BYTE 0x2
         ;     142 unsigned int AvgBatteryVoltage;
          _AvgBatteryVoltage:
000154      	.BYTE 0x2
         ;     143 unsigned int LowBatteryVoltage;
          _LowBatteryVoltage:
000156      	.BYTE 0x2
         ;     144 
         ;     145 //unsigned char PhaseCurrent;
         ;     146 char AutoUpdate;
          _AutoUpdate:
000158      	.BYTE 0x1
         ;     147 int iMaxEconoSpeed;   
          _iMaxEconoSpeed:
000159      	.BYTE 0x2
         ;     148 int iPhaseZero;
          _iPhaseZero:
00015b      	.BYTE 0x2
         ;     149 int iPhaseCurrent;
          _iPhaseCurrent:
00015d      	.BYTE 0x2
         ;     150 int iPhaseZeroPoints[ 6 ];
          _iPhaseZeroPoints:
00015f      	.BYTE 0xC
         ;     151 
         ;     152 
         ;     153 unsigned char cPWMVal;
          _cPWMVal:
00016b      	.BYTE 0x1
         ;     154 unsigned char OldcPWMVal;
          _OldcPWMVal:
00016c      	.BYTE 0x1
         ;     155 
         ;     156 unsigned char hSensors;  
          _hSensors:
00016d      	.BYTE 0x1
         ;     157 unsigned char prevhSensors;  
          _prevhSensors:
00016e      	.BYTE 0x1
         ;     158 
         ;     159 
         ;     160 
         ;     161 unsigned char LEDbyte; 
          _LEDbyte:
00016f      	.BYTE 0x1
         ;     162 unsigned char OldLEDbyte;
          _OldLEDbyte:
000170      	.BYTE 0x1
         ;     163 unsigned char calcLEDbyte;
          _calcLEDbyte:
000171      	.BYTE 0x1
         ;     164 unsigned char LEDStatus;
          _LEDStatus:
000172      	.BYTE 0x1
         ;     165 
         ;     166 unsigned char iTimerSOC;  // state of charge timer...
          _iTimerSOC:
000173      	.BYTE 0x1
         ;     167 
         ;     168 long CurrentWattSeconds;    
          _CurrentWattSeconds:
000174      	.BYTE 0x4
         ;     169 long SavedWattSeconds;
          _SavedWattSeconds:
000178      	.BYTE 0x4
         ;     170            
         ;     171      
         ;     172      
         ;     173 //unsigned char phase_drive;
         ;     174 long itrDelay;
          _itrDelay:
00017c      	.BYTE 0x4
         ;     175 char isecTmr;
          _isecTmr:
000180      	.BYTE 0x1
         ;     176 int isecTimer;
          _isecTimer:
000181      	.BYTE 0x2
         ;     177 char isecTmrWatts;
          _isecTmrWatts:
000183      	.BYTE 0x1
         ;     178                     
         ;     179 unsigned char DriveEnable; 
          _DriveEnable:
000184      	.BYTE 0x1
         ;     180                          
         ;     181 unsigned int iMotorTimer; // Timer for Speed measurement Timer Routine
          _iMotorTimer:
000185      	.BYTE 0x2
         ;     182 unsigned int iMotorSpeed; // Raw counts for Timer Routine
          _iMotorSpeed:
000187      	.BYTE 0x2
         ;     183 int iMotorRPM; //
          _iMotorRPM:
000189      	.BYTE 0x2
         ;     184 //int iBikeMPH;                 
         ;     185 unsigned char CurrentLimitByte;
          _CurrentLimitByte:
00018b      	.BYTE 0x1
         ;     186   
         ;     187 char ComSequence;
          _ComSequence:
00018c      	.BYTE 0x1
         ;     188 float vtmp, ftmp;
          _vtmp:
00018d      	.BYTE 0x4
          _ftmp:
000191      	.BYTE 0x4
         ;     189 
         ;     190 int itmp;
          _itmp:
000195      	.BYTE 0x2
         ;     191 unsigned char tmpChar = 0;            
          _tmpChar:
000197      	.BYTE 0x1
         ;     192 unsigned char tmpPWMVal;
          _tmpPWMVal:
000198      	.BYTE 0x1
         ;     193 
         ;     194 
         ;     195 //------------------------------------------------------
         ;     196 //  Function Declarations
         ;     197 //------------------------------------------------------
         ;     198 
         ;     199 unsigned int read_adc(unsigned char adc_input);   
         ;     200 void ComSend( char *UART_Str );    
         ;     201 unsigned char CalcStateOfChargeForConsole( void );
         ;     202 
         ;     203                           
         ;     204 unsigned char ConvertTempSensor( int ADCData );
         ;     205 void CalcCruiseControl( void );
         ;     206 void OutputComData( void );
         ;     207 
         ;     208 
         ;     209 void ProcessCommand( char *pRecStr );
         ;     210 void SendCRLFPrompt( void );
         ;     211               
         ;     212 void SaveWattSecondsToEPPROM( void );
         ;     213 void ReadWattSecondsFromEEPROM( void );
         ;     214 
         ;     215 int ReadBatteryVoltage( void );
         ;     216 
         ;     217 void ShutdownSystem( void );
         ;     218 
         ;     219 
         ;     220 void ShutdownSystem( void )
         ;     221 {       
         
          	.CSEG
          _ShutdownSystem:
         ;     222 	char tmpChar;
         ;     223 	cPWMVal = 0;  // turn throttle off and wait to power down...
0000b2 930a      	ST   -Y,R16
         ;	tmpChar -> R16
0000b3 d98c      	RCALL SUBOPT_0x0
         ;     224 	
         ;     225 	tmpChar = 0;   
0000b4 e000      	LDI  R16,LOW(0)
         ;     226 	while( 1 )
          _0x64:
         ;     227 	{
         ;     228 	  	WriteDataToConsoleLEDS( 0x01 );	
0000b5 d98e      	RCALL SUBOPT_0x1
0000b6 d990      	RCALL SUBOPT_0x2
         ;     229 	  	
         ;     230 		itrDelay = 0;
         ;     231 		while( itrDelay < TIMER_LONG_BLINK ) 
          _0x67:
0000b7 d99a      	RCALL SUBOPT_0x3
0000b8 f3f4      	BRLT _0x67
         ;     232 		{
         ;     233 		}
         ;     234 		WriteDataToConsoleLEDS( 0x00 );	
0000b9 d9a8      	RCALL SUBOPT_0x4
0000ba d98c      	RCALL SUBOPT_0x2
         ;     235 	  	
         ;     236 	  	itrDelay = 0;
         ;     237 		while( itrDelay < TIMER_LONG_BLINK ) 
          _0x6A:
0000bb d996      	RCALL SUBOPT_0x3
0000bc f3f4      	BRLT _0x6A
         ;     238 		{
         ;     239 		}
         ;     240 		tmpChar++;
0000bd 5f0f      	SUBI R16,-1
         ;     241 		            
         ;     242 		if( tmpChar > 5 )
0000be e0e5      	LDI  R30,LOW(5)
0000bf 17e0      	CP   R30,R16
0000c0 f418      	BRSH _0x6D
         ;     243 		{
         ;     244 			cPWMVal = 0;
0000c1 d97e      	RCALL SUBOPT_0x0
         ;     245 			PORTD = 0x20;	
0000c2 e2e0      	LDI  R30,LOW(32)
0000c3 bbe2      	OUT  0x12,R30
         ;     246 		}
         ;     247 	}	
          _0x6D:
0000c4 cff0      	RJMP _0x64
         ;     248 
         ;     249 }
0000c5 9109      	LD   R16,Y+
0000c6 9508      	RET
         ;     250 
         ;     251 int ReadBatteryVoltage( void )
         ;     252 {
          _ReadBatteryVoltage:
         ;     253 	AdcTempVal = read_adc( 0 );
0000c7 d99a      	RCALL SUBOPT_0x4
0000c8 d99c      	RCALL SUBOPT_0x5
         ;     254 	ftmp = AdcTempVal;
         ;     255       	vtmp = ftmp / __ADC0_DIV_FACTOR;
         ;     256       	return( (int)vtmp );
0000c9 d9c0      	RCALL SUBOPT_0x6
0000ca 9508      	RET
         ;     257 }
         ;     258 
         ;     259 
         ;     260 void SaveWattSecondsToEPPROM( void )
         ;     261 {	
          _SaveWattSecondsToEPPROM:
         ;     262 	// Read Battery Voltage      
         ;     263 	AdcTempVal = read_adc( 0 );
0000cb d996      	RCALL SUBOPT_0x4
0000cc d998      	RCALL SUBOPT_0x5
         ;     264 	ftmp = AdcTempVal;
         ;     265       	vtmp = ftmp / __ADC0_DIV_FACTOR;
         ;     266 	
         ;     267 	if( vtmp < 2700 )
0000cd 91a0 018d 	LDS  R26,_vtmp
0000cf 91b0 018e 	LDS  R27,_vtmp+1
0000d1 9180 018f 	LDS  R24,_vtmp+2
0000d3 9190 0190 	LDS  R25,_vtmp+3
0000d5   +  	__GETD1N 0x4528C000
0000d5 e0e0      	LDI  R30,LOW(0x4528c000)
0000d6 ecf0      	LDI  R31,HIGH(0x4528c000)
0000d7 e268      	LDI  R22,BYTE3(0x4528c000)
0000d8 e475      	LDI  R23,BYTE4(0x4528c000)
          	.ENDM
0000d9 de25      	RCALL __CMPF12
0000da f408      	BRSH _0x70
         ;     268 		return;
0000db 9508      	RET
         ;     269 	                       
         ;     270 	if( CurrentWattSeconds < 50 )
          _0x70:
0000dc 91a0 0174 	LDS  R26,_CurrentWattSeconds
0000de 91b0 0175 	LDS  R27,_CurrentWattSeconds+1
0000e0 9180 0176 	LDS  R24,_CurrentWattSeconds+2
0000e2 9190 0177 	LDS  R25,_CurrentWattSeconds+3
0000e4   +  	__CPD2N 0x32
0000e4 33a2      	CPI  R26,LOW(0x32)
0000e5 e0e0      	LDI  R30,HIGH(0x32)
0000e6 07be      	CPC  R27,R30
0000e7 e0e0      	LDI  R30,BYTE3(0x32)
0000e8 078e      	CPC  R24,R30
0000e9 e0e0      	LDI  R30,BYTE4(0x32)
0000ea 079e      	CPC  R25,R30
          	.ENDM
0000eb f464      	BRGE _0x71
         ;     271 		CurrentWattSeconds = 50;
0000ec   +  	__GETD1N 0x32
0000ec e3e2      	LDI  R30,LOW(0x32)
0000ed e0f0      	LDI  R31,HIGH(0x32)
0000ee e060      	LDI  R22,BYTE3(0x32)
0000ef e070      	LDI  R23,BYTE4(0x32)
          	.ENDM
0000f0 93e0 0174 	STS  _CurrentWattSeconds,R30
0000f2 93f0 0175 	STS  _CurrentWattSeconds+1,R31
0000f4 9360 0176 	STS  _CurrentWattSeconds+2,R22
0000f6 9370 0177 	STS  _CurrentWattSeconds+3,R23
         ;     272 		
         ;     273  	PowerWattSeconds[0] = CurrentWattSeconds;
          _0x71:
0000f8 91e0 0174 	LDS  R30,_CurrentWattSeconds
0000fa 91f0 0175 	LDS  R31,_CurrentWattSeconds+1
0000fc 9160 0176 	LDS  R22,_CurrentWattSeconds+2
0000fe 9170 0177 	LDS  R23,_CurrentWattSeconds+3
000100 e0a1      	LDI  R26,LOW(_PowerWattSeconds)
000101 e0b0      	LDI  R27,HIGH(_PowerWattSeconds)
000102 dc79      	RCALL __EEPROMWRD
         ;     274  	PowerWattSeconds[1] = CurrentWattSeconds;
000103   +  	__POINTW2MN _PowerWattSeconds,4
000103 e0a5      	LDI  R26,LOW(_powerwattseconds+0x4)
000104 e0b0      	LDI  R27,HIGH(_powerwattseconds+0x4)
          	.ENDM
000105 d98e      	RCALL SUBOPT_0x7
         ;     275  	PowerWattSeconds[2] = CurrentWattSeconds;
000106   +  	__POINTW2MN _PowerWattSeconds,8
000106 e0a9      	LDI  R26,LOW(_powerwattseconds+0x8)
000107 e0b0      	LDI  R27,HIGH(_powerwattseconds+0x8)
          	.ENDM
000108 d98b      	RCALL SUBOPT_0x7
         ;     276  	PowerWattSeconds[3] = CurrentWattSeconds; 		
000109   +  	__POINTW2MN _PowerWattSeconds,12
000109 e0ad      	LDI  R26,LOW(_powerwattseconds+0xc)
00010a e0b0      	LDI  R27,HIGH(_powerwattseconds+0xc)
          	.ENDM
00010b d988      	RCALL SUBOPT_0x7
         ;     277 }     
00010c 9508      	RET
         ;     278 void ReadWattSecondsFromEEPROM( void )
         ;     279 {
          _ReadWattSecondsFromEEPROM:
         ;     280  	// read the values and compare them to eachother...
         ;     281 	
         ;     282 	if( PowerWattSeconds[2] == PowerWattSeconds[0] )
00010d   +  	__POINTW2MN _PowerWattSeconds,8
00010d e0a9      	LDI  R26,LOW(_powerwattseconds+0x8)
00010e e0b0      	LDI  R27,HIGH(_powerwattseconds+0x8)
          	.ENDM
00010f dc59      	RCALL __EEPROMRDD
000110 937f      	PUSH R23
000111 936f      	PUSH R22
000112 93ff      	PUSH R31
000113 93ef      	PUSH R30
000114 d989      	RCALL SUBOPT_0x8
000115 91af      	POP  R26
000116 91bf      	POP  R27
000117 918f      	POP  R24
000118 919f      	POP  R25
000119 de13      	RCALL __CPD12
00011a f451      	BRNE _0x73
         ;     283 	{
         ;     284 		SavedWattSeconds = PowerWattSeconds[0];
00011b d982      	RCALL SUBOPT_0x8
00011c 93e0 0178 	STS  _SavedWattSeconds,R30
00011e 93f0 0179 	STS  _SavedWattSeconds+1,R31
000120 9360 017a 	STS  _SavedWattSeconds+2,R22
000122 9370 017b 	STS  _SavedWattSeconds+3,R23
         ;     285         }
         ;     286         else if( PowerWattSeconds[3] == PowerWattSeconds[1] )
000124 c020      	RJMP _0x74
          _0x73:
000125   +  	__POINTW2MN _PowerWattSeconds,12
000125 e0ad      	LDI  R26,LOW(_powerwattseconds+0xc)
000126 e0b0      	LDI  R27,HIGH(_powerwattseconds+0xc)
          	.ENDM
000127 dc41      	RCALL __EEPROMRDD
000128 937f      	PUSH R23
000129 936f      	PUSH R22
00012a 93ff      	PUSH R31
00012b 93ef      	PUSH R30
00012c   +  	__POINTW2MN _PowerWattSeconds,4
00012c e0a5      	LDI  R26,LOW(_powerwattseconds+0x4)
00012d e0b0      	LDI  R27,HIGH(_powerwattseconds+0x4)
          	.ENDM
00012e dc3a      	RCALL __EEPROMRDD
00012f 91af      	POP  R26
000130 91bf      	POP  R27
000131 918f      	POP  R24
000132 919f      	POP  R25
000133 ddf9      	RCALL __CPD12
000134 f421      	BRNE _0x75
         ;     287         {
         ;     288 		SavedWattSeconds = PowerWattSeconds[1];
000135   +  	__POINTW2MN _PowerWattSeconds,4
000135 e0a5      	LDI  R26,LOW(_powerwattseconds+0x4)
000136 e0b0      	LDI  R27,HIGH(_powerwattseconds+0x4)
          	.ENDM
000137 dc31      	RCALL __EEPROMRDD
000138 c004      	RJMP _0x1C4
         ;     289         }                                            
         ;     290         else
          _0x75:
         ;     291         {
         ;     292         	SavedWattSeconds = __DEFAULT_WATT_SECONDS;
000139   +  	__GETD1N 0x445C0
000139 ece0      	LDI  R30,LOW(0x445c0)
00013a e4f5      	LDI  R31,HIGH(0x445c0)
00013b e064      	LDI  R22,BYTE3(0x445c0)
00013c e070      	LDI  R23,BYTE4(0x445c0)
          	.ENDM
          _0x1C4:
00013d 93e0 0178 	STS  _SavedWattSeconds,R30
00013f 93f0 0179 	STS  _SavedWattSeconds+1,R31
000141 9360 017a 	STS  _SavedWattSeconds+2,R22
000143 9370 017b 	STS  _SavedWattSeconds+3,R23
         ;     293         }
          _0x74:
         ;     294         
         ;     295         if( SavedWattSeconds > MaxWattSeconds )
000145 91e0 0144 	LDS  R30,_MaxWattSeconds
000147 91f0 0145 	LDS  R31,_MaxWattSeconds+1
000149 9160 0146 	LDS  R22,_MaxWattSeconds+2
00014b 9170 0147 	LDS  R23,_MaxWattSeconds+3
00014d 91a0 0178 	LDS  R26,_SavedWattSeconds
00014f 91b0 0179 	LDS  R27,_SavedWattSeconds+1
000151 9180 017a 	LDS  R24,_SavedWattSeconds+2
000153 9190 017b 	LDS  R25,_SavedWattSeconds+3
000155 ddd7      	RCALL __CPD12
000156 f40c      	BRGE _0x77
         ;     296         {
         ;     297          	// bad reading...
         ;     298          	SavedWattSeconds = __DEFAULT_WATT_SECONDS;
000157 d94a      	RCALL SUBOPT_0x9
         ;     299         }                        
         ;     300         if( SavedWattSeconds < 0 )
          _0x77:
000158 91a0 0178 	LDS  R26,_SavedWattSeconds
00015a 91b0 0179 	LDS  R27,_SavedWattSeconds+1
00015c 9180 017a 	LDS  R24,_SavedWattSeconds+2
00015e 9190 017b 	LDS  R25,_SavedWattSeconds+3
000160 ddc2      	RCALL __CPD20
000161 f40c      	BRGE _0x78
         ;     301         {
         ;     302         	SavedWattSeconds = __DEFAULT_WATT_SECONDS;
000162 d93f      	RCALL SUBOPT_0x9
         ;     303 	}
         ;     304                                        
         ;     305 }
          _0x78:
000163 9508      	RET
         ;     306 
         ;     307 // ComSend waits til the string is sent before returning 
         ;     308 void ComSend( char *UART_Str )
         ;     309 {
          _ComSend:
         ;     310 	int ptr, tilt;
         ;     311   	tilt = 0;
000164 9724      	SBIW R28,4
         ;	*UART_Str -> Y+4
         ;	ptr -> Y+2
         ;	tilt -> Y+0
000165 27ee      	CLR  R30
000166 83e8      	STD  Y+0,R30
000167 83e9      	STD  Y+0+1,R30
         ;     312 	ptr = 0;
000168 27ee      	CLR  R30
000169 83ea      	STD  Y+2,R30
00016a 83eb      	STD  Y+2+1,R30
         ;     313 	while( UART_Str[ptr] != 0 )
          _0x7A:
00016b d943      	RCALL SUBOPT_0xA
00016c 30e0      	CPI  R30,0
00016d f179      	BREQ _0x7C
         ;     314 	{  	
         ;     315      		UDR = UART_Str[ptr];
00016e d940      	RCALL SUBOPT_0xA
00016f b9ec      	OUT  0xC,R30
         ;     316      		ptr++; 
000170 81ea      	LDD  R30,Y+2
000171 81fb      	LDD  R31,Y+2+1
000172 9631      	ADIW R30,1
000173 83ea      	STD  Y+2,R30
000174 83fb      	STD  Y+2+1,R31
         ;     317      		while(( USR & 0x40 ) == 0 )
          _0x7D:
000175 995e      	SBIC 0xB,6
000176 c01a      	RJMP _0x7F
         ;     318      		{               
         ;     319      			itrDelay = 0;
000177 27ee      	CLR  R30
000178 93e0 017c 	STS  _itrDelay,R30
00017a 93e0 017d 	STS  _itrDelay+1,R30
00017c 93e0 017e 	STS  _itrDelay+2,R30
00017e 93e0 017f 	STS  _itrDelay+3,R30
         ;     320   			while( itrDelay < 10 ) 
          _0x80:
000180 91a0 017c 	LDS  R26,_itrDelay
000182 91b0 017d 	LDS  R27,_itrDelay+1
000184 9180 017e 	LDS  R24,_itrDelay+2
000186 9190 017f 	LDS  R25,_itrDelay+3
000188   +  	__CPD2N 0xA
000188 30aa      	CPI  R26,LOW(0xa)
000189 e0e0      	LDI  R30,HIGH(0xa)
00018a 07be      	CPC  R27,R30
00018b e0e0      	LDI  R30,BYTE3(0xa)
00018c 078e      	CPC  R24,R30
00018d e0e0      	LDI  R30,BYTE4(0xa)
00018e 079e      	CPC  R25,R30
          	.ENDM
00018f f384      	BRLT _0x80
         ;     321 			{
         ;     322 			}
         ;     323 	
         ;     324 	 		//delay_it( 100 );
         ;     325      		}   
000190 cfe4      	RJMP _0x7D
          _0x7F:
         ;     326       		//delay_it( 200 );     	
         ;     327 		itrDelay = 0;
000191 27ee      	CLR  R30
000192 93e0 017c 	STS  _itrDelay,R30
000194 93e0 017d 	STS  _itrDelay+1,R30
000196 93e0 017e 	STS  _itrDelay+2,R30
000198 93e0 017f 	STS  _itrDelay+3,R30
         ;     328 		while( itrDelay < 20 ) 
          _0x83:
00019a d91c      	RCALL SUBOPT_0xB
00019b f3f4      	BRLT _0x83
         ;     329 		{
         ;     330 		}
         ;     331     }
00019c cfce      	RJMP _0x7A
          _0x7C:
         ;     332     while(( USR & 0x40 ) == 0 )
          _0x86:
00019d 995e      	SBIC 0xB,6
00019e c00c      	RJMP _0x88
         ;     333     {             
         ;     334     		itrDelay = 0;
00019f 27ee      	CLR  R30
0001a0 93e0 017c 	STS  _itrDelay,R30
0001a2 93e0 017d 	STS  _itrDelay+1,R30
0001a4 93e0 017e 	STS  _itrDelay+2,R30
0001a6 93e0 017f 	STS  _itrDelay+3,R30
         ;     335 		while( itrDelay < 20 ) 
          _0x89:
0001a8 d90e      	RCALL SUBOPT_0xB
0001a9 f3f4      	BRLT _0x89
         ;     336 		{
         ;     337 		}
         ;     338 		//delay_it( 100 );    	     	
         ;     339     }
0001aa cff2      	RJMP _0x86
          _0x88:
         ;     340 }
0001ab 9626      	ADIW R28,6
0001ac 9508      	RET
         ;     341 
         ;     342 interrupt [UART_RXC] void UART_IntReceived(void) 
         ;     343 {
          _UART_IntReceived:
0001ad db2d      	RCALL __SAVEISR
         ;     344     unsigned char newchar;
         ;     345     newchar = UDR; 
0001ae 930a      	ST   -Y,R16
         ;	newchar -> R16
0001af b10c      	IN   R16,12
         ;     346  
         ;     347         if (USR & 0x18) newchar = 0xff;              
0001b0 b1eb      	IN   R30,0xB
0001b1 71e8      	ANDI R30,LOW(0x18)
0001b2 f009      	BREQ _0x8D
0001b3 ef0f      	LDI  R16,LOW(255)
         ;     348         ComRecBuff[RecBuffPtr] = newchar; 
          _0x8D:
0001b4 d912      	RCALL SUBOPT_0xC
0001b5 930c      	ST   X,R16
         ;     349 		RecBuffPtr++; 
0001b6 9453      	INC  R5
         ;     350        
         ;     351         if (newchar == 0x0A)
0001b7 300a      	CPI  R16,10
0001b8 f421      	BRNE _0x8E
         ;     352         {          
         ;     353         	ComRecBuff[RecBuffPtr] = 0;   
0001b9 d90d      	RCALL SUBOPT_0xC
0001ba d911      	RCALL SUBOPT_0xD
         ;     354 
         ;     355            	RecByteRdy = RecBuffPtr;
0001bb 2c65      	MOV  R6,R5
         ;     356         	RecBuffPtr = 0;
0001bc 2455      	CLR  R5
         ;     357         }
         ;     358 }
          _0x8E:
0001bd c056      	RJMP _0x1C3
         ;     359 
         ;     360 
         ;     361 // Timer 1 overflow interrupt service routine
         ;     362 interrupt [TIM1_OVF] void timer1_ovf_isr(void)
         ;     363 {                             
          _timer1_ovf_isr:
0001be db1c      	RCALL __SAVEISR
         ;     364 	unsigned char pcbyte;
         ;     365 		
         ;     366 	TCNT1=TCOUNT_1;
0001bf 930a      	ST   -Y,R16
         ;	pcbyte -> R16
0001c0 d90e      	RCALL SUBOPT_0xE
         ;     367 
         ;     368 #ifdef _DEBUG_FREQ_OUTPUT
         ;     369 	PORTD = 0x04;
         ;     370 #endif
         ;     371 
         ;     372 	// save old value
         ;     373 	prevhSensors = hSensors;
0001c1 91e0 016d 	LDS  R30,_hSensors
0001c3 93e0 016e 	STS  _prevhSensors,R30
         ;     374 	
         ;     375 	// scan for new  HALL sensors
         ;     376 	hSensors = PINB & 0x07;
0001c5 b3e6      	IN   R30,0x16
0001c6 70e7      	ANDI R30,LOW(0x7)
0001c7 93e0 016d 	STS  _hSensors,R30
         ;     377 //	hSensors = hSensors & 0x07;
         ;     378     	
         ;     379         pcbyte = ActiveOut[ hSensors ];
0001c9 27ff      	CLR  R31
0001ca 5be8      	SUBI R30,LOW(-_ActiveOut)
0001cb 4ffe      	SBCI R31,HIGH(-_ActiveOut)
0001cc 8100      	LD   R16,Z
         ;     380         
         ;     381 	if( prevhSensors != hSensors )
0001cd 91e0 016d 	LDS  R30,_hSensors
0001cf 91a0 016e 	LDS  R26,_prevhSensors
0001d1 17ea      	CP   R30,R26
0001d2 f009      	BREQ _0x90
         ;     382 	{
         ;     383         	pcbyte = pcbyte | 0x07;
0001d3 6007      	ORI  R16,LOW(7)
         ;     384 	}
         ;     385         PORTC = pcbyte;
          _0x90:
0001d4 bb05      	OUT  0x15,R16
         ;     386 	PORTC = pcbyte + 0x40;
0001d5 2fe0      	MOV  R30,R16
0001d6 5ce0      	SUBI R30,-LOW(64)
0001d7 d8fc      	RCALL SUBOPT_0xF
         ;     387 	PORTC = 0x00;
         ;     388 
         ;     389 	PORTC = cPWMVal;    
0001d8 91e0 016b 	LDS  R30,_cPWMVal
0001da bbe5      	OUT  0x15,R30
         ;     390 	PORTC = cPWMVal + 0x80;
0001db 58e0      	SUBI R30,-LOW(128)
0001dc d8f7      	RCALL SUBOPT_0xF
         ;     391 	PORTC = 0x00;
         ;     392   	
         ;     393 	// do freq measurement here
         ;     394 	
         ;     395 	if( iMotorTimer < TIMER_FREQ )
0001dd 91a0 0185 	LDS  R26,_iMotorTimer
0001df 91b0 0186 	LDS  R27,_iMotorTimer+1
0001e1 30a0      	CPI  R26,LOW(0x7300)
0001e2 e7e3      	LDI  R30,HIGH(0x7300)
0001e3 07be      	CPC  R27,R30
0001e4 f450      	BRSH _0x91
         ;     396 	{ 
         ;     397 		iMotorTimer++;               		
0001e5 91e0 0185 	LDS  R30,_iMotorTimer
0001e7 91f0 0186 	LDS  R31,_iMotorTimer+1
0001e9 9631      	ADIW R30,1
0001ea 93e0 0185 	STS  _iMotorTimer,R30
0001ec 93f0 0186 	STS  _iMotorTimer+1,R31
         ;     398 	}
         ;     399 	else
0001ee c001      	RJMP _0x92
          _0x91:
         ;     400 	{
         ;     401 	   	iMotorSpeed = iMotorTimer;
0001ef d8e8      	RCALL SUBOPT_0x10
         ;     402 	}
          _0x92:
         ;     403 	if((( prevhSensors & 0x01 ) == 0 )&&(( hSensors & 0x01 ) == 1 )) 
0001f0 91e0 016e 	LDS  R30,_prevhSensors
0001f2 70e1      	ANDI R30,LOW(0x1)
0001f3 f429      	BRNE _0x94
0001f4 91e0 016d 	LDS  R30,_hSensors
0001f6 70e1      	ANDI R30,LOW(0x1)
0001f7 30e1      	CPI  R30,LOW(0x1)
0001f8 f009      	BREQ _0x95
          _0x94:
0001f9 c006      	RJMP _0x93
          _0x95:
         ;     404 	{
         ;     405 	   // hall A just went high again...
         ;     406 		iMotorSpeed = iMotorTimer;
0001fa d8dd      	RCALL SUBOPT_0x10
         ;     407 		iMotorTimer = 0;   
0001fb 27ee      	CLR  R30
0001fc 93e0 0185 	STS  _iMotorTimer,R30
0001fe 93e0 0186 	STS  _iMotorTimer+1,R30
         ;     408 	}
         ;     409 	itrDelay++;
          _0x93:
000200 91e0 017c 	LDS  R30,_itrDelay
000202 91f0 017d 	LDS  R31,_itrDelay+1
000204 9160 017e 	LDS  R22,_itrDelay+2
000206 9170 017f 	LDS  R23,_itrDelay+3
000208   +  	__SUBD1N -1
000208 5fef      	SUBI R30,LOW(-0x1)
000209 4fff      	SBCI R31,HIGH(-0x1)
00020a 4f6f      	SBCI R22,BYTE3(-0x1)
00020b 4f7f      	SBCI R23,BYTE4(-0x1)
          	.ENDM
00020c 93e0 017c 	STS  _itrDelay,R30
00020e 93f0 017d 	STS  _itrDelay+1,R31
000210 9360 017e 	STS  _itrDelay+2,R22
000212 9370 017f 	STS  _itrDelay+3,R23
         ;     410 
         ;     411 #ifdef _DEBUG_FREQ_OUTPUT
         ;     412 	PORTD = 0x00;
         ;     413 #endif
         ;     414 
         ;     415 }
          _0x1C3:
000214 9109      	LD   R16,Y+
000215 dad3      	RCALL __LOADISR
000216 9518      	RETI
         ;     416 
         ;     417 
         ;     418 
         ;     419 #define ADC_VREF_TYPE 0x00
         ;     420 // Read the ADC conversion result
         ;     421 unsigned int read_adc(unsigned char adc_input)
         ;     422 {      
          _read_adc:
         ;     423 	int ret = 0; //, av[4];
         ;     424 	char indx;
         ;     425 	
         ;     426 	for( indx = 0; indx <= 7; indx++ )
000217 dd21      	RCALL __SAVELOCR3
         ;	adc_input -> Y+3
         ;	ret -> R16,R17
         ;	indx -> R18
000218 e000      	LDI  R16,0
000219 e010      	LDI  R17,0
00021a e020      	LDI  R18,LOW(0)
          _0x98:
00021b e0e7      	LDI  R30,LOW(7)
00021c 17e2      	CP   R30,R18
00021d f060      	BRLO _0x99
         ;     427 	{	
         ;     428 		ADMUX=adc_input|ADC_VREF_TYPE;
00021e 81eb      	LDD  R30,Y+3
00021f b9e7      	OUT  0x7,R30
         ;     429 		ADCSR|=0x40;
000220 9a36      	SBI  0x6,6
         ;     430 		while ((ADCSR&0x10)==0);
          _0x9A:
000221 9b34      	SBIS 0x6,4
000222 cffe      	RJMP _0x9A
         ;     431 		ADCSR|=0x10;
000223 9a34      	SBI  0x6,4
         ;     432 		ret+= ADCW;
000224 b1e4      	IN   R30,0x4
000225 b1f5      	IN   R31,0x4+1
000226   +  	__ADDWRR 16,17,30,31
000226 0f0e      	ADD  R0x10,R0x1e
000227 1f1f      	ADC  R0x11,R0x1f
          	.ENDM
         ;     433 	}
000228 5f2f      	SUBI R18,-1
000229 cff1      	RJMP _0x98
          _0x99:
         ;     434 	ret = ret >> 3;     
00022a 9515      	ASR  R17
00022b 9507      	ROR  R16
00022c 9515      	ASR  R17
00022d 9507      	ROR  R16
00022e 9515      	ASR  R17
00022f 9507      	ROR  R16
         ;     435 	return ret;	
000230   +  	__GETW1R 16,17
000230 2fe0      	MOV  R30,R0x10
000231 2ff1      	MOV  R31,R0x11
          	.ENDM
000232 dd0d      	RCALL __LOADLOCR3
000233 9624      	ADIW R28,4
000234 9508      	RET
         ;     436 }
         ;     437 
         ;     438 
         ;     439 void main( void )
         ;     440 {                             
          _main:
         ;     441  
         ;     442 	PhasePtr = 1;
000235 e0e1      	LDI  R30,LOW(1)
000236 2e7e      	MOV  R7,R30
         ;     443 	PhaseErr = 0;    
000237 2488      	CLR  R8
         ;     444 	iTimerSOC = 0;
000238 d8a8      	RCALL SUBOPT_0x11
         ;     445     
         ;     446 	// Declare your local variables here
         ;     447 
         ;     448 	// Port A
         ;     449 	PORTA=0x00;
000239 27ee      	CLR  R30
00023a bbeb      	OUT  0x1B,R30
         ;     450 	DDRA=0x00;
00023b bbea      	OUT  0x1A,R30
         ;     451 
         ;     452 	// Port B
         ;     453 	PORTB=0x00;
00023c bbe8      	OUT  0x18,R30
         ;     454 	DDRB=0x00;
00023d bbe7      	OUT  0x17,R30
         ;     455 
         ;     456 	// Port C
         ;     457 	PORTC=0x00;
00023e d8a6      	RCALL SUBOPT_0x12
         ;     458 	DDRC=0xFF;
00023f efef      	LDI  R30,LOW(255)
000240 bbe4      	OUT  0x14,R30
         ;     459 
         ;     460 	// Port D
         ;     461 	PORTD = 0x00;
000241 27ee      	CLR  R30
000242 bbe2      	OUT  0x12,R30
         ;     462 	DDRD=0xfc;
000243 efec      	LDI  R30,LOW(252)
000244 bbe1      	OUT  0x11,R30
         ;     463 
         ;     464 	// Timer/Counter 0 initialization
         ;     465 	//TCCR0=0x04;  //    CLK / 64
         ;     466 	//TCNT0=0x00;
         ;     467 
         ;     468 	// Timer/Counter 1 initialization
         ;     469 	TCCR1A=0x00;
000245 27ee      	CLR  R30
000246 bdef      	OUT  0x2F,R30
         ;     470 	TCCR1B=0x02; // CLK / 8
000247 e0e2      	LDI  R30,LOW(2)
000248 bdee      	OUT  0x2E,R30
         ;     471 	TCNT1H=0xff;
000249 efef      	LDI  R30,LOW(255)
00024a bded      	OUT  0x2D,R30
         ;     472 	TCNT1L=0x00;
00024b 27ee      	CLR  R30
00024c bdec      	OUT  0x2C,R30
         ;     473 
         ;     474 	// External Interrupt(s) initialization
         ;     475 	GIMSK=0x00;
00024d bfeb      	OUT  0x3B,R30
         ;     476 	MCUCR=0x00;
00024e bfe5      	OUT  0x35,R30
         ;     477 
         ;     478 	// Timer(s)/Counter(s) Interrupt(s) initialization
         ;     479 	TIMSK=0x04;
00024f e0e4      	LDI  R30,LOW(4)
000250 bfe9      	OUT  0x39,R30
         ;     480 
         ;     481 	// UART initialization
         ;     482 	UCR=0x98;   //0x18;
000251 e9e8      	LDI  R30,LOW(152)
000252 b9ea      	OUT  0xA,R30
         ;     483 	UBRR=0x19;  //0x0c for 4 MHZ 0x19 for 8MHZ
000253 e1e9      	LDI  R30,LOW(25)
000254 b9e9      	OUT  0x9,R30
         ;     484 
         ;     485 	// Analog Comparator initialization
         ;     486 	ACSR=0x80;
000255 e8e0      	LDI  R30,LOW(128)
000256 b9e8      	OUT  0x8,R30
         ;     487 
         ;     488 	// ADC initialization
         ;     489 	ADMUX=ADC_VREF_TYPE;
000257 27ee      	CLR  R30
000258 b9e7      	OUT  0x7,R30
         ;     490 	ADCSR=0x81;
000259 e8e1      	LDI  R30,LOW(129)
00025a b9e6      	OUT  0x6,R30
         ;     491 
         ;     492 	// Prep Commutation array for forward motion
         ;     493 	for( itmp = 0; itmp <= 7; itmp++ )
00025b 27ee      	CLR  R30
00025c 93e0 0195 	STS  _itmp,R30
00025e 93e0 0196 	STS  _itmp+1,R30
          _0x9F:
000260 91a0 0195 	LDS  R26,_itmp
000262 91b0 0196 	LDS  R27,_itmp+1
000264 e0e7      	LDI  R30,LOW(7)
000265 e0f0      	LDI  R31,HIGH(7)
000266 17ea      	CP   R30,R26
000267 07fb      	CPC  R31,R27
000268 f0a4      	BRLT _0xA0
         ;     494 	{
         ;     495 		ActiveOut[ itmp ] = PhaseOutFWD[ itmp ];
000269 91e0 0195 	LDS  R30,_itmp
00026b 91f0 0196 	LDS  R31,_itmp+1
00026d 5be8      	SUBI R30,LOW(-_ActiveOut)
00026e 4ffe      	SBCI R31,HIGH(-_ActiveOut)
00026f 93ff      	PUSH R31
000270 93ef      	PUSH R30
000271 91e0 0195 	LDS  R30,_itmp
000273 91f0 0196 	LDS  R31,_itmp+1
000275 5ce4      	SUBI R30,LOW(-_PhaseOutFWD)
000276 4ffe      	SBCI R31,HIGH(-_PhaseOutFWD)
000277 81e0      	LD   R30,Z
000278 91af      	POP  R26
000279 91bf      	POP  R27
00027a 93ec      	ST   X,R30
         ;     496 	}
00027b d86c      	RCALL SUBOPT_0x13
00027c cfe3      	RJMP _0x9F
          _0xA0:
         ;     497                     
         ;     498 
         ;     499 	//TCNT0 = TCOUNT_0;
         ;     500 	TCNT1 = TCOUNT_1;
00027d d851      	RCALL SUBOPT_0xE
         ;     501 
         ;     502        
         ;     503     	PORTC = 0;    
00027e d866      	RCALL SUBOPT_0x12
         ;     504 	PORTC = PhaseOutFWD[ 0 ];
00027f d872      	RCALL SUBOPT_0x14
         ;     505 	PORTC = PhaseOutFWD[ 0 ];
000280 d871      	RCALL SUBOPT_0x14
         ;     506 
         ;     507 	PORTC = 0x40 | PhaseOutFWD[ 0 ];
000281 d874      	RCALL SUBOPT_0x15
000282 bbe5      	OUT  0x15,R30
         ;     508 	PORTC = 0x40 | PhaseOutFWD[ 0 ];
000283 d872      	RCALL SUBOPT_0x15
000284 d84f      	RCALL SUBOPT_0xF
         ;     509 	PORTC = 0x00;                  
         ;     510      	
         ;     511      	// Global enable interrupts
         ;     512 
         ;     513 	#asm("sei")
000285 9478      	sei
         ;     514 
         ;     515 	LEDbyte = 0;
000286 d873      	RCALL SUBOPT_0x16
         ;     516 	OldLEDbyte = 0;
000287 d876      	RCALL SUBOPT_0x17
         ;     517 	      
         ;     518 	
         ;     519 	ComSequence = 0;
000288 d879      	RCALL SUBOPT_0x18
         ;     520 	DriveEnable = 1;
000289 e0e1      	LDI  R30,LOW(1)
00028a 93e0 0184 	STS  _DriveEnable,R30
         ;     521 	
         ;     522 	CurrentLimitByte = 0;
00028c d879      	RCALL SUBOPT_0x19
         ;     523 	OvrTemp = 0;             
00028d 2499      	CLR  R9
         ;     524 	
         ;     525 	isecTmr = 0;
00028e d87b      	RCALL SUBOPT_0x1A
         ;     526 	isecTimer = 0;  
00028f 27ee      	CLR  R30
000290 93e0 0181 	STS  _isecTimer,R30
000292 93e0 0182 	STS  _isecTimer+1,R30
         ;     527 	isecTmrWatts = 0;
000294 d879      	RCALL SUBOPT_0x1B
         ;     528 		
         ;     529 	AutoUpdate = 1;
000295 e0e1      	LDI  R30,LOW(1)
000296 93e0 0158 	STS  _AutoUpdate,R30
         ;     530 	iMaxEconoSpeed = 1025; 
000298 e0e1      	LDI  R30,LOW(1025)
000299 e0f4      	LDI  R31,HIGH(1025)
00029a 93e0 0159 	STS  _iMaxEconoSpeed,R30
00029c 93f0 015a 	STS  _iMaxEconoSpeed+1,R31
         ;     531      	BatteryPowerLow = 0;
00029e 2444      	CLR  R4
         ;     532 	
         ;     533 	//PORTD = 0x00;
         ;     534 
         ;     535 	MaxWattSeconds = __MAX_WATT_SECONDS; //1400000;
00029f   +  	__GETD1N 0x155CC0
00029f ece0      	LDI  R30,LOW(0x155cc0)
0002a0 e5fc      	LDI  R31,HIGH(0x155cc0)
0002a1 e165      	LDI  R22,BYTE3(0x155cc0)
0002a2 e070      	LDI  R23,BYTE4(0x155cc0)
          	.ENDM
0002a3 93e0 0144 	STS  _MaxWattSeconds,R30
0002a5 93f0 0145 	STS  _MaxWattSeconds+1,R31
0002a7 9360 0146 	STS  _MaxWattSeconds+2,R22
0002a9 9370 0147 	STS  _MaxWattSeconds+3,R23
         ;     536 	
         ;     537 	sprintf( ComStr, _SOFTWARE_VERSION );
0002ab d866      	RCALL SUBOPT_0x1C
0002ac   +  	__POINTW1FN _157,0
0002ac e6ee      	LDI  R30,LOW(2*_157+0x0)
0002ad e0f0      	LDI  R31,HIGH(2*_157+0x0)
          	.ENDM
0002ae 93fa      	ST   -Y,R31
0002af 93ea      	ST   -Y,R30
0002b0 e080      	LDI  R24,0
0002b1 d865      	RCALL SUBOPT_0x1D
         ;     538 	ComSend( ComStr );
0002b2 deb1      	RCALL _ComSend
         ;     539 	
         ;     540 	// Turn off all lights...
         ;     541 	for( itmp = 0; itmp <= 5; itmp++ )
0002b3 27ee      	CLR  R30
0002b4 93e0 0195 	STS  _itmp,R30
0002b6 93e0 0196 	STS  _itmp+1,R30
          _0xA2:
0002b8 91a0 0195 	LDS  R26,_itmp
0002ba 91b0 0196 	LDS  R27,_itmp+1
0002bc e0e5      	LDI  R30,LOW(5)
0002bd e0f0      	LDI  R31,HIGH(5)
0002be 17ea      	CP   R30,R26
0002bf 07fb      	CPC  R31,R27
0002c0 f40c      	BRGE PC+2
0002c1 c042      	RJMP _0xA3
         ;     542 	{
         ;     543 		WriteDataToConsoleLEDS( SOC_LEDS[ itmp ] );
0002c2 91e0 0195 	LDS  R30,_itmp
0002c4 91f0 0196 	LDS  R31,_itmp+1
0002c6 d853      	RCALL SUBOPT_0x1E
0002c7 93ea      	ST   -Y,R30
0002c8 d77e      	RCALL SUBOPT_0x2
         ;     544 		itrDelay = 0;
         ;     545 		while( itrDelay < TIEMR_LED_SCAN ) 
          _0xA4:
0002c9 91a0 017c 	LDS  R26,_itrDelay
0002cb 91b0 017d 	LDS  R27,_itrDelay+1
0002cd 9180 017e 	LDS  R24,_itrDelay+2
0002cf 9190 017f 	LDS  R25,_itrDelay+3
0002d1   +  	__CPD2N 0xBB8
0002d1 3ba8      	CPI  R26,LOW(0xbb8)
0002d2 e0eb      	LDI  R30,HIGH(0xbb8)
0002d3 07be      	CPC  R27,R30
0002d4 e0e0      	LDI  R30,BYTE3(0xbb8)
0002d5 078e      	CPC  R24,R30
0002d6 e0e0      	LDI  R30,BYTE4(0xbb8)
0002d7 079e      	CPC  R25,R30
          	.ENDM
0002d8 f384      	BRLT _0xA4
         ;     546 		{
         ;     547 		} 
         ;     548 	 	
         ;     549 		//Read Phase Current
         ;     550 		AdcTempVal = read_adc( 1 );  
0002d9 d76a      	RCALL SUBOPT_0x1
0002da d843      	RCALL SUBOPT_0x1F
         ;     551 		iPhaseZero = AdcTempVal;
0002db   +  	__PUTWMRN _iPhaseZero,0,13,14
0002db 92d0 015b 	STS  _iphasezero+0x0,R0xd
0002dd 92e0 015c 	STS  _iphasezero+0x0+1,R0xe
          	.ENDM
         ;     552 		AdcTempVal = read_adc( 1 );  
0002df d764      	RCALL SUBOPT_0x1
0002e0 d83d      	RCALL SUBOPT_0x1F
         ;     553 	         
         ;     554 		iPhaseZero = iPhaseZero + AdcTempVal;
0002e1   +  	__GETW1R 13,14
0002e1 2ded      	MOV  R30,R0xd
0002e2 2dfe      	MOV  R31,R0xe
          	.ENDM
0002e3 91a0 015b 	LDS  R26,_iPhaseZero
0002e5 91b0 015c 	LDS  R27,_iPhaseZero+1
0002e7 0fea      	ADD  R30,R26
0002e8 1ffb      	ADC  R31,R27
0002e9 93e0 015b 	STS  _iPhaseZero,R30
0002eb 93f0 015c 	STS  _iPhaseZero+1,R31
         ;     555 		iPhaseZero = iPhaseZero / 2; 
0002ed 95f5      	ASR  R31
0002ee 95e7      	ROR  R30
0002ef 93e0 015b 	STS  _iPhaseZero,R30
0002f1 93f0 015c 	STS  _iPhaseZero+1,R31
         ;     556 		iPhaseZeroPoints[ itmp ] = iPhaseZero;
0002f3 91e0 0195 	LDS  R30,_itmp
0002f5 91f0 0196 	LDS  R31,_itmp+1
0002f7 e5af      	LDI  R26,LOW(_iPhaseZeroPoints)
0002f8 e0b1      	LDI  R27,HIGH(_iPhaseZeroPoints)
0002f9 0fee      	LSL  R30
0002fa 1fff      	ROL  R31
0002fb 0fae      	ADD  R26,R30
0002fc 1fbf      	ADC  R27,R31
0002fd 91e0 015b 	LDS  R30,_iPhaseZero
0002ff 91f0 015c 	LDS  R31,_iPhaseZero+1
000301 da46      	RCALL __PUTWP1
         ;     557 	}
000302 d7e5      	RCALL SUBOPT_0x13
000303 cfb4      	RJMP _0xA2
          _0xA3:
         ;     558 	
         ;     559        
         ;     560 	// Turn on all lights...
         ;     561 	WriteDataToConsoleLEDS( 0x00 );
000304 d75d      	RCALL SUBOPT_0x4
000305 d52f      	RCALL _WriteDataToConsoleLEDS
         ;     562 
         ;     563 	//////////////////////////////////////////////////////////////
         ;     564 	// Startup Flash lights... and Check the Battery Voltage...
         ;     565 
         ;     566 	// Read Battery Voltage      
         ;     567 	BatteryVoltage = ReadBatteryVoltage();	      	
000306 ddc0      	RCALL _ReadBatteryVoltage
000307 93e0 0152 	STS  _BatteryVoltage,R30
000309 93f0 0153 	STS  _BatteryVoltage+1,R31
         ;     568 
         ;     569 	itrDelay = 0;
00030b 27ee      	CLR  R30
00030c 93e0 017c 	STS  _itrDelay,R30
00030e 93e0 017d 	STS  _itrDelay+1,R30
000310 93e0 017e 	STS  _itrDelay+2,R30
000312 93e0 017f 	STS  _itrDelay+3,R30
         ;     570 	while( itrDelay < TIMER_HALF_SECOND ) 
          _0xA7:
000314 91a0 017c 	LDS  R26,_itrDelay
000316 91b0 017d 	LDS  R27,_itrDelay+1
000318 9180 017e 	LDS  R24,_itrDelay+2
00031a 9190 017f 	LDS  R25,_itrDelay+3
00031c   +  	__CPD2N 0x3980
00031c 38a0      	CPI  R26,LOW(0x3980)
00031d e3e9      	LDI  R30,HIGH(0x3980)
00031e 07be      	CPC  R27,R30
00031f e0e0      	LDI  R30,BYTE3(0x3980)
000320 078e      	CPC  R24,R30
000321 e0e0      	LDI  R30,BYTE4(0x3980)
000322 079e      	CPC  R25,R30
          	.ENDM
000323 f384      	BRLT _0xA7
         ;     571 	{
         ;     572 		
         ;     573 	}       
         ;     574 	// Read Battery Voltage      
         ;     575 	BatteryVoltage = BatteryVoltage + ReadBatteryVoltage();
000324 dda2      	RCALL _ReadBatteryVoltage
000325 91a0 0152 	LDS  R26,_BatteryVoltage
000327 91b0 0153 	LDS  R27,_BatteryVoltage+1
000329 0fea      	ADD  R30,R26
00032a 1ffb      	ADC  R31,R27
00032b 93e0 0152 	STS  _BatteryVoltage,R30
00032d 93f0 0153 	STS  _BatteryVoltage+1,R31
         ;     576 	BatteryVoltage = BatteryVoltage / 2;
00032f 95f6      	LSR  R31
000330 95e7      	ROR  R30
000331 93e0 0152 	STS  _BatteryVoltage,R30
000333 93f0 0153 	STS  _BatteryVoltage+1,R31
         ;     577 	                                
         ;     578 	
         ;     579 	//check low voltage on startup...
         ;     580 	// if voltage is too low, disable the bike...
         ;     581 	if( BatteryVoltage < __MIN_STARTUP_VOLTAGE )
000335 91a0 0152 	LDS  R26,_BatteryVoltage
000337 91b0 0153 	LDS  R27,_BatteryVoltage+1
000339 3ea4      	CPI  R26,LOW(0xCE4)
00033a e0ec      	LDI  R30,HIGH(0xCE4)
00033b 07be      	CPC  R27,R30
00033c f448      	BRSH _0xAA
         ;     582 	{
         ;     583 		// if battery is weak, shut it off ...                  
         ;     584 		sprintf( ComStr, "Low Voltage\r\n" );
00033d d7d4      	RCALL SUBOPT_0x1C
00033e   +  	__POINTW1FN _157,15
00033e e7ed      	LDI  R30,LOW(2*_157+0xf)
00033f e0f0      	LDI  R31,HIGH(2*_157+0xf)
          	.ENDM
000340 93fa      	ST   -Y,R31
000341 93ea      	ST   -Y,R30
000342 e080      	LDI  R24,0
000343 d7d3      	RCALL SUBOPT_0x1D
         ;     585 		ComSend( ComStr );
000344 de1f      	RCALL _ComSend
         ;     586 		
         ;     587      		ShutdownSystem();
000345 dd6c      	RCALL _ShutdownSystem
         ;     588      	}                           
         ;     589 
         ;     590 //	sprintf( ComStr, "BV,%d,", BatteryVoltage );
         ;     591   //	ComSend( ComStr );
         ;     592  	
         ;     593  	
         ;     594 	// do New cruise control init here...
         ;     595 	CruiseMode = 0;  // deefault is performance mode...
          _0xAA:
000346 24aa      	CLR  R10
         ;     596 	if(( PINB & 0x08 ) != 0 ) // j5 is shorted economy mode
000347 99b3      	SBIC 0x16,3
         ;     597 	{
         ;     598 	 	CruiseMode = 1;
000348 d7d9      	RCALL SUBOPT_0x20
         ;     599 	}
         ;     600 	
         ;     601 	ReadWattSecondsFromEEPROM();          
000349 ddc3      	RCALL _ReadWattSecondsFromEEPROM
         ;     602 	CurrentWattSeconds = SavedWattSeconds;	
00034a 91e0 0178 	LDS  R30,_SavedWattSeconds
00034c 91f0 0179 	LDS  R31,_SavedWattSeconds+1
00034e 9160 017a 	LDS  R22,_SavedWattSeconds+2
000350 9170 017b 	LDS  R23,_SavedWattSeconds+3
000352 93e0 0174 	STS  _CurrentWattSeconds,R30
000354 93f0 0175 	STS  _CurrentWattSeconds+1,R31
000356 9360 0176 	STS  _CurrentWattSeconds+2,R22
000358 9370 0177 	STS  _CurrentWattSeconds+3,R23
         ;     603 	// Reset watt / second counting... 
         ;     604 	// calculate the state of charge on the battery...
         ;     605 	if(( PINB & 0x10 ) == 0 ) // j6 is shorted = SLA mode
00035a 99b4      	SBIC 0x16,4
00035b c00e      	RJMP _0xAC
         ;     606 	{       
         ;     607         	if(( BatteryVoltage > __NEW_SLA_VOLTAGE )&&( SavedWattSeconds < __USED_WATT_SECONDS ))  // consider this battery new...
00035c 91a0 0152 	LDS  R26,_BatteryVoltage
00035e 91b0 0153 	LDS  R27,_BatteryVoltage+1
000360 eeec      	LDI  R30,LOW(3820)
000361 e0fe      	LDI  R31,HIGH(3820)
000362 17ea      	CP   R30,R26
000363 07fb      	CPC  R31,R27
000364 f410      	BRSH _0xAE
000365 d7bf      	RCALL SUBOPT_0x21
000366 f00c      	BRLT _0xAF
          _0xAE:
000367 c001      	RJMP _0xAD
          _0xAF:
         ;     608 		{      
         ;     609 			//Reset the Watt / Second counter here...
         ;     610 	 		CurrentWattSeconds = MaxWattSeconds;
000368 d7cc      	RCALL SUBOPT_0x22
         ;     611 		}
         ;     612 	}
          _0xAD:
         ;     613 	else
000369 c00d      	RJMP _0xB0
          _0xAC:
         ;     614 	{
         ;     615         	if(( BatteryVoltage > __NEW_NIMH_VOLTAGE )&&( SavedWattSeconds < __USED_WATT_SECONDS ))  // consider this battery new...
00036a 91a0 0152 	LDS  R26,_BatteryVoltage
00036c 91b0 0153 	LDS  R27,_BatteryVoltage+1
00036e e5e0      	LDI  R30,LOW(3920)
00036f e0ff      	LDI  R31,HIGH(3920)
000370 17ea      	CP   R30,R26
000371 07fb      	CPC  R31,R27
000372 f410      	BRSH _0xB2
000373 d7b1      	RCALL SUBOPT_0x21
000374 f00c      	BRLT _0xB3
          _0xB2:
000375 c001      	RJMP _0xB1
          _0xB3:
         ;     616 		{
         ;     617 		 	//Reset the Watt / Second counter here...
         ;     618 		 	CurrentWattSeconds = MaxWattSeconds;		 	
000376 d7be      	RCALL SUBOPT_0x22
         ;     619 		}	
         ;     620 	}	
          _0xB1:
          _0xB0:
         ;     621 	
         ;     622 	LowBatteryVoltage = __LOW_BATTERY_VOLTAGE;		
000377 efe0      	LDI  R30,LOW(2800)
000378 e0fa      	LDI  R31,HIGH(2800)
000379 93e0 0156 	STS  _LowBatteryVoltage,R30
00037b 93f0 0157 	STS  _LowBatteryVoltage+1,R31
         ;     623 
         ;     624 
         ;     625 	// SHOW THE CURRENT STATE OF CHARGE ON THE DISPLAY
         ;     626 	LEDStatus = CalcStateOfChargeForConsole();
00037d d7c8      	RCALL SUBOPT_0x23
         ;     627 	
         ;     628 
         ;     629 	calcLEDbyte = SOC_LEDS[ LEDStatus ]; 
00037e 93e0 0171 	STS  _calcLEDbyte,R30
         ;     630 	LEDbyte = calcLEDbyte;
000380 d7ca      	RCALL SUBOPT_0x24
         ;     631 	OldLEDbyte = LEDbyte;
000381 d7ce      	RCALL SUBOPT_0x25
         ;     632 		
         ;     633 	WriteDataToConsoleLEDS( LEDbyte );
000382 d7d2      	RCALL SUBOPT_0x26
         ;     634 	
         ;     635 	// start of main loop
         ;     636 	while( 1 )
          _0xB4:
         ;     637       	{         
         ;     638                 // timer routine for "real time" clock, calculated second...
         ;     639 		isecTmr++;
000383 91e0 0180 	LDS  R30,_isecTmr
000385 5fef      	SUBI R30,-LOW(1)
000386 93e0 0180 	STS  _isecTmr,R30
         ;     640 		if( isecTmr > _CALC_SECOND )
000388 91a0 0180 	LDS  R26,_isecTmr
00038a d7ce      	RCALL SUBOPT_0x27
00038b f478      	BRSH _0xB7
         ;     641  		{
         ;     642 			isecTimer++;
00038c 91e0 0181 	LDS  R30,_isecTimer
00038e 91f0 0182 	LDS  R31,_isecTimer+1
000390 9631      	ADIW R30,1
000391 93e0 0181 	STS  _isecTimer,R30
000393 93f0 0182 	STS  _isecTimer+1,R31
         ;     643 			isecTmrWatts++;
000395 91e0 0183 	LDS  R30,_isecTmrWatts
000397 5fef      	SUBI R30,-LOW(1)
000398 93e0 0183 	STS  _isecTmrWatts,R30
         ;     644 				
         ;     645    			isecTmr = 0;
00039a d76f      	RCALL SUBOPT_0x1A
         ;     646      		}                   		
         ;     647 		
         ;     648       		CurrentLimitByte = 0;  // clear out the current limit control
          _0xB7:
00039b d76a      	RCALL SUBOPT_0x19
         ;     649       		if(( PINB & 0x08 ) != 0 ) // j5 is shorted economy mode
00039c 9bb3      	SBIS 0x16,3
00039d c004      	RJMP _0xB8
         ;     650 		{                
         ;     651 		 	CurrentLimitByte = 0x80;
00039e e8e0      	LDI  R30,LOW(128)
00039f 93e0 018b 	STS  _CurrentLimitByte,R30
         ;     652 		 	PhaseErr = 0;
0003a1 2488      	CLR  R8
         ;     653 		}
         ;     654 
         ;     655       		// Read The Throttle Demand 
         ;     656 	      	AdcPWMVal = read_adc( 7 );
          _0xB8:
0003a2 e0e7      	LDI  R30,LOW(7)
0003a3 93ea      	ST   -Y,R30
0003a4 de72      	RCALL _read_adc
0003a5   +  	__PUTW1R 11,12
0003a5 2ebe      	MOV  R0xb,R30
0003a6 2ecf      	MOV  R0xc,R31
          	.ENDM
         ;     657       		if( AdcPWMVal > 700 )
0003a7 ebec      	LDI  R30,LOW(700)
0003a8 e0f2      	LDI  R31,HIGH(700)
0003a9 15eb      	CP   R30,R11
0003aa 05fc      	CPC  R31,R12
0003ab f414      	BRGE _0xB9
         ;     658 	      	{
         ;     659       			AdcPWMVal = 0;
0003ac 24bb      	CLR  R11
0003ad 24cc      	CLR  R12
         ;     660 	      	}                           
         ;     661 	      	if( AdcPWMVal > 511 )
          _0xB9:
0003ae efef      	LDI  R30,LOW(511)
0003af e0f1      	LDI  R31,HIGH(511)
0003b0 15eb      	CP   R30,R11
0003b1 05fc      	CPC  R31,R12
0003b2 f414      	BRGE _0xBA
         ;     662 	      	{
         ;     663 	      	 	AdcPWMVal = 511;
0003b3   +  	__PUTW1R 11,12
0003b3 2ebe      	MOV  R0xb,R30
0003b4 2ecf      	MOV  R0xc,R31
          	.ENDM
         ;     664 	      	}
         ;     665       		ftmp = AdcPWMVal;
          _0xBA:
0003b5   +  	__GETW1R 11,12
0003b5 2deb      	MOV  R30,R0xb
0003b6 2dfc      	MOV  R31,R0xc
          	.ENDM
0003b7 d7a4      	RCALL SUBOPT_0x28
         ;     666 	      	vtmp = (float)(512 - ftmp);
0003b8   +  	__GETD1N 0x44000000
0003b8 e0e0      	LDI  R30,LOW(0x44000000)
0003b9 e0f0      	LDI  R31,HIGH(0x44000000)
0003ba e060      	LDI  R22,BYTE3(0x44000000)
0003bb e474      	LDI  R23,BYTE4(0x44000000)
          	.ENDM
0003bc d7b2      	RCALL SUBOPT_0x29
         ;     667       		vtmp = 1 / vtmp;
0003bd d7c0      	RCALL SUBOPT_0x2A
         ;     668 	      	ftmp = sqrt( vtmp );
0003be d993      	RCALL __PUTPARD1
0003bf d8e1      	RCALL _sqrt
0003c0 d7c6      	RCALL SUBOPT_0x2B
         ;     669       		ftmp = (ftmp * 360) - 16;
0003c1   +  	__GETD1N 0x43B40000
0003c1 e0e0      	LDI  R30,LOW(0x43b40000)
0003c2 e0f0      	LDI  R31,HIGH(0x43b40000)
0003c3 eb64      	LDI  R22,BYTE3(0x43b40000)
0003c4 e473      	LDI  R23,BYTE4(0x43b40000)
          	.ENDM
0003c5 d7d2      	RCALL SUBOPT_0x2C
0003c6   +  	__GETD1N 0x41800000
0003c6 e0e0      	LDI  R30,LOW(0x41800000)
0003c7 e0f0      	LDI  R31,HIGH(0x41800000)
0003c8 e860      	LDI  R22,BYTE3(0x41800000)
0003c9 e471      	LDI  R23,BYTE4(0x41800000)
          	.ENDM
0003ca d7d0      	RCALL SUBOPT_0x2D
0003cb d7bb      	RCALL SUBOPT_0x2B
         ;     670 		if( ftmp < 0 )
0003cc db56      	RCALL __CPD20
0003cd f464      	BRGE _0xBB
         ;     671 		{
         ;     672 			ftmp = 0;
0003ce   +  	__GETD1N 0x0
0003ce e0e0      	LDI  R30,LOW(0x0)
0003cf e0f0      	LDI  R31,HIGH(0x0)
0003d0 e060      	LDI  R22,BYTE3(0x0)
0003d1 e070      	LDI  R23,BYTE4(0x0)
          	.ENDM
0003d2 93e0 0191 	STS  _ftmp,R30
0003d4 93f0 0192 	STS  _ftmp+1,R31
0003d6 9360 0193 	STS  _ftmp+2,R22
0003d8 9370 0194 	STS  _ftmp+3,R23
         ;     673 		}      	
         ;     674       	
         ;     675 		itmp = (int)ftmp;     	
          _0xBB:
0003da d7c3      	RCALL SUBOPT_0x2E
0003db d7cc      	RCALL SUBOPT_0x2F
         ;     676       	
         ;     677 	      	//itmp = AdcPWMVal>>2;
         ;     678       		if( itmp > 63  ) //;;__PWM_RES_TOTAL )
0003dc e3ef      	LDI  R30,LOW(63)
0003dd e0f0      	LDI  R31,HIGH(63)
0003de 17ea      	CP   R30,R26
0003df 07fb      	CPC  R31,R27
0003e0 f424      	BRGE _0xBC
         ;     679       			itmp = 63; //__PWM_RES_TOTAL;
0003e1 93e0 0195 	STS  _itmp,R30
0003e3 93f0 0196 	STS  _itmp+1,R31
         ;     680 	        
         ;     681 	        //	oldPWMVal = tmpPWMVal;	
         ;     682       		tmpPWMVal = ( unsigned char )itmp & 0x3f;
          _0xBC:
0003e5 91e0 0195 	LDS  R30,_itmp
0003e7 73ef      	ANDI R30,LOW(0x3F)
0003e8 93e0 0198 	STS  _tmpPWMVal,R30
         ;     683       	 
         ;     684 	 	// do the Speed calculations here.
         ;     685 		vtmp = iMotorSpeed;
0003ea 91e0 0187 	LDS  R30,_iMotorSpeed
0003ec 91f0 0188 	LDS  R31,_iMotorSpeed+1
0003ee 2766      	CLR  R22
0003ef 2777      	CLR  R23
0003f0 da0f      	RCALL __CDF1
0003f1 d78c      	RCALL SUBOPT_0x2A
         ;     686 		ftmp = TIMER_FREQ / vtmp;
0003f2   +  	__GETD2N 0x46E60000
0003f2 e0a0      	LDI  R26,LOW(0x46e60000)
0003f3 e0b0      	LDI  R27,HIGH(0x46e60000)
0003f4 ee86      	LDI  R24,BYTE3(0x46e60000)
0003f5 e496      	LDI  R25,BYTE4(0x46e60000)
          	.ENDM
0003f6 dac7      	RCALL __DIVF21
0003f7 d78f      	RCALL SUBOPT_0x2B
         ;     687 		ftmp = ftmp * 15; // 4 halls / rev 60 revs / sec = RPM
0003f8   +  	__GETD1N 0x41700000
0003f8 e0e0      	LDI  R30,LOW(0x41700000)
0003f9 e0f0      	LDI  R31,HIGH(0x41700000)
0003fa e760      	LDI  R22,BYTE3(0x41700000)
0003fb e471      	LDI  R23,BYTE4(0x41700000)
          	.ENDM
0003fc d7b4      	RCALL SUBOPT_0x30
         ;     688 		iMotorRPM = (int)ftmp;  
0003fd d7a0      	RCALL SUBOPT_0x2E
0003fe 93e0 0189 	STS  _iMotorRPM,R30
000400 93f0 018a 	STS  _iMotorRPM+1,R31
         ;     689 
         ;     690 		if( iMotorRPM < 30 )
000402 91a0 0189 	LDS  R26,_iMotorRPM
000404 91b0 018a 	LDS  R27,_iMotorRPM+1
000406 31ae      	CPI  R26,LOW(0x1E)
000407 e0e0      	LDI  R30,HIGH(0x1E)
000408 07be      	CPC  R27,R30
000409 f42c      	BRGE _0xBD
         ;     691 		{
         ;     692 			iMotorRPM = 0;
00040a 27ee      	CLR  R30
00040b 93e0 0189 	STS  _iMotorRPM,R30
00040d 93e0 018a 	STS  _iMotorRPM+1,R30
         ;     693 		}  
         ;     694 	
         ;     695 	
         ;     696 		//if(( tmpPWMVal > 6 )&&( iMotorRPM < 75 ))  // 
         ;     697 		if( iMotorRPM < 75 )
          _0xBD:
00040f 91a0 0189 	LDS  R26,_iMotorRPM
000411 91b0 018a 	LDS  R27,_iMotorRPM+1
000413 34ab      	CPI  R26,LOW(0x4B)
000414 e0e0      	LDI  R30,HIGH(0x4B)
000415 07be      	CPC  R27,R30
000416 f40c      	BRGE _0xBE
         ;     698 		{                     
         ;     699 			CurrentLimitByte = 0xc0; //CurrentLimitByte | 0x40;  // set at lowest limit...
000417 d7a3      	RCALL SUBOPT_0x31
         ;     700 		}                         
         ;     701       	
         ;     702 	      	// Read Battery Voltage      
         ;     703  	      	AvgBatteryVoltage = AvgBatteryVoltage + ReadBatteryVoltage();
          _0xBE:
000418 dcae      	RCALL _ReadBatteryVoltage
000419 91a0 0154 	LDS  R26,_AvgBatteryVoltage
00041b 91b0 0155 	LDS  R27,_AvgBatteryVoltage+1
00041d 0fea      	ADD  R30,R26
00041e 1ffb      	ADC  R31,R27
00041f 93e0 0154 	STS  _AvgBatteryVoltage,R30
000421 93f0 0155 	STS  _AvgBatteryVoltage+1,R31
         ;     704 	      	
         ;     705 	      	if(( ComSequence == 0 )||( ComSequence == 4 ))
000423 91a0 018c 	LDS  R26,_ComSequence
000425 30a0      	CPI  R26,LOW(0x0)
000426 f011      	BREQ _0xC0
000427 d797      	RCALL SUBOPT_0x32
000428 f479      	BRNE _0xBF
          _0xC0:
         ;     706 	      	{
         ;     707 	      	 	BatteryVoltage = ( AvgBatteryVoltage / 4 ) + 25;	      	
000429 91e0 0154 	LDS  R30,_AvgBatteryVoltage
00042b 91f0 0155 	LDS  R31,_AvgBatteryVoltage+1
00042d d8da      	RCALL __LSRW2
00042e 9679      	ADIW R30,25
00042f 93e0 0152 	STS  _BatteryVoltage,R30
000431 93f0 0153 	STS  _BatteryVoltage+1,R31
         ;     708 	      	 	AvgBatteryVoltage = 0;
000433 27ee      	CLR  R30
000434 93e0 0154 	STS  _AvgBatteryVoltage,R30
000436 93e0 0155 	STS  _AvgBatteryVoltage+1,R30
         ;     709 		}
         ;     710 		
         ;     711 		// if batter is too low start timer to shut it off...
         ;     712 	      	if( BatteryVoltage < LowBatteryVoltage )
          _0xBF:
000438 91e0 0156 	LDS  R30,_LowBatteryVoltage
00043a 91f0 0157 	LDS  R31,_LowBatteryVoltage+1
00043c d786      	RCALL SUBOPT_0x33
00043d f430      	BRSH _0xC2
         ;     713       		{
         ;     714       	 		DriveEnable++;
00043e 91e0 0184 	LDS  R30,_DriveEnable
000440 5fef      	SUBI R30,-LOW(1)
000441 93e0 0184 	STS  _DriveEnable,R30
         ;     715 	      	}
         ;     716       		else
000443 c005      	RJMP _0xC3
          _0xC2:
         ;     717 	      	{      
         ;     718       			if( DriveEnable < _MAX_LOW_VOLTAGE_TIME )
000444 d785      	RCALL SUBOPT_0x34
000445 f418      	BRSH _0xC4
         ;     719 			{
         ;     720 	    	 		DriveEnable = 0;
000446 27ee      	CLR  R30
000447 93e0 0184 	STS  _DriveEnable,R30
         ;     721 		 	}
         ;     722       		}	
          _0xC4:
          _0xC3:
         ;     723       	
         ;     724 	      	//Read Phase Current
         ;     725       		AdcTempVal = read_adc( 1 );     		
000449 d5fa      	RCALL SUBOPT_0x1
00044a d6d3      	RCALL SUBOPT_0x1F
         ;     726 	      	iPhaseCurrent = AdcTempVal - iPhaseZeroPoints[ LEDStatus ];
00044b 91e0 0172 	LDS  R30,_LEDStatus
00044d e5af      	LDI  R26,LOW(_iPhaseZeroPoints)
00044e e0b1      	LDI  R27,HIGH(_iPhaseZeroPoints)
00044f 27ff      	CLR  R31
000450 0fee      	LSL  R30
000451 1fff      	ROL  R31
000452 d77b      	RCALL SUBOPT_0x35
000453 2fae      	MOV  R26,R30
000454 2fbf      	MOV  R27,R31
000455   +  	__GETW1R 13,14
000455 2ded      	MOV  R30,R0xd
000456 2dfe      	MOV  R31,R0xe
          	.ENDM
000457 1bea      	SUB  R30,R26
000458 0bfb      	SBC  R31,R27
000459 93e0 015d 	STS  _iPhaseCurrent,R30
00045b 93f0 015e 	STS  _iPhaseCurrent+1,R31
         ;     727 		if( iPhaseCurrent < 0 )
00045d 91a0 015d 	LDS  R26,_iPhaseCurrent
00045f 91b0 015e 	LDS  R27,_iPhaseCurrent+1
000461 9710      	SBIW R26,0
000462 f42c      	BRGE _0xC5
         ;     728 		{
         ;     729 			iPhaseCurrent = 0;
000463 27ee      	CLR  R30
000464 93e0 015d 	STS  _iPhaseCurrent,R30
000466 93e0 015e 	STS  _iPhaseCurrent+1,R30
         ;     730 		}
         ;     731 		
         ;     732 	      	ftmp = iPhaseCurrent;
          _0xC5:
000468 91e0 015d 	LDS  R30,_iPhaseCurrent
00046a 91f0 015e 	LDS  R31,_iPhaseCurrent+1
00046c d6ef      	RCALL SUBOPT_0x28
         ;     733 	      	//PhaseCurrent = iPhaseCurrent;
         ;     734 	      	
         ;     735                 if( ftmp > 36 )
00046d   +  	__GETD1N 0x42100000
00046d e0e0      	LDI  R30,LOW(0x42100000)
00046e e0f0      	LDI  R31,HIGH(0x42100000)
00046f e160      	LDI  R22,BYTE3(0x42100000)
000470 e472      	LDI  R23,BYTE4(0x42100000)
          	.ENDM
000471 da8d      	RCALL __CMPF12
000472 f009      	BREQ PC+2
000473 f408      	BRCC PC+2
000474 c00d      	RJMP _0xC6
         ;     736                 {
         ;     737                  	ftmp = ftmp * 0.9333;
000475 91a0 0191 	LDS  R26,_ftmp
000477 91b0 0192 	LDS  R27,_ftmp+1
000479 9180 0193 	LDS  R24,_ftmp+2
00047b 9190 0194 	LDS  R25,_ftmp+3
00047d   +  	__GETD1N 0x3F6EECC0
00047d ece0      	LDI  R30,LOW(0x3f6eecc0)
00047e eefc      	LDI  R31,HIGH(0x3f6eecc0)
00047f e66e      	LDI  R22,BYTE3(0x3f6eecc0)
000480 e37f      	LDI  R23,BYTE4(0x3f6eecc0)
          	.ENDM
000481 d72f      	RCALL SUBOPT_0x30
         ;     738                 }
         ;     739                 BatteryCurrent = ftmp;
          _0xC6:
000482 d74f      	RCALL SUBOPT_0x36
000483 93e0 0151 	STS  _BatteryCurrent,R30
         ;     740 	      	if( BatteryCurrent > 52 )
000485 91a0 0151 	LDS  R26,_BatteryCurrent
000487 e3e4      	LDI  R30,LOW(52)
000488 17ea      	CP   R30,R26
000489 f410      	BRSH _0xC7
         ;     741 	      	{
         ;     742 	      		BatteryCurrent = 52;
00048a 93e0 0151 	STS  _BatteryCurrent,R30
         ;     743 	      	}	      	
         ;     744 	      	if( BatteryCurrent <= 1 )
          _0xC7:
00048c 91a0 0151 	LDS  R26,_BatteryCurrent
00048e e0e1      	LDI  R30,LOW(1)
00048f 17ea      	CP   R30,R26
000490 f018      	BRLO _0xC8
         ;     745 	      	{
         ;     746 	      		BatteryCurrent = 0;
000491 27ee      	CLR  R30
000492 93e0 0151 	STS  _BatteryCurrent,R30
         ;     747 	      	}
         ;     748      
         ;     749 
         ;     750 		// Caclulate heat sink temperature 
         ;     751 		AdcTempVal = read_adc( 2 ); 
          _0xC8:
000494 e0e2      	LDI  R30,LOW(2)
000495 93ea      	ST   -Y,R30
000496 d687      	RCALL SUBOPT_0x1F
         ;     752 		HeatSinkTemp = ConvertTempSensor( AdcTempVal );
000497 92ea      	ST   -Y,R14
000498 92da      	ST   -Y,R13
000499 d32e      	RCALL _ConvertTempSensor
00049a 93e0 0150 	STS  _HeatSinkTemp,R30
         ;     753     
         ;     754     		if(( HeatSinkTemp > 62 )||( OvrTemp == 1 ))
00049c 91a0 0150 	LDS  R26,_HeatSinkTemp
00049e e3ee      	LDI  R30,LOW(62)
00049f 17ea      	CP   R30,R26
0004a0 f010      	BRLO _0xCA
0004a1 d73a      	RCALL SUBOPT_0x37
0004a2 f481      	BRNE _0xC9
          _0xCA:
         ;     755 	    	{        
         ;     756                         OvrTemp = 1;
0004a3 e0e1      	LDI  R30,LOW(1)
0004a4 2e9e      	MOV  R9,R30
         ;     757 			CurrentLimitByte = 0xc0;
0004a5 d715      	RCALL SUBOPT_0x31
         ;     758 			if( tmpPWMVal > 27 )
0004a6 91a0 0198 	LDS  R26,_tmpPWMVal
0004a8 e1eb      	LDI  R30,LOW(27)
0004a9 17ea      	CP   R30,R26
0004aa f410      	BRSH _0xCC
         ;     759 			{
         ;     760 				tmpPWMVal = 27;
0004ab 93e0 0198 	STS  _tmpPWMVal,R30
         ;     761 //				CurrentLimitByte = 0xc0;  // set at lowest limit...
         ;     762 			}		
         ;     763     			// too hot... shut it off completely
         ;     764     			if( HeatSinkTemp > 75 )
          _0xCC:
0004ad 91a0 0150 	LDS  R26,_HeatSinkTemp
0004af e4eb      	LDI  R30,LOW(75)
0004b0 17ea      	CP   R30,R26
0004b1 f408      	BRSH _0xCD
         ;     765 	    		{
         ;     766     				tmpPWMVal = 0;
0004b2 d72c      	RCALL SUBOPT_0x38
         ;     767     			} 
         ;     768     		}
          _0xCD:
         ;     769     		if( HeatSinkTemp < 60 )
          _0xC9:
0004b3 91a0 0150 	LDS  R26,_HeatSinkTemp
0004b5 33ac      	CPI  R26,LOW(0x3C)
0004b6 f408      	BRSH _0xCE
         ;     770     		{
         ;     771  	 	 	OvrTemp = 0;
0004b7 2499      	CLR  R9
         ;     772     		}
         ;     773 
         ;     774                 
         ;     775     		
         ;     776     		// do Throttle Reprofileing here
         ;     777 		if(( iMotorRPM > 300 )&&( iMotorRPM < 650 )) //900 ))
          _0xCE:
0004b8 91a0 0189 	LDS  R26,_iMotorRPM
0004ba 91b0 018a 	LDS  R27,_iMotorRPM+1
0004bc e2ec      	LDI  R30,LOW(300)
0004bd e0f1      	LDI  R31,HIGH(300)
0004be 17ea      	CP   R30,R26
0004bf 07fb      	CPC  R31,R27
0004c0 f414      	BRGE _0xD0
0004c1 d721      	RCALL SUBOPT_0x39
0004c2 f00c      	BRLT _0xD1
          _0xD0:
0004c3 c013      	RJMP _0xCF
          _0xD1:
         ;     778 		{
         ;     779 		 	ftmp = iMotorRPM - 300;
0004c4 91e0 0189 	LDS  R30,_iMotorRPM
0004c6 91f0 018a 	LDS  R31,_iMotorRPM+1
0004c8 52ec      	SUBI R30,LOW(300)
0004c9 40f1      	SBCI R31,HIGH(300)
0004ca d691      	RCALL SUBOPT_0x28
         ;     780 		 	ftmp = ftmp / 15; // down to 37
0004cb   +  	__GETD1N 0x41700000
0004cb e0e0      	LDI  R30,LOW(0x41700000)
0004cc e0f0      	LDI  R31,HIGH(0x41700000)
0004cd e760      	LDI  R22,BYTE3(0x41700000)
0004ce e471      	LDI  R23,BYTE4(0x41700000)
          	.ENDM
0004cf d71b      	RCALL SUBOPT_0x3A
         ;     781 		 	tmpChar = 63 - (char)ftmp;
0004d0 e3af      	LDI  R26,LOW(63)
0004d1 1bae      	SUB  R26,R30
0004d2 93a0 0197 	STS  _tmpChar,R26
         ;     782  			if( tmpChar < tmpPWMVal )
0004d4 d720      	RCALL SUBOPT_0x3B
0004d5 f408      	BRSH _0xD2
         ;     783  			{
         ;     784  			 	tmpPWMVal = tmpChar;
0004d6 d724      	RCALL SUBOPT_0x3C
         ;     785  			}	 	
         ;     786 		}        
          _0xD2:
         ;     787 		if(( iMotorRPM >= 650 )&&( iMotorRPM < 1700 )) //if(( iMotorRPM >= 900 )&&( iMotorRPM < 1400 ))
          _0xCF:
0004d7 d70b      	RCALL SUBOPT_0x39
0004d8 f044      	BRLT _0xD4
0004d9 91a0 0189 	LDS  R26,_iMotorRPM
0004db 91b0 018a 	LDS  R27,_iMotorRPM+1
0004dd 3aa4      	CPI  R26,LOW(0x6A4)
0004de e0e6      	LDI  R30,HIGH(0x6A4)
0004df 07be      	CPC  R27,R30
0004e0 f00c      	BRLT _0xD5
          _0xD4:
0004e1 c012      	RJMP _0xD3
          _0xD5:
         ;     788 		{
         ;     789 		 	ftmp = iMotorRPM - 650;  // 900
0004e2 91e0 0189 	LDS  R30,_iMotorRPM
0004e4 91f0 018a 	LDS  R31,_iMotorRPM+1
0004e6 58ea      	SUBI R30,LOW(650)
0004e7 40f2      	SBCI R31,HIGH(650)
0004e8 d673      	RCALL SUBOPT_0x28
         ;     790 		 	ftmp = ftmp / 44; //34;
0004e9   +  	__GETD1N 0x42300000
0004e9 e0e0      	LDI  R30,LOW(0x42300000)
0004ea e0f0      	LDI  R31,HIGH(0x42300000)
0004eb e360      	LDI  R22,BYTE3(0x42300000)
0004ec e472      	LDI  R23,BYTE4(0x42300000)
          	.ENDM
0004ed d6fd      	RCALL SUBOPT_0x3A
         ;     791 		 	tmpChar = 39 + (char)ftmp;
0004ee 5de9      	SUBI R30,-LOW(39)
0004ef 93e0 0197 	STS  _tmpChar,R30
         ;     792  			if( tmpChar < tmpPWMVal )
0004f1 d703      	RCALL SUBOPT_0x3B
0004f2 f408      	BRSH _0xD6
         ;     793  			{
         ;     794  			 	tmpPWMVal = tmpChar;
0004f3 d707      	RCALL SUBOPT_0x3C
         ;     795  			}	 	
         ;     796 		}
          _0xD6:
         ;     797 
         ;     798 	      	// Calculate Battery Temperature
         ;     799      	        /*
         ;     800   		AdcTempVal = read_adc( 6 ); 
         ;     801 		BatteryTemp = ConvertTempSensor( AdcTempVal ); 	
         ;     802       	        */
         ;     803       	                     
         ;     804       		if( AutoUpdate == 1 )
          _0xD3:
0004f4 91a0 0158 	LDS  R26,_AutoUpdate
0004f6 30a1      	CPI  R26,LOW(0x1)
0004f7 f409      	BRNE _0xD7
         ;     805 			OutputComData();	  
0004f8 d0f7      	RCALL _OutputComData
         ;     806 	  
         ;     807 		// perform delay for RS-232 output...
         ;     808 		itrDelay = 0;
          _0xD7:
0004f9 27ee      	CLR  R30
0004fa 93e0 017c 	STS  _itrDelay,R30
0004fc 93e0 017d 	STS  _itrDelay+1,R30
0004fe 93e0 017e 	STS  _itrDelay+2,R30
000500 93e0 017f 	STS  _itrDelay+3,R30
         ;     809 		while( itrDelay < COM_SEQ_FREQ ) // )
          _0xD8:
000502 91a0 017c 	LDS  R26,_itrDelay
000504 91b0 017d 	LDS  R27,_itrDelay+1
000506 9180 017e 	LDS  R24,_itrDelay+2
000508 9190 017f 	LDS  R25,_itrDelay+3
00050a   +  	__CPD2N 0x4FB
00050a 3fab      	CPI  R26,LOW(0x4fb)
00050b e0e4      	LDI  R30,HIGH(0x4fb)
00050c 07be      	CPC  R27,R30
00050d e0e0      	LDI  R30,BYTE3(0x4fb)
00050e 078e      	CPC  R24,R30
00050f e0e0      	LDI  R30,BYTE4(0x4fb)
000510 079e      	CPC  R25,R30
          	.ENDM
000511 f384      	BRLT _0xD8
         ;     810 		{
         ;     811 		}
         ;     812 		
         ;     813 		ComSequence++;
000512 91e0 018c 	LDS  R30,_ComSequence
000514 5fef      	SUBI R30,-LOW(1)
000515 93e0 018c 	STS  _ComSequence,R30
         ;     814 		if( ComSequence > 7 )
000517 91a0 018c 	LDS  R26,_ComSequence
000519 e0e7      	LDI  R30,LOW(7)
00051a 17ea      	CP   R30,R26
00051b f408      	BRSH _0xDB
         ;     815 		{
         ;     816 			ComSequence = 0;
00051c d5e5      	RCALL SUBOPT_0x18
         ;     817 		}	                                                
         ;     818 
         ;     819 		CalcCruiseControl();
          _0xDB:
00051d d152      	RCALL _CalcCruiseControl
         ;     820 
         ;     821 	 	// Check low voltage here... 
         ;     822  		if( DriveEnable >= _MAX_LOW_VOLTAGE_TIME )
00051e d6ab      	RCALL SUBOPT_0x34
00051f f028      	BRLO _0xDC
         ;     823 	 	{
         ;     824  		   	tmpPWMVal = 0; 
000520 d6be      	RCALL SUBOPT_0x38
         ;     825  		   	DriveEnable = _MAX_LOW_VOLTAGE_TIME;
000521 e5e0      	LDI  R30,LOW(80)
000522 93e0 0184 	STS  _DriveEnable,R30
         ;     826 			
         ;     827 			// shut the drive off
         ;     828 			ShutdownSystem();
000524 db8d      	RCALL _ShutdownSystem
         ;     829 	 	}      
         ;     830 
         ;     831 
         ;     832 		// set the throttle to the new value...		
         ;     833 		cPWMVal = tmpPWMVal;
          _0xDC:
000525 91e0 0198 	LDS  R30,_tmpPWMVal
000527 93e0 016b 	STS  _cPWMVal,R30
         ;     834 		
         ;     835 		
         ;     836 		// count up the watts used every second and subtract from the total 
         ;     837 		// to calculate the state of charge...
         ;     838 		iTimerSOC++;		
000529 91e0 0173 	LDS  R30,_iTimerSOC
00052b 5fef      	SUBI R30,-LOW(1)
00052c 93e0 0173 	STS  _iTimerSOC,R30
         ;     839 		if( iTimerSOC > 15 )
00052e 91a0 0173 	LDS  R26,_iTimerSOC
000530 d628      	RCALL SUBOPT_0x27
000531 f008      	BRLO PC+2
000532 c048      	RJMP _0xDD
         ;     840 		{         
         ;     841     			// Calculate the Watts / 0.5 seconds / power consumption...
         ;     842     			ftmp = BatteryVoltage / 100;
000533 91a0 0152 	LDS  R26,_BatteryVoltage
000535 91b0 0153 	LDS  R27,_BatteryVoltage+1
000537 e6e4      	LDI  R30,LOW(100)
000538 e0f0      	LDI  R31,HIGH(100)
000539 d7ef      	RCALL __DIVW21U
00053a 2766      	CLR  R22
00053b 2777      	CLR  R23
00053c d8c3      	RCALL __CDF1
00053d 93e0 0191 	STS  _ftmp,R30
00053f 93f0 0192 	STS  _ftmp+1,R31
000541 9360 0193 	STS  _ftmp+2,R22
000543 9370 0194 	STS  _ftmp+3,R23
         ;     843     			CurrentWattSeconds = CurrentWattSeconds - ((long)( BatteryCurrent ) * ftmp);
000545 d6ba      	RCALL SUBOPT_0x3D
000546 d7cd      	RCALL __MOVED12
000547 91e0 0191 	LDS  R30,_ftmp
000549 91f0 0192 	LDS  R31,_ftmp+1
00054b 9160 0193 	LDS  R22,_ftmp+2
00054d 9170 0194 	LDS  R23,_ftmp+3
00054f d809      	RCALL __CDF2
000550 d93b      	RCALL __MULF12
000551 91a0 0174 	LDS  R26,_CurrentWattSeconds
000553 91b0 0175 	LDS  R27,_CurrentWattSeconds+1
000555 9180 0176 	LDS  R24,_CurrentWattSeconds+2
000557 9190 0177 	LDS  R25,_CurrentWattSeconds+3
000559 d7ff      	RCALL __CDF2
00055a d640      	RCALL SUBOPT_0x2D
00055b d87e      	RCALL __CFD1
00055c 93e0 0174 	STS  _CurrentWattSeconds,R30
00055e 93f0 0175 	STS  _CurrentWattSeconds+1,R31
000560 9360 0176 	STS  _CurrentWattSeconds+2,R22
000562 9370 0177 	STS  _CurrentWattSeconds+3,R23
         ;     844                 	if( CurrentWattSeconds < 0 )
000564 91a0 0174 	LDS  R26,_CurrentWattSeconds
000566 91b0 0175 	LDS  R27,_CurrentWattSeconds+1
000568 9180 0176 	LDS  R24,_CurrentWattSeconds+2
00056a 9190 0177 	LDS  R25,_CurrentWattSeconds+3
00056c d9b6      	RCALL __CPD20
00056d f44c      	BRGE _0xDE
         ;     845 	                {
         ;     846         	        	CurrentWattSeconds = 0;
00056e 27ee      	CLR  R30
00056f 93e0 0174 	STS  _CurrentWattSeconds,R30
000571 93e0 0175 	STS  _CurrentWattSeconds+1,R30
000573 93e0 0176 	STS  _CurrentWattSeconds+2,R30
000575 93e0 0177 	STS  _CurrentWattSeconds+3,R30
         ;     847                 	} 
         ;     848     		
         ;     849 		
         ;     850 		 	iTimerSOC = 0;
          _0xDE:
000577 d569      	RCALL SUBOPT_0x11
         ;     851 		 	
         ;     852 			LEDStatus = CalcStateOfChargeForConsole();
000578 d5cd      	RCALL SUBOPT_0x23
         ;     853 
         ;     854 			calcLEDbyte = SOC_LEDS[ LEDStatus ];
000579 93e0 0171 	STS  _calcLEDbyte,R30
         ;     855 			
         ;     856 		}
         ;     857 	       	OldLEDbyte = LEDbyte;	
          _0xDD:
00057b d5d4      	RCALL SUBOPT_0x25
         ;     858                 LEDbyte = calcLEDbyte;
00057c d5ce      	RCALL SUBOPT_0x24
         ;     859 
         ;     860 		// make the lowest voltage blink here...
         ;     861 	     	if( calcLEDbyte == 0 )
00057d d688      	RCALL SUBOPT_0x3E
00057e f441      	BRNE _0xDF
         ;     862 	     	{       
         ;     863 		     	if( ComSequence < 2 )
00057f d68a      	RCALL SUBOPT_0x3F
000580 f410      	BRSH _0xE0
         ;     864 	     		{       
         ;     865 	     			LEDbyte = 0x01;
000581 e0e1      	LDI  R30,LOW(1)
000582 c001      	RJMP _0x1C5
         ;     866 	   		}
         ;     867 	     		else
          _0xE0:
         ;     868 	     		{
         ;     869 	     			LEDbyte = 0;
000583 27ee      	CLR  R30
          _0x1C5:
000584 93e0 016f 	STS  _LEDbyte,R30
         ;     870 	     		}
         ;     871        		}
         ;     872        		else if( OvrTemp == 1 )
000586 c00f      	RJMP _0xE2
          _0xDF:
000587 d654      	RCALL SUBOPT_0x37
000588 f469      	BRNE _0xE3
         ;     873 	     	{       
         ;     874 		     	if(( ComSequence & 0x03 ) == 1 )
000589 91e0 018c 	LDS  R30,_ComSequence
00058b 70e3      	ANDI R30,LOW(0x3)
00058c 30e1      	CPI  R30,LOW(0x1)
00058d f439      	BRNE _0xE4
         ;     875 	     		{       
         ;     876 	     			LEDbyte = calcLEDbyte;
00058e d5bc      	RCALL SUBOPT_0x24
         ;     877 	     			
         ;     878 				if( calcLEDbyte == 0 )
00058f d676      	RCALL SUBOPT_0x3E
000590 f419      	BRNE _0xE5
         ;     879 				{               
         ;     880 	     				LEDbyte = 0x01;
000591 e0e1      	LDI  R30,LOW(1)
000592 93e0 016f 	STS  _LEDbyte,R30
         ;     881 	   			}
         ;     882 	     		}
          _0xE5:
         ;     883 	     		else
000594 c001      	RJMP _0xE6
          _0xE4:
         ;     884 	     		{
         ;     885 	     			LEDbyte = 0;
000595 d564      	RCALL SUBOPT_0x16
         ;     886 	     		}
          _0xE6:
         ;     887        		}
         ;     888        		       		                
         ;     889 		if( isecTmrWatts > 10 )
          _0xE3:
          _0xE2:
000596 91a0 0183 	LDS  R26,_isecTmrWatts
000598 e0ea      	LDI  R30,LOW(10)
000599 17ea      	CP   R30,R26
00059a f418      	BRSH _0xE7
         ;     890 		{
         ;     891 		 	isecTmrWatts = 0;
00059b d572      	RCALL SUBOPT_0x1B
         ;     892 		 	OldLEDbyte = 0; // update the LEDS every 10 seconds
00059c d561      	RCALL SUBOPT_0x17
         ;     893 		 	SaveWattSecondsToEPPROM();		 	
00059d db2d      	RCALL _SaveWattSecondsToEPPROM
         ;     894 		}
         ;     895        		       		
         ;     896 		// do led routines here...
         ;     897 	      	if( LEDbyte != OldLEDbyte )
          _0xE7:
00059e 91e0 0170 	LDS  R30,_OldLEDbyte
0005a0 91a0 016f 	LDS  R26,_LEDbyte
0005a2 17ea      	CP   R30,R26
0005a3 f009      	BREQ _0xE8
         ;     898 	     	{
         ;     899      		        // voltage is really low.... blink the red light...
         ;     900 #ifndef _DEBUG_FREQ_OUTPUT
         ;     901        			WriteDataToConsoleLEDS( LEDbyte );
0005a4 d5b0      	RCALL SUBOPT_0x26
         ;     902 #endif
         ;     903 
         ;     904 	     	}   	
         ;     905 
         ;     906 		// Apply Current limit data here...                          
         ;     907 	     	tmpChar = PORTD;
          _0xE8:
0005a5 b3e2      	IN   R30,0x12
0005a6 d667      	RCALL SUBOPT_0x40
         ;     908 	     	tmpChar = tmpChar & 0x3f;
0005a7 73ef      	ANDI R30,LOW(0x3F)
0005a8 93e0 0197 	STS  _tmpChar,R30
         ;     909 	     	tmpChar = tmpChar | CurrentLimitByte;
0005aa 91e0 018b 	LDS  R30,_CurrentLimitByte
0005ac 91a0 0197 	LDS  R26,_tmpChar
0005ae 2bea      	OR   R30,R26
0005af d65e      	RCALL SUBOPT_0x40
         ;     910 		PORTD = tmpChar;
0005b0 bbe2      	OUT  0x12,R30
         ;     911 		
         ;     912 		
         ;     913 		// auto shut down timer and control
         ;     914 		if(( cPWMVal > 0 )&&( iMotorRPM > 0 ))
0005b1 91a0 016b 	LDS  R26,_cPWMVal
0005b3 27ee      	CLR  R30
0005b4 17ea      	CP   R30,R26
0005b5 f430      	BRSH _0xEA
0005b6 91a0 0189 	LDS  R26,_iMotorRPM
0005b8 91b0 018a 	LDS  R27,_iMotorRPM+1
0005ba d964      	RCALL __CPW02
0005bb f00c      	BRLT _0xEB
          _0xEA:
0005bc c005      	RJMP _0xE9
          _0xEB:
         ;     915 		{
         ;     916 			isecTimer = 0;
0005bd 27ee      	CLR  R30
0005be 93e0 0181 	STS  _isecTimer,R30
0005c0 93e0 0182 	STS  _isecTimer+1,R30
         ;     917 		}
         ;     918 		
         ;     919 		if( isecTimer > AUTO_SHUTOFF_TIME )
          _0xE9:
0005c2 91a0 0181 	LDS  R26,_isecTimer
0005c4 91b0 0182 	LDS  R27,_isecTimer+1
0005c6 e7e8      	LDI  R30,LOW(120)
0005c7 e0f0      	LDI  R31,HIGH(120)
0005c8 17ea      	CP   R30,R26
0005c9 07fb      	CPC  R31,R27
0005ca f40c      	BRGE _0xEC
         ;     920 		{
         ;     921   			ShutdownSystem();	
0005cb dae6      	RCALL _ShutdownSystem
         ;     922 		}
         ;     923 			
         ;     924         	// check com port and service any command there...
         ;     925    		itmp = RecByteRdy;
          _0xEC:
0005cc 2de6      	MOV  R30,R6
0005cd 27ff      	CLR  R31
0005ce 93e0 0195 	STS  _itmp,R30
0005d0 93f0 0196 	STS  _itmp+1,R31
         ;     926 		RecByteRdy = 0;
0005d2 2466      	CLR  R6
         ;     927 		if( itmp > 0 )
0005d3 91a0 0195 	LDS  R26,_itmp
0005d5 91b0 0196 	LDS  R27,_itmp+1
0005d7 d947      	RCALL __CPW02
0005d8 f434      	BRGE _0xED
         ;     928 		{      
         ;     929 			ProcessCommand( ComRecBuff );
0005d9 e2ec      	LDI  R30,LOW(_ComRecBuff)
0005da e0f1      	LDI  R31,HIGH(_ComRecBuff)
0005db 93fa      	ST   -Y,R31
0005dc 93ea      	ST   -Y,R30
0005dd d276      	RCALL _ProcessCommand
         ;     930 			SendCRLFPrompt();		
0005de d002      	RCALL _SendCRLFPrompt
         ;     931 		}
         ;     932       };
          _0xED:
0005df cda3      	RJMP _0xB4
         ;     933 }                               
          _0xEE:
0005e0 cfff      	RJMP _0xEE
         ;     934 
         ;     935 void SendCRLFPrompt( void )
         ;     936 {
          _SendCRLFPrompt:
         ;     937  	ComStr[0] = 0x0d;
0005e1 e0ed      	LDI  R30,LOW(13)
0005e2 93e0 0118 	STS  _ComStr,R30
         ;     938 	ComStr[1] = 0x0a;
0005e4 e0ea      	LDI  R30,LOW(10)
0005e5   +  	__PUTB1MN _ComStr,1
0005e5 93e0 0119 	STS  _comstr+0x1,R30
          	.ENDM
         ;     939 	ComStr[2] = '>';
0005e7 e3ee      	LDI  R30,LOW(62)
0005e8   +  	__PUTB1MN _ComStr,2
0005e8 93e0 011a 	STS  _comstr+0x2,R30
          	.ENDM
         ;     940 	ComStr[3] = 0;
0005ea 27ee      	CLR  R30
0005eb   +  	__PUTB1MN _ComStr,3
0005eb 93e0 011b 	STS  _comstr+0x3,R30
          	.ENDM
         ;     941 				
         ;     942 	ComSend( ComStr );
0005ed d524      	RCALL SUBOPT_0x1C
0005ee db75      	RCALL _ComSend
         ;     943 }  
0005ef 9508      	RET
         ;     944 
         ;     945 void OutputComData( void )
         ;     946 {
          _OutputComData:
         ;     947 		//Prep Com Data 
         ;     948 		ComStr[ 0 ] = 0;
0005f0 27ee      	CLR  R30
0005f1 93e0 0118 	STS  _ComStr,R30
         ;     949 		if( ComSequence == 0 )
0005f3 91e0 018c 	LDS  R30,_ComSequence
0005f5 30e0      	CPI  R30,0
0005f6 f479      	BRNE _0xF1
         ;     950 		{
         ;     951 	      		if(( PINB & 0x08 ) != 0 ) // j5 is shorted economy mode
0005f7 9bb3      	SBIS 0x16,3
0005f8 c006      	RJMP _0xF2
         ;     952 			{                
         ;     953 		        	sprintf( ComStr, "Ec-TH,%d,", cPWMVal );
0005f9 d518      	RCALL SUBOPT_0x1C
0005fa   +  	__POINTW1FN _240,0
0005fa e8ec      	LDI  R30,LOW(2*_240+0x0)
0005fb e0f0      	LDI  R31,HIGH(2*_240+0x0)
          	.ENDM
0005fc d614      	RCALL SUBOPT_0x41
0005fd e084      	LDI  R24,4
0005fe c005      	RJMP _0x1C6
         ;     954 		 	}
         ;     955 		 	else
          _0xF2:
         ;     956 		 	{
         ;     957 		        	sprintf( ComStr, "Pf-TH,%d,", cPWMVal );
0005ff d512      	RCALL SUBOPT_0x1C
000600   +  	__POINTW1FN _240,10
000600 e9e6      	LDI  R30,LOW(2*_240+0xa)
000601 e0f0      	LDI  R31,HIGH(2*_240+0xa)
          	.ENDM
000602 d60e      	RCALL SUBOPT_0x41
000603 e084      	LDI  R24,4
          _0x1C6:
000604 d392      	RCALL _sprintf
000605 9628      	ADIW R28,8
         ;     958 		 	}
         ;     959 		}
         ;     960 		if( ComSequence == 1 )
          _0xF1:
000606 91a0 018c 	LDS  R26,_ComSequence
000608 30a1      	CPI  R26,LOW(0x1)
000609 f461      	BRNE _0xF4
         ;     961 		{
         ;     962 		       	sprintf( ComStr, " RPM,%d,", iMotorRPM );
00060a d507      	RCALL SUBOPT_0x1C
00060b   +  	__POINTW1FN _240,20
00060b eae0      	LDI  R30,LOW(2*_240+0x14)
00060c e0f0      	LDI  R31,HIGH(2*_240+0x14)
          	.ENDM
00060d 93fa      	ST   -Y,R31
00060e 93ea      	ST   -Y,R30
00060f 91e0 0189 	LDS  R30,_iMotorRPM
000611 91f0 018a 	LDS  R31,_iMotorRPM+1
000613 d606      	RCALL SUBOPT_0x42
000614 e084      	LDI  R24,4
000615 d607      	RCALL SUBOPT_0x43
         ;     963 		}
         ;     964 		if( ComSequence == 2 )
          _0xF4:
000616 d5f3      	RCALL SUBOPT_0x3F
000617 f471      	BRNE _0xF5
         ;     965 		{
         ;     966 			sprintf( ComStr, "BV,%d,", BatteryVoltage );
000618 d4f9      	RCALL SUBOPT_0x1C
000619   +  	__POINTW1FN _240,29
000619 eae9      	LDI  R30,LOW(2*_240+0x1d)
00061a e0f0      	LDI  R31,HIGH(2*_240+0x1d)
          	.ENDM
00061b 93fa      	ST   -Y,R31
00061c 93ea      	ST   -Y,R30
00061d 91e0 0152 	LDS  R30,_BatteryVoltage
00061f 91f0 0153 	LDS  R31,_BatteryVoltage+1
000621 2766      	CLR  R22
000622 2777      	CLR  R23
000623 d72e      	RCALL __PUTPARD1
000624 e084      	LDI  R24,4
000625 d5f7      	RCALL SUBOPT_0x43
         ;     967 		}
         ;     968 		if( ComSequence == 3 )
          _0xF5:
000626 91a0 018c 	LDS  R26,_ComSequence
000628 30a3      	CPI  R26,LOW(0x3)
000629 f449      	BRNE _0xF6
         ;     969 		{
         ;     970 			sprintf( ComStr, " BC,%d,", BatteryCurrent );
00062a d4e7      	RCALL SUBOPT_0x1C
00062b   +  	__POINTW1FN _240,36
00062b ebe0      	LDI  R30,LOW(2*_240+0x24)
00062c e0f0      	LDI  R31,HIGH(2*_240+0x24)
          	.ENDM
00062d 93fa      	ST   -Y,R31
00062e 93ea      	ST   -Y,R30
00062f d5d0      	RCALL SUBOPT_0x3D
000630 d721      	RCALL __PUTPARD1
000631 e084      	LDI  R24,4
000632 d5ea      	RCALL SUBOPT_0x43
         ;     971 		}
         ;     972 		if( ComSequence == 4 )
          _0xF6:
000633 d58b      	RCALL SUBOPT_0x32
000634 f451      	BRNE _0xF7
         ;     973 		{
         ;     974 			sprintf( ComStr, "CT,%d,", HeatSinkTemp );
000635 d4dc      	RCALL SUBOPT_0x1C
000636   +  	__POINTW1FN _240,44
000636 ebe8      	LDI  R30,LOW(2*_240+0x2c)
000637 e0f0      	LDI  R31,HIGH(2*_240+0x2c)
          	.ENDM
000638 93fa      	ST   -Y,R31
000639 93ea      	ST   -Y,R30
00063a 91e0 0150 	LDS  R30,_HeatSinkTemp
00063c d5e3      	RCALL SUBOPT_0x44
00063d e084      	LDI  R24,4
00063e d5de      	RCALL SUBOPT_0x43
         ;     975 		}
         ;     976 		if( ComSequence == 5 )
          _0xF7:
00063f 91a0 018c 	LDS  R26,_ComSequence
000641 30a5      	CPI  R26,LOW(0x5)
000642 f461      	BRNE _0xF8
         ;     977 		{
         ;     978 			sprintf( ComStr, " PC,%d,", iPhaseCurrent );
000643 d4ce      	RCALL SUBOPT_0x1C
000644   +  	__POINTW1FN _240,51
000644 ebef      	LDI  R30,LOW(2*_240+0x33)
000645 e0f0      	LDI  R31,HIGH(2*_240+0x33)
          	.ENDM
000646 93fa      	ST   -Y,R31
000647 93ea      	ST   -Y,R30
000648 91e0 015d 	LDS  R30,_iPhaseCurrent
00064a 91f0 015e 	LDS  R31,_iPhaseCurrent+1
00064c d5cd      	RCALL SUBOPT_0x42
00064d e084      	LDI  R24,4
00064e d5ce      	RCALL SUBOPT_0x43
         ;     979 		}
         ;     980 		if( ComSequence == 6 )
          _0xF8:
00064f 91a0 018c 	LDS  R26,_ComSequence
000651 30a6      	CPI  R26,LOW(0x6)
000652 f471      	BRNE _0xF9
         ;     981 		{                         
         ;     982 		        tmpChar = hSensors;
000653 91e0 016d 	LDS  R30,_hSensors
000655 93e0 0197 	STS  _tmpChar,R30
         ;     983 			sprintf( ComStr, " HS,%d", tmpChar );          
000657 d4ba      	RCALL SUBOPT_0x1C
000658   +  	__POINTW1FN _240,59
000658 ece7      	LDI  R30,LOW(2*_240+0x3b)
000659 e0f0      	LDI  R31,HIGH(2*_240+0x3b)
          	.ENDM
00065a 93fa      	ST   -Y,R31
00065b 93ea      	ST   -Y,R30
00065c 91e0 0197 	LDS  R30,_tmpChar
00065e d5c1      	RCALL SUBOPT_0x44
00065f e084      	LDI  R24,4
000660 d5bc      	RCALL SUBOPT_0x43
         ;     984 			//sprintf( ComStr, " SW:%d,", SavedWattSeconds / 1000 );
         ;     985 		}  
         ;     986 		if( ComSequence == 7 )
          _0xF9:
000661 91a0 018c 	LDS  R26,_ComSequence
000663 30a7      	CPI  R26,LOW(0x7)
000664 f441      	BRNE _0xFA
         ;     987 		{
         ;     988 			//sprintf( ComStr, " CW:%d\r\n", CurrentWattSeconds / 1000 );
         ;     989 			sprintf( ComStr, "\r\n" );
000665 d4ac      	RCALL SUBOPT_0x1C
000666   +  	__POINTW1FN _240,66
000666 ecee      	LDI  R30,LOW(2*_240+0x42)
000667 e0f0      	LDI  R31,HIGH(2*_240+0x42)
          	.ENDM
000668 93fa      	ST   -Y,R31
000669 93ea      	ST   -Y,R30
00066a e080      	LDI  R24,0
00066b d32b      	RCALL _sprintf
00066c 9624      	ADIW R28,4
         ;     990 			// isecTimer
         ;     991 		}  
         ;     992 
         ;     993 		// Send Com Data
         ;     994  		ComSend( ComStr );	
          _0xFA:
00066d d4a4      	RCALL SUBOPT_0x1C
00066e daf5      	RCALL _ComSend
         ;     995 	        
         ;     996 }
00066f 9508      	RET
         ;     997 
         ;     998 void CalcCruiseControl( void )
         ;     999 {
          _CalcCruiseControl:
         ;    1000 	// do cruise control for economy mode here...
         ;    1001 	if(( PINB & 0x08 ) != 0 ) // j5 is shorted economy mode
000670 9bb3      	SBIS 0x16,3
000671 c074      	RJMP _0xFC
         ;    1002 	{                                                  
         ;    1003 		if( CruiseMode < 1 )
000672 e0e1      	LDI  R30,LOW(1)
000673 16ae      	CP   R10,R30
000674 f410      	BRSH _0xFD
         ;    1004 		{ 
         ;    1005 			CruiseMode = 1;
000675 d4ac      	RCALL SUBOPT_0x20
         ;    1006 		}
         ;    1007 		else if( CruiseMode == 2 )
000676 c016      	RJMP _0xFE
          _0xFD:
000677 e0e2      	LDI  R30,LOW(2)
000678 15ea      	CP   R30,R10
000679 f499      	BRNE _0xFF
         ;    1008 		{
         ;    1009 			// Set new Mode here...    
         ;    1010 			if( iMotorRPM > 600 )
00067a 91a0 0189 	LDS  R26,_iMotorRPM
00067c 91b0 018a 	LDS  R27,_iMotorRPM+1
00067e e5e8      	LDI  R30,LOW(600)
00067f e0f2      	LDI  R31,HIGH(600)
000680 17ea      	CP   R30,R26
000681 07fb      	CPC  R31,R27
000682 f444      	BRGE _0x100
         ;    1011 			{
         ;    1012 				iMaxEconoSpeed = iMotorRPM;
000683 91e0 0189 	LDS  R30,_iMotorRPM
000685 91f0 018a 	LDS  R31,_iMotorRPM+1
000687 93e0 0159 	STS  _iMaxEconoSpeed,R30
000689 93f0 015a 	STS  _iMaxEconoSpeed+1,R31
         ;    1013 			}
         ;    1014 			CruiseMode = 3;		
          _0x100:
00068b e0e3      	LDI  R30,LOW(3)
00068c 2eae      	MOV  R10,R30
         ;    1015 		}		       
         ;    1016 		
         ;    1017 		// limit speed if in Economy mode...
         ;    1018 		if( iMotorRPM > iMaxEconoSpeed + 50)
          _0xFF:
          _0xFE:
00068d 91e0 0159 	LDS  R30,_iMaxEconoSpeed
00068f 91f0 015a 	LDS  R31,_iMaxEconoSpeed+1
000691 96f2      	ADIW R30,50
000692 91a0 0189 	LDS  R26,_iMotorRPM
000694 91b0 018a 	LDS  R27,_iMotorRPM+1
000696 17ea      	CP   R30,R26
000697 07fb      	CPC  R31,R27
000698 f454      	BRGE _0x101
         ;    1019 		{       
         ;    1020 			// reduce the speed of the motor...
         ;    1021 		 	if( OldcPWMVal > 12 )	               
000699 91a0 016c 	LDS  R26,_OldcPWMVal
00069b e0ec      	LDI  R30,LOW(12)
00069c 17ea      	CP   R30,R26
00069d f428      	BRSH _0x102
         ;    1022 		 	{
         ;    1023 		 		OldcPWMVal = OldcPWMVal - 1;
00069e 91e0 016c 	LDS  R30,_OldcPWMVal
0006a0 50e1      	SUBI R30,LOW(1)
0006a1 93e0 016c 	STS  _OldcPWMVal,R30
         ;    1024 		  	}
         ;    1025 		 		 		 	
         ;    1026 		}
          _0x102:
         ;    1027 		if( iMotorRPM < iMaxEconoSpeed - 50 )
          _0x101:
0006a3 91e0 0159 	LDS  R30,_iMaxEconoSpeed
0006a5 91f0 015a 	LDS  R31,_iMaxEconoSpeed+1
0006a7 97f2      	SBIW R30,50
0006a8 91a0 0189 	LDS  R26,_iMotorRPM
0006aa 91b0 018a 	LDS  R27,_iMotorRPM+1
0006ac 17ae      	CP   R26,R30
0006ad 07bf      	CPC  R27,R31
0006ae f55c      	BRGE _0x103
         ;    1028 		{                                   
         ;    1029 			// increase the speed of the motor...
         ;    1030 			if( OldcPWMVal < tmpPWMVal )
0006af d575      	RCALL SUBOPT_0x45
0006b0 17ae      	CP   R26,R30
0006b1 f540      	BRSH _0x104
         ;    1031 			{       
         ;    1032 				itmp = tmpPWMVal - OldcPWMVal;
0006b2 91a0 016c 	LDS  R26,_OldcPWMVal
0006b4 91e0 0198 	LDS  R30,_tmpPWMVal
0006b6 1bea      	SUB  R30,R26
0006b7 27ff      	CLR  R31
0006b8 d4ef      	RCALL SUBOPT_0x2F
         ;    1033 				if( itmp > 50 )
0006b9 e3e2      	LDI  R30,LOW(50)
0006ba e0f0      	LDI  R31,HIGH(50)
0006bb 17ea      	CP   R30,R26
0006bc 07fb      	CPC  R31,R27
0006bd f434      	BRGE _0x105
         ;    1034 				{
         ;    1035 					OldcPWMVal = tmpPWMVal / 2;
0006be 91e0 0198 	LDS  R30,_tmpPWMVal
0006c0 95e6      	LSR  R30
0006c1 93e0 016c 	STS  _OldcPWMVal,R30
         ;    1036 				}
         ;    1037 				else
0006c3 c012      	RJMP _0x106
          _0x105:
         ;    1038 				{       if( itmp > 9 )
0006c4 91a0 0195 	LDS  R26,_itmp
0006c6 91b0 0196 	LDS  R27,_itmp+1
0006c8 e0e9      	LDI  R30,LOW(9)
0006c9 e0f0      	LDI  R31,HIGH(9)
0006ca 17ea      	CP   R30,R26
0006cb 07fb      	CPC  R31,R27
0006cc f424      	BRGE _0x107
         ;    1039 					{
         ;    1040 					 	 OldcPWMVal = OldcPWMVal + 2;
0006cd 91e0 016c 	LDS  R30,_OldcPWMVal
0006cf 5fee      	SUBI R30,-LOW(2)
0006d0 c003      	RJMP _0x1C7
         ;    1041 					}
         ;    1042 					else
          _0x107:
         ;    1043 				 	 	OldcPWMVal = OldcPWMVal + 1;
0006d1 91e0 016c 	LDS  R30,_OldcPWMVal
0006d3 5fef      	SUBI R30,-LOW(1)
          _0x1C7:
0006d4 93e0 016c 	STS  _OldcPWMVal,R30
         ;    1044 				}
          _0x106:
         ;    1045 				if( OldcPWMVal > tmpPWMVal )
0006d6 d54e      	RCALL SUBOPT_0x45
0006d7 17ea      	CP   R30,R26
0006d8 f408      	BRSH _0x109
         ;    1046 				{					
         ;    1047 					OldcPWMVal = tmpPWMVal;
0006d9 d550      	RCALL SUBOPT_0x46
         ;    1048 				}
         ;    1049 			}
          _0x109:
         ;    1050 		}
          _0x104:
         ;    1051 		else
          _0x103:
         ;    1052 		{
         ;    1053 			// dont do anything
         ;    1054 		}   
         ;    1055 		if( tmpPWMVal < OldcPWMVal )
0006da 91e0 016c 	LDS  R30,_OldcPWMVal
0006dc 91a0 0198 	LDS  R26,_tmpPWMVal
0006de 17ae      	CP   R26,R30
0006df f408      	BRSH _0x10B
         ;    1056 		{
         ;    1057 			OldcPWMVal = tmpPWMVal;
0006e0 d549      	RCALL SUBOPT_0x46
         ;    1058 		}			
         ;    1059 		tmpPWMVal = OldcPWMVal;
          _0x10B:
0006e1 91e0 016c 	LDS  R30,_OldcPWMVal
0006e3 93e0 0198 	STS  _tmpPWMVal,R30
         ;    1060 	}
         ;    1061 	else
0006e5 c008      	RJMP _0x10C
          _0xFC:
         ;    1062 	{
         ;    1063 		// permormance mode
         ;    1064 		if(( CruiseMode == 1 )||( CruiseMode == 3 ))
0006e6 e0e1      	LDI  R30,LOW(1)
0006e7 15ea      	CP   R30,R10
0006e8 f019      	BREQ _0x10E
0006e9 e0e3      	LDI  R30,LOW(3)
0006ea 15ea      	CP   R30,R10
0006eb f411      	BRNE _0x10D
          _0x10E:
         ;    1065 		{ 
         ;    1066 			CruiseMode = 2; 
0006ec e0e2      	LDI  R30,LOW(2)
0006ed 2eae      	MOV  R10,R30
         ;    1067 		}
         ;    1068 	
         ;    1069 	}
          _0x10D:
          _0x10C:
         ;    1070 }
0006ee 9508      	RET
         ;    1071                
         ;    1072 
         ;    1073 
         ;    1074 unsigned char CalcStateOfChargeForConsole( void )
         ;    1075 {                               
          _CalcStateOfChargeForConsole:
         ;    1076         long longtmp;
         ;    1077 	int ptr = 0; // point to first voltage chart on DischargePoints[][]                    
         ;    1078 	ftmp = MaxWattSeconds;
0006ef d53f      	RCALL SUBOPT_0x47
         ;	longtmp -> Y+2
         ;	ptr -> R16,R17
0006f0 e000      	LDI  R16,0
0006f1 e010      	LDI  R17,0
0006f2 91e0 0144 	LDS  R30,_MaxWattSeconds
0006f4 91f0 0145 	LDS  R31,_MaxWattSeconds+1
0006f6 9160 0146 	LDS  R22,_MaxWattSeconds+2
0006f8 9170 0147 	LDS  R23,_MaxWattSeconds+3
0006fa d705      	RCALL __CDF1
0006fb 93e0 0191 	STS  _ftmp,R30
0006fd 93f0 0192 	STS  _ftmp+1,R31
0006ff 9360 0193 	STS  _ftmp+2,R22
000701 9370 0194 	STS  _ftmp+3,R23
         ;    1079 	
         ;    1080  	if( BatteryCurrent > 8 ){ ptr = 1; }
000703 91a0 0151 	LDS  R26,_BatteryCurrent
000705 e0e8      	LDI  R30,LOW(8)
000706 17ea      	CP   R30,R26
000707 f410      	BRSH _0x111
000708   +  	__GETWRN 16,17,1
000708 e001      	LDI  R0x10,LOW(0x1)
000709 e010      	LDI  R0x11,HIGH(0x1)
          	.ENDM
         ;    1081  	if( BatteryCurrent > 16 ){ ptr = 2; }
          _0x111:
00070a 91a0 0151 	LDS  R26,_BatteryCurrent
00070c e1e0      	LDI  R30,LOW(16)
00070d 17ea      	CP   R30,R26
00070e f410      	BRSH _0x112
00070f   +  	__GETWRN 16,17,2
00070f e002      	LDI  R0x10,LOW(0x2)
000710 e010      	LDI  R0x11,HIGH(0x2)
          	.ENDM
         ;    1082  	if( BatteryCurrent > 25 ){ ptr = 3; }
          _0x112:
000711 91a0 0151 	LDS  R26,_BatteryCurrent
000713 e1e9      	LDI  R30,LOW(25)
000714 17ea      	CP   R30,R26
000715 f410      	BRSH _0x113
000716   +  	__GETWRN 16,17,3
000716 e003      	LDI  R0x10,LOW(0x3)
000717 e010      	LDI  R0x11,HIGH(0x3)
          	.ENDM
         ;    1083  	if( BatteryCurrent > 35 ){ ptr = 4; }
          _0x113:
000718 91a0 0151 	LDS  R26,_BatteryCurrent
00071a e2e3      	LDI  R30,LOW(35)
00071b 17ea      	CP   R30,R26
00071c f410      	BRSH _0x114
00071d   +  	__GETWRN 16,17,4
00071d e004      	LDI  R0x10,LOW(0x4)
00071e e010      	LDI  R0x11,HIGH(0x4)
          	.ENDM
         ;    1084  	
         ;    1085  	// if battery shows as really good then dont do anything...                                  
         ;    1086  	//if( BatteryVoltage > DischargePoints[ ptr ][ 0 ] ) { return( 5 ); } 
         ;    1087  	if( BatteryVoltage > DischargePoints[ ptr ][ 0 ] )
          _0x114:
00071f d512      	RCALL SUBOPT_0x48
000720 93bf      	PUSH R27
000721 93af      	PUSH R26
000722 d514      	RCALL SUBOPT_0x49
000723 91af      	POP  R26
000724 91bf      	POP  R27
000725 d4a8      	RCALL SUBOPT_0x35
000726 91a0 0152 	LDS  R26,_BatteryVoltage
000728 91b0 0153 	LDS  R27,_BatteryVoltage+1
00072a 17ea      	CP   R30,R26
00072b 07fb      	CPC  R31,R27
00072c f420      	BRSH _0x115
         ;    1088  	{
         ;    1089  		if( BatteryPowerLow > 0 ){ BatteryPowerLow = 0; }	
00072d 27ee      	CLR  R30
00072e 15e4      	CP   R30,R4
00072f f408      	BRSH _0x116
000730 2444      	CLR  R4
         ;    1090  	} 
          _0x116:
         ;    1091  	
         ;    1092  	if( BatteryVoltage < DischargePoints[ ptr ][ 3 ] )
          _0x115:
000731 d500      	RCALL SUBOPT_0x48
000732 93bf      	PUSH R27
000733 93af      	PUSH R26
000734 d502      	RCALL SUBOPT_0x49
000735 91af      	POP  R26
000736 91bf      	POP  R27
000737 0fea      	ADD  R30,R26
000738 1ffb      	ADC  R31,R27
000739 9636      	ADIW R30,6
00073a d500      	RCALL SUBOPT_0x4A
00073b f4a0      	BRSH _0x117
         ;    1093  	{       
         ;    1094  		vtmp = ftmp * 0.31;
00073c 91a0 0191 	LDS  R26,_ftmp
00073e 91b0 0192 	LDS  R27,_ftmp+1
000740 9180 0193 	LDS  R24,_ftmp+2
000742 9190 0194 	LDS  R25,_ftmp+3
000744   +  	__GETD1N 0x3E9EB852
000744 e5e2      	LDI  R30,LOW(0x3e9eb852)
000745 ebf8      	LDI  R31,HIGH(0x3e9eb852)
000746 e96e      	LDI  R22,BYTE3(0x3e9eb852)
000747 e37e      	LDI  R23,BYTE4(0x3e9eb852)
          	.ENDM
000748 d4f6      	RCALL SUBOPT_0x4B
         ;    1095 		longtmp = (long)vtmp;
000749 d4ff      	RCALL SUBOPT_0x4C
         ;    1096  	 	if( CurrentWattSeconds > longtmp )
00074a f42c      	BRGE _0x118
         ;    1097  	 	{
         ;    1098  	 		BatteryPowerLow++;
00074b 9443      	INC  R4
         ;    1099  	 		if( BatteryPowerLow > 30 )
00074c e1ee      	LDI  R30,LOW(30)
00074d 15e4      	CP   R30,R4
00074e f408      	BRSH _0x119
         ;    1100  	 		{
         ;    1101  	 			CurrentWattSeconds = CurrentWattSeconds - 100000;
00074f d507      	RCALL SUBOPT_0x4D
         ;    1102  	 			BatteryPowerLow = 0;
         ;    1103  	 		} 	
         ;    1104  	 	}
          _0x119:
         ;    1105  	} 
          _0x118:
         ;    1106  	if( BatteryVoltage < DischargePoints[ ptr ][ 4 ] )
          _0x117:
000750 d4e1      	RCALL SUBOPT_0x48
000751 93bf      	PUSH R27
000752 93af      	PUSH R26
000753 d4e3      	RCALL SUBOPT_0x49
000754 91af      	POP  R26
000755 91bf      	POP  R27
000756 0fea      	ADD  R30,R26
000757 1ffb      	ADC  R31,R27
000758 9638      	ADIW R30,8
000759 d4e1      	RCALL SUBOPT_0x4A
00075a f4a0      	BRSH _0x11A
         ;    1107 	{
         ;    1108 		vtmp = ftmp * 0.18;
00075b 91a0 0191 	LDS  R26,_ftmp
00075d 91b0 0192 	LDS  R27,_ftmp+1
00075f 9180 0193 	LDS  R24,_ftmp+2
000761 9190 0194 	LDS  R25,_ftmp+3
000763   +  	__GETD1N 0x3E3851EC
000763 eeec      	LDI  R30,LOW(0x3e3851ec)
000764 e5f1      	LDI  R31,HIGH(0x3e3851ec)
000765 e368      	LDI  R22,BYTE3(0x3e3851ec)
000766 e37e      	LDI  R23,BYTE4(0x3e3851ec)
          	.ENDM
000767 d4d7      	RCALL SUBOPT_0x4B
         ;    1109 		longtmp = (long)vtmp;
000768 d4e0      	RCALL SUBOPT_0x4C
         ;    1110  	 	if( CurrentWattSeconds > longtmp )
000769 f42c      	BRGE _0x11B
         ;    1111  	 	{
         ;    1112  	 		BatteryPowerLow++;
00076a 9443      	INC  R4
         ;    1113  	 		if( BatteryPowerLow > 20 )
00076b e1e4      	LDI  R30,LOW(20)
00076c 15e4      	CP   R30,R4
00076d f408      	BRSH _0x11C
         ;    1114  	 		{
         ;    1115  	 			CurrentWattSeconds = CurrentWattSeconds - 100000;
00076e d4e8      	RCALL SUBOPT_0x4D
         ;    1116  	 			BatteryPowerLow = 0;
         ;    1117  	 		} 	
         ;    1118  	 	}
          _0x11C:
         ;    1119   	}
          _0x11B:
         ;    1120 	
         ;    1121 	vtmp = ftmp * 0.81;
          _0x11A:
00076f 91a0 0191 	LDS  R26,_ftmp
000771 91b0 0192 	LDS  R27,_ftmp+1
000773 9180 0193 	LDS  R24,_ftmp+2
000775 9190 0194 	LDS  R25,_ftmp+3
000777   +  	__GETD1N 0x3F4F5C29
000777 e2e9      	LDI  R30,LOW(0x3f4f5c29)
000778 e5fc      	LDI  R31,HIGH(0x3f4f5c29)
000779 e46f      	LDI  R22,BYTE3(0x3f4f5c29)
00077a e37f      	LDI  R23,BYTE4(0x3f4f5c29)
          	.ENDM
00077b d4c3      	RCALL SUBOPT_0x4B
         ;    1122 	longtmp = (long)vtmp;
00077c d4cc      	RCALL SUBOPT_0x4C
         ;    1123 	if( CurrentWattSeconds > longtmp ){ return(5); }
00077d f414      	BRGE _0x11D
00077e e0e5      	LDI  R30,LOW(5)
00077f c045      	RJMP _0x1C2
         ;    1124 
         ;    1125 	vtmp = ftmp * 0.61;
          _0x11D:
000780 91a0 0191 	LDS  R26,_ftmp
000782 91b0 0192 	LDS  R27,_ftmp+1
000784 9180 0193 	LDS  R24,_ftmp+2
000786 9190 0194 	LDS  R25,_ftmp+3
000788   +  	__GETD1N 0x3F1C28F6
000788 efe6      	LDI  R30,LOW(0x3f1c28f6)
000789 e2f8      	LDI  R31,HIGH(0x3f1c28f6)
00078a e16c      	LDI  R22,BYTE3(0x3f1c28f6)
00078b e37f      	LDI  R23,BYTE4(0x3f1c28f6)
          	.ENDM
00078c d4b2      	RCALL SUBOPT_0x4B
         ;    1126 	longtmp = (long)vtmp;
00078d d4bb      	RCALL SUBOPT_0x4C
         ;    1127 	if( CurrentWattSeconds > longtmp ){ return(4); }
00078e f414      	BRGE _0x11E
00078f e0e4      	LDI  R30,LOW(4)
000790 c034      	RJMP _0x1C2
         ;    1128 
         ;    1129 	vtmp = ftmp * 0.41;
          _0x11E:
000791 91a0 0191 	LDS  R26,_ftmp
000793 91b0 0192 	LDS  R27,_ftmp+1
000795 9180 0193 	LDS  R24,_ftmp+2
000797 9190 0194 	LDS  R25,_ftmp+3
000799   +  	__GETD1N 0x3ED1EB85
000799 e8e5      	LDI  R30,LOW(0x3ed1eb85)
00079a eefb      	LDI  R31,HIGH(0x3ed1eb85)
00079b ed61      	LDI  R22,BYTE3(0x3ed1eb85)
00079c e37e      	LDI  R23,BYTE4(0x3ed1eb85)
          	.ENDM
00079d d4a1      	RCALL SUBOPT_0x4B
         ;    1130 	longtmp = (long)vtmp;
00079e d4aa      	RCALL SUBOPT_0x4C
         ;    1131 	if( CurrentWattSeconds > longtmp ){ return(3); }
00079f f414      	BRGE _0x11F
0007a0 e0e3      	LDI  R30,LOW(3)
0007a1 c023      	RJMP _0x1C2
         ;    1132 	
         ;    1133 	vtmp = ftmp * 0.21;
          _0x11F:
0007a2 91a0 0191 	LDS  R26,_ftmp
0007a4 91b0 0192 	LDS  R27,_ftmp+1
0007a6 9180 0193 	LDS  R24,_ftmp+2
0007a8 9190 0194 	LDS  R25,_ftmp+3
0007aa   +  	__GETD1N 0x3E570A3D
0007aa e3ed      	LDI  R30,LOW(0x3e570a3d)
0007ab e0fa      	LDI  R31,HIGH(0x3e570a3d)
0007ac e567      	LDI  R22,BYTE3(0x3e570a3d)
0007ad e37e      	LDI  R23,BYTE4(0x3e570a3d)
          	.ENDM
0007ae d490      	RCALL SUBOPT_0x4B
         ;    1134 	longtmp = (long)vtmp;
0007af d499      	RCALL SUBOPT_0x4C
         ;    1135 	if( CurrentWattSeconds > longtmp ){ return(2); }
0007b0 f414      	BRGE _0x120
0007b1 e0e2      	LDI  R30,LOW(2)
0007b2 c012      	RJMP _0x1C2
         ;    1136 
         ;    1137 	vtmp = ftmp * 0.051;
          _0x120:
0007b3 91a0 0191 	LDS  R26,_ftmp
0007b5 91b0 0192 	LDS  R27,_ftmp+1
0007b7 9180 0193 	LDS  R24,_ftmp+2
0007b9 9190 0194 	LDS  R25,_ftmp+3
0007bb   +  	__GETD1N 0x3D50E560
0007bb e6e0      	LDI  R30,LOW(0x3d50e560)
0007bc eef5      	LDI  R31,HIGH(0x3d50e560)
0007bd e560      	LDI  R22,BYTE3(0x3d50e560)
0007be e37d      	LDI  R23,BYTE4(0x3d50e560)
          	.ENDM
0007bf d47f      	RCALL SUBOPT_0x4B
         ;    1138 	longtmp = (long)vtmp;
0007c0 d488      	RCALL SUBOPT_0x4C
         ;    1139 	if( CurrentWattSeconds > longtmp ){ return(1); }
0007c1 f414      	BRGE _0x121
0007c2 e0e1      	LDI  R30,LOW(1)
0007c3 c001      	RJMP _0x1C2
         ;    1140 
         ;    1141 	return( 0 );	
          _0x121:
0007c4 27ee      	CLR  R30
          _0x1C2:
0007c5 d77b      	RCALL __LOADLOCR2
0007c6 9626      	ADIW R28,6
0007c7 9508      	RET
         ;    1142 }
         ;    1143 
         ;    1144 unsigned char ConvertTempSensor( int ADCData )
         ;    1145 {      
          _ConvertTempSensor:
         ;    1146  	unsigned char CelsTemp;
         ;    1147 	
         ;    1148 	if( ADCData < 10 ) { ADCData = 10; } 
0007c8 930a      	ST   -Y,R16
         ;	ADCData -> Y+1
         ;	CelsTemp -> R16
0007c9 81a9      	LDD  R26,Y+1
0007ca 81ba      	LDD  R27,Y+1+1
0007cb 30aa      	CPI  R26,LOW(0xA)
0007cc e0e0      	LDI  R30,HIGH(0xA)
0007cd 07be      	CPC  R27,R30
0007ce f424      	BRGE _0x123
0007cf e0ea      	LDI  R30,LOW(10)
0007d0 e0f0      	LDI  R31,HIGH(10)
0007d1 83e9      	STD  Y+1,R30
0007d2 83fa      	STD  Y+1+1,R31
         ;    1149 	vtmp = ADCData;
          _0x123:
0007d3 81e9      	LDD  R30,Y+1
0007d4 81fa      	LDD  R31,Y+1+1
0007d5 d537      	RCALL __CWD1
0007d6 d629      	RCALL __CDF1
0007d7 93e0 018d 	STS  _vtmp,R30
0007d9 93f0 018e 	STS  _vtmp+1,R31
0007db 9360 018f 	STS  _vtmp+2,R22
0007dd 9370 0190 	STS  _vtmp+3,R23
         ;    1150 	vtmp = vtmp / 204.6;
0007df 91a0 018d 	LDS  R26,_vtmp
0007e1 91b0 018e 	LDS  R27,_vtmp+1
0007e3 9180 018f 	LDS  R24,_vtmp+2
0007e5 9190 0190 	LDS  R25,_vtmp+3
0007e7   +  	__GETD1N 0x434C999A
0007e7 e9ea      	LDI  R30,LOW(0x434c999a)
0007e8 e9f9      	LDI  R31,HIGH(0x434c999a)
0007e9 e46c      	LDI  R22,BYTE3(0x434c999a)
0007ea e473      	LDI  R23,BYTE4(0x434c999a)
          	.ENDM
0007eb d481      	RCALL SUBOPT_0x4E
         ;    1151 	//Vin = ADCVal / 204.6
         ;    1152                                   
         ;    1153 	ftmp = 10000 * vtmp;
0007ec   +  	__GETD2N 0x461C4000
0007ec e0a0      	LDI  R26,LOW(0x461c4000)
0007ed e4b0      	LDI  R27,HIGH(0x461c4000)
0007ee e18c      	LDI  R24,BYTE3(0x461c4000)
0007ef e496      	LDI  R25,BYTE4(0x461c4000)
          	.ENDM
0007f0 d3c0      	RCALL SUBOPT_0x30
         ;    1154 	ftmp = ftmp / ( 5 - vtmp );
0007f1 91a0 018d 	LDS  R26,_vtmp
0007f3 91b0 018e 	LDS  R27,_vtmp+1
0007f5 9180 018f 	LDS  R24,_vtmp+2
0007f7 9190 0190 	LDS  R25,_vtmp+3
0007f9   +  	__GETD1N 0x40A00000
0007f9 e0e0      	LDI  R30,LOW(0x40a00000)
0007fa e0f0      	LDI  R31,HIGH(0x40a00000)
0007fb ea60      	LDI  R22,BYTE3(0x40a00000)
0007fc e470      	LDI  R23,BYTE4(0x40a00000)
          	.ENDM
0007fd d639      	RCALL __SUBF12
0007fe 91a0 0191 	LDS  R26,_ftmp
000800 91b0 0192 	LDS  R27,_ftmp+1
000802 9180 0193 	LDS  R24,_ftmp+2
000804 9190 0194 	LDS  R25,_ftmp+3
000806 d6b7      	RCALL __DIVF21
000807 93e0 0191 	STS  _ftmp,R30
000809 93f0 0192 	STS  _ftmp+1,R31
00080b 9360 0193 	STS  _ftmp+2,R22
00080d 9370 0194 	STS  _ftmp+3,R23
         ;    1155 	// ftmp is now the resistor value...	
         ;    1156 	vtmp = 10000 / ftmp;
00080f   +  	__GETD2N 0x461C4000
00080f e0a0      	LDI  R26,LOW(0x461c4000)
000810 e4b0      	LDI  R27,HIGH(0x461c4000)
000811 e18c      	LDI  R24,BYTE3(0x461c4000)
000812 e496      	LDI  R25,BYTE4(0x461c4000)
          	.ENDM
000813 d459      	RCALL SUBOPT_0x4E
         ;    1157 	ftmp = log( vtmp ) * 0.0002439;
000814 d53d      	RCALL __PUTPARD1
000815 d1a3      	RCALL _log
000816   +  	__GETD2N 0x397FBF68
000816 e6a8      	LDI  R26,LOW(0x397fbf68)
000817 ebbf      	LDI  R27,HIGH(0x397fbf68)
000818 e78f      	LDI  R24,BYTE3(0x397fbf68)
000819 e399      	LDI  R25,BYTE4(0x397fbf68)
          	.ENDM
00081a d671      	RCALL __MULF12
00081b d36b      	RCALL SUBOPT_0x2B
         ;    1158 	vtmp = 0.003354 - ftmp;
00081c   +  	__GETD1N 0x3B5BCEC8
00081c ece8      	LDI  R30,LOW(0x3b5bcec8)
00081d ecfe      	LDI  R31,HIGH(0x3b5bcec8)
00081e e56b      	LDI  R22,BYTE3(0x3b5bcec8)
00081f e37b      	LDI  R23,BYTE4(0x3b5bcec8)
          	.ENDM
000820 d34e      	RCALL SUBOPT_0x29
         ;    1159 	ftmp = 1 / vtmp;
000821 d365      	RCALL SUBOPT_0x2B
         ;    1160 	ftmp = ftmp - 273.15;	
000822   +  	__GETD1N 0x43889333
000822 e3e3      	LDI  R30,LOW(0x43889333)
000823 e9f3      	LDI  R31,HIGH(0x43889333)
000824 e868      	LDI  R22,BYTE3(0x43889333)
000825 e473      	LDI  R23,BYTE4(0x43889333)
          	.ENDM
000826 d374      	RCALL SUBOPT_0x2D
000827 93e0 0191 	STS  _ftmp,R30
000829 93f0 0192 	STS  _ftmp+1,R31
00082b 9360 0193 	STS  _ftmp+2,R22
00082d 9370 0194 	STS  _ftmp+3,R23
         ;    1161 	CelsTemp = (char)ftmp;
00082f d3a2      	RCALL SUBOPT_0x36
000830 2f0e      	MOV  R16,R30
         ;    1162 	return( CelsTemp );
000831 2fe0      	MOV  R30,R16
000832 8108      	LDD  R16,Y+0
000833 9623      	ADIW R28,3
000834 9508      	RET
         ;    1163 }
         ;    1164 
         ;    1165 
         ;    1166 
         ;    1167 void WriteDataToConsoleLEDS( unsigned char cdata )
         ;    1168 {
          _WriteDataToConsoleLEDS:
         ;    1169 	unsigned char pdata, indx;
         ;    1170 	cdata = cdata & 0x1f;
000835 d704      	RCALL __SAVELOCR2
         ;	cdata -> Y+2
         ;	pdata -> R16
         ;	indx -> R17
000836 81ea      	LDD  R30,Y+2
000837 71ef      	ANDI R30,LOW(0x1F)
000838 83ea      	STD  Y+2,R30
         ;    1171 	cdata = cdata << 3;
000839 d6f8      	RCALL __LSLB3
00083a 83ea      	STD  Y+2,R30
         ;    1172 	
         ;    1173 	for( indx = 0; indx <= 4; indx++ )
00083b e010      	LDI  R17,LOW(0)
          _0x126:
00083c e0e4      	LDI  R30,LOW(4)
00083d 17e1      	CP   R30,R17
00083e f090      	BRLO _0x127
         ;    1174 	{       
         ;    1175 		PORTD = PORTD & 0xe0;            
00083f b3e2      	IN   R30,0x12
000840 7ee0      	ANDI R30,LOW(0xE0)
000841 bbe2      	OUT  0x12,R30
         ;    1176 		// test the MSB for a non zero 
         ;    1177 		if(( cdata & 0x80 ) != 0 )
000842 81ea      	LDD  R30,Y+2
000843 78e0      	ANDI R30,LOW(0x80)
000844 f011      	BREQ _0x128
         ;    1178 		{
         ;    1179 			pdata = 0x04; //_LED_DATA_MSK; // | _LED_CLK_MSK | _LED_SEL_MSK;                
000845 e004      	LDI  R16,LOW(4)
         ;    1180 	 	}
         ;    1181 	 	else
000846 c001      	RJMP _0x129
          _0x128:
         ;    1182 	 	{
         ;    1183 			pdata = 0x00; //_LED_CLK_MSK | _LED_SEL_MSK;                	 	
000847 e000      	LDI  R16,LOW(0)
         ;    1184 	 	}                                                           
          _0x129:
         ;    1185 	 	PORTD = PORTD | pdata; // + _LED_CLK_MSK + _LED_SEL_MSK;
000848 b3e2      	IN   R30,0x12
000849 2be0      	OR   R30,R16
00084a bbe2      	OUT  0x12,R30
         ;    1186 	 	                             
         ;    1187 	 	// now clock the data...
         ;    1188 	 	
         ;    1189 	 	PORTD = PORTD | _LED_CLK_MSK;
00084b 9a93      	SBI  0x12,3
         ;    1190 	 	
         ;    1191 	 	cdata = cdata<<1;	
00084c 81ea      	LDD  R30,Y+2
00084d 0fee      	LSL  R30
00084e 83ea      	STD  Y+2,R30
         ;    1192 	}	
00084f 5f1f      	SUBI R17,-1
000850 cfeb      	RJMP _0x126
          _0x127:
         ;    1193 }
000851 d6ef      	RCALL __LOADLOCR2
000852 9623      	ADIW R28,3
000853 9508      	RET
         ;    1194 
         ;    1195 void ProcessCommand( char *pRecStr )
         ;    1196 {
          _ProcessCommand:
         ;    1197 }
000854 9622      	ADIW R28,2
000855 9508      	RET
         ;    1198 /*
         ;    1199 void ProcessCommand( char *pRecStr )
         ;    1200 {
         ;    1201     char ptr, uch, val; 
         ;    1202     //unsigned char *tptr; 
         ;    1203     long longtmp = 0;
         ;    1204     int multx;
         ;    1205   
         ;    1206 	// filter out the Set and Get commands...
         ;    1207     longtmp = 0;
         ;    1208   
         ;    1209  	uch = pRecStr[3] - 0x30;
         ;    1210 	// use 4 for low  voltage setting...
         ;    1211 	if( uch < 0 ){ uch = 0; }
         ;    1212 	if( uch > 3 ){ uch = 3; }
         ;    1213 
         ;    1214  
         ;    1215 	if( pRecStr[0] == 'S' )
         ;    1216 	{       
         ;    1217 		multx = 1;
         ;    1218 		for( ptr = (char)strlen( pRecStr ); ptr >= 3; ptr-- )
         ;    1219 		{
         ;    1220 			if(( pRecStr[ptr] >= 0x30 )&&( pRecStr[ptr] <= 0x39 ))
         ;    1221 			{
         ;    1222 				val = pRecStr[ptr] - 0x30;
         ;    1223 			 	longtmp = longtmp + ((int)val * (int)multx );
         ;    1224 			 	multx = multx * 10;			 					 				 		
         ;    1225 			}
         ;    1226 		}		
         ;    1227     	
         ;    1228 		if( pRecStr[1] == '0' )  // parameter 0 is the max economy speed
         ;    1229 	 	{    
         ;    1230                 	AutoUpdate = (char)longtmp;
         ;    1231 	 	} 
         ;    1232 
         ;    1233 		if( pRecStr[1] == '1' )  // parameter 0 is the max economy speed
         ;    1234 	 	{    
         ;    1235                 	iMaxEconoSpeed = (int)longtmp;
         ;    1236 	 	} 
         ;    1237     	
         ;    1238 		if( pRecStr[1] == '2' )
         ;    1239 	 	{    
         ;    1240                 	MaxWattSeconds = longtmp * 1000;  //MaxWattSeconds
         ;    1241 	 	} 
         ;    1242     	
         ;    1243 		if( pRecStr[1] == '3' )
         ;    1244 	 	{    
         ;    1245                 	CurrentWattSeconds = longtmp * 1000;
         ;    1246 	 	} 
         ;    1247     	
         ;    1248 		if( pRecStr[1] == '4' )
         ;    1249 	 	{    
         ;    1250                 	//SavedWattSeconds = (int)longtmp ;
         ;    1251 	 	} 
         ;    1252 		return;	   
         ;    1253 	}                              
         ;    1254 	if( pRecStr[0] == 'G' )
         ;    1255 	{
         ;    1256 	
         ;    1257 		if( pRecStr[1] == '0' )  // parameter 0 is the max economy speed
         ;    1258 	 	{    
         ;    1259                 	ComStr[ 0 ] = 0;
         ;    1260 	               	sprintf( ComStr, "G0:%d\r\n", AutoUpdate );
         ;    1261 	               	ComSend( ComStr );
         ;    1262 	 	} 
         ;    1263     	
         ;    1264 		if( pRecStr[1] == '1' )
         ;    1265 	 	{    
         ;    1266                 	ComStr[ 0 ] = 0;
         ;    1267 	               	sprintf( ComStr, "G1:%d\r\n", iMaxEconoSpeed );
         ;    1268 	               	ComSend( ComStr );
         ;    1269 	 	} 
         ;    1270     	
         ;    1271 		if( pRecStr[1] == '2' )
         ;    1272 	 	{       
         ;    1273 	 		longtmp = MaxWattSeconds / 1000;
         ;    1274 	 	
         ;    1275                 	ComStr[ 0 ] = 0;
         ;    1276 	               	sprintf( ComStr, "G2:%d\r\n", (int)longtmp );
         ;    1277 	               	ComSend( ComStr );
         ;    1278 	  	}	          
         ;    1279     	
         ;    1280 		if( pRecStr[1] == '3' )
         ;    1281 	 	{
         ;    1282 	 		longtmp = CurrentWattSeconds / 1000;
         ;    1283 	 	
         ;    1284                 	ComStr[ 0 ] = 0;
         ;    1285 	               	sprintf( ComStr, "G3:%d\r\n", (int)longtmp );
         ;    1286 	               	ComSend( ComStr );
         ;    1287 		}
         ;    1288 		if( pRecStr[1] == '4' )
         ;    1289 	 	{            
         ;    1290 	       		longtmp = SavedWattSeconds / 1000;	
         ;    1291                  	ComStr[ 0 ] = 0;
         ;    1292 	               	sprintf( ComStr, "G4:%d\r\n", longtmp );
         ;    1293 	               	ComSend( ComStr );
         ;    1294 	 	} 
         ;    1295  		if( pRecStr[1] == '5' )
         ;    1296 	 	{    
         ;    1297                  	ComStr[ 0 ] = 0;
         ;    1298 	               	sprintf( ComStr, "G5:%d\r\n", iPhaseZeroPoints[ LEDStatus ] );
         ;    1299 	               	ComSend( ComStr );
         ;    1300 	 	} 	 	
         ;    1301 	 	
         ;    1302 	 	
         ;    1303 	}          
         ;    1304 	
         ;    1305 	ComStr[0] = 0x0d;
         ;    1306 	ComStr[1] = 0;
         ;    1307  	ComSend( ComStr );			
         ;    1308   	                    
         ;    1309 }
         ;    1310 */
         ;    1311 /*
         ;    1312 void SendDataToCom( char eepindx, long data, char prec )
         ;    1313 {
         ;    1314 	char stimer;
         ;    1315 	char *chptr;
         ;    1316 	//stimer = tcounter;
         ;    1317 	         
         ;    1318 	eepptr = &szEppString[ eepindx ][0];
         ;    1319 
         ;    1320  	chptr = ComStr;
         ;    1321   	while(*eepptr != 0)
         ;    1322    	{             
         ;    1323    		*chptr = *eepptr;
         ;    1324    		chptr++;
         ;    1325    		eepptr++;
         ;    1326    	}
         ;    1327    *chptr = *eepptr;
         ;    1328    ComSend( ComStr );	  
         ;    1329 	
         ;    1330 	// provide a delay here...				 		
         ;    1331  //	while( stimer == tcounter )
         ;    1332  //	{
         ;    1333  //	}
         ;    1334  //	stimer = tcounter;
         ;    1335 	delay_it( 10000 );
         ;    1336 	
         ;    1337 	FormatString( ComStr, prec, data );
         ;    1338 	ComSend( ComStr ); 	
         ;    1339 //	while( stimer == tcounter )
         ;    1340 //	{
         ;    1341 //	}
         ;    1342 delay_it( 1000 );
         ;    1343 } 		 		
         ;    1344 
         ;    1345 char FormatString( char *szOutput, char Precision, long data )
         ;    1346 {
         ;    1347  	char indx = 0;
         ;    1348  	char cptr = 9;
         ;    1349  	char szNewStr[12];
         ;    1350 	long ltmp = 0;
         ;    1351  	
         ;    1352  	// value is negative...
         ;    1353  	if( data < 0 )
         ;    1354  	{
         ;    1355  	 	szOutput[indx] = '-';
         ;    1356  	 	indx++;
         ;    1357  	 	data = 0 - data;
         ;    1358  	}  	
         ;    1359 	while(( data != 0 )||(( 9 - cptr ) < Precision + 2 ))
         ;    1360  	{              
         ;    1361 		ltmp = data / 10;
         ;    1362 		szNewStr[cptr] = (char)( data - (ltmp * 10)) + 0x30;
         ;    1363 		cptr--;
         ;    1364 		if( (9 - cptr ) == Precision )
         ;    1365 		{
         ;    1366 			szNewStr[cptr] = '.';
         ;    1367 			cptr--;
         ;    1368 		}
         ;    1369 		data = ltmp;
         ;    1370  	}
         ;    1371 	cptr++;
         ;    1372  	while( cptr <= 9 )
         ;    1373  	{ 
         ;    1374 		szOutput[ indx ] = szNewStr[cptr];
         ;    1375 		cptr++;
         ;    1376 		indx++;
         ;    1377 	}  
         ;    1378 	szOutput[ indx ] = 0;
         ;    1379  	return( indx );	
         ;    1380 }
         ;    1381 */
         ;    1382 
         ;    1383 
         ;    1384 // Timer 0 overflow interrupt service routine 
         ;    1385 /*
         ;    1386 interrupt [TIM0_OVF] void timer0_ovf_isr(void)
         ;    1387 {                      
         ;    1388 	// 	Place your code here 
         ;    1389 	//  TCOUNT_0;
         ;    1390 	//	OCR1
         ;    1391 }
         ;    1392 */
         ;    1393 /*
         ;    1394  	if( BatteryCurrent > 8 ){ ptr = 1; }
         ;    1395  	if( BatteryCurrent > 16 ){ ptr = 2; }
         ;    1396  	if( BatteryCurrent > 25 ){ ptr = 3; }
         ;    1397  	if( BatteryCurrent > 35 ){ ptr = 4; }
         ;    1398  	                                  
         ;    1399  	if( BatteryVoltage > DischargePoints[ ptr ][ 0 ] ) { return( 5 ); } //0x1f ); }
         ;    1400  	if( BatteryVoltage > DischargePoints[ ptr ][ 1 ] ) { return( 4 ); } //0x0f ); }
         ;    1401  	if( BatteryVoltage > DischargePoints[ ptr ][ 2 ] ) { return( 3 ); } //0x07 ); }
         ;    1402  	if( BatteryVoltage > DischargePoints[ ptr ][ 3 ] ) { return( 2 ); } //0x03 ); }
         ;    1403  	if( BatteryVoltage > DischargePoints[ ptr ][ 0 ] ) { return( 1 ); } //0x01 ); } 	
         ;    1404 
         ;    1405 */
          _getchar:
000856 9b5f           sbis usr,rxc
000857 cffe           rjmp _getchar
000858 b1ec           in   r30,udr
000859 9508      	RET
          _putchar:
00085a 9b5d           sbis usr,udre
00085b cffe           rjmp _putchar
00085c 81e8           ld   r30,y
00085d b9ec           out  udr,r30
00085e 9621      	ADIW R28,1
00085f 9508      	RET
         
          	.DSEG
          _pp_G2:
000199      	.BYTE 0x2
         
          	.CSEG
          __put_G2:
          	put:
000860 91e0 0199 	LDS  R30,_pp_G2
000862 91f0 019a 	LDS  R31,_pp_G2+1
000864 9730      	SBIW R30,0
000865 f069      	BREQ _0x161
000866 91a0 0199 	LDS  R26,_pp_G2
000868 91b0 019a 	LDS  R27,_pp_G2+1
00086a 9611      	ADIW R26,1
00086b 93a0 0199 	STS  _pp_G2,R26
00086d 93b0 019a 	STS  _pp_G2+1,R27
00086f 9711      	SBIW R26,1
000870 81e8      	LD   R30,Y
000871 93ec      	ST   X,R30
000872 c003      	RJMP _0x162
          _0x161:
000873 81e8      	LD   R30,Y
000874 93ea      	ST   -Y,R30
000875 dfe4      	RCALL _putchar
          _0x162:
000876 9621      	ADIW R28,1
000877 9508      	RET
          __print_G2:
000878 9728      	SBIW R28,8
000879 d6bc      	RCALL __SAVELOCR6
00087a e000      	LDI  R16,0
          _0x164:
00087b 89e8      	LDD  R30,Y+16
00087c 89f9      	LDD  R31,Y+16+1
00087d 9631      	ADIW R30,1
00087e 8be8      	STD  Y+16,R30
00087f 8bf9      	STD  Y+16+1,R31
000880 9731      	SBIW R30,1
000881 95c8      	LPM
000882 2de0      	MOV  R30,R0
000883 2f3e      	MOV  R19,R30
000884 30e0      	CPI  R30,0
000885 f409      	BRNE PC+2
000886 c10d      	RJMP _0x166
000887 2fe0      	MOV  R30,R16
000888 30e0      	CPI  R30,0
000889 f431      	BRNE _0x16A
00088a 3235      	CPI  R19,37
00088b f411      	BRNE _0x16B
00088c e001      	LDI  R16,LOW(1)
00088d c001      	RJMP _0x16C
          _0x16B:
00088e d3e0      	RCALL SUBOPT_0x4F
          _0x16C:
00088f c103      	RJMP _0x169
          _0x16A:
000890 30e1      	CPI  R30,LOW(0x1)
000891 f4a9      	BRNE _0x16D
000892 3235      	CPI  R19,37
000893 f419      	BRNE _0x16E
000894 d3da      	RCALL SUBOPT_0x4F
000895 e000      	LDI  R16,LOW(0)
000896 c0fc      	RJMP _0x169
          _0x16E:
000897 e002      	LDI  R16,LOW(2)
000898 e050      	LDI  R21,LOW(0)
000899 e010      	LDI  R17,LOW(0)
00089a 323d      	CPI  R19,45
00089b f411      	BRNE _0x16F
00089c e011      	LDI  R17,LOW(1)
00089d c0f5      	RJMP _0x169
          _0x16F:
00089e 323b      	CPI  R19,43
00089f f411      	BRNE _0x170
0008a0 e25b      	LDI  R21,LOW(43)
0008a1 c0f1      	RJMP _0x169
          _0x170:
0008a2 3230      	CPI  R19,32
0008a3 f411      	BRNE _0x171
0008a4 e250      	LDI  R21,LOW(32)
0008a5 c0ed      	RJMP _0x169
          _0x171:
0008a6 c002      	RJMP _0x172
          _0x16D:
0008a7 30e2      	CPI  R30,LOW(0x2)
0008a8 f439      	BRNE _0x173
          _0x172:
0008a9 e040      	LDI  R20,LOW(0)
0008aa e003      	LDI  R16,LOW(3)
0008ab 3330      	CPI  R19,48
0008ac f411      	BRNE _0x174
0008ad 6810      	ORI  R17,LOW(128)
0008ae c0e4      	RJMP _0x169
          _0x174:
0008af c003      	RJMP _0x175
          _0x173:
0008b0 30e3      	CPI  R30,LOW(0x3)
0008b1 f009      	BREQ PC+2
0008b2 c0e0      	RJMP _0x169
          _0x175:
0008b3 3330      	CPI  R19,48
0008b4 f010      	BRLO _0x178
0008b5 333a      	CPI  R19,58
0008b6 f008      	BRLO _0x179
          _0x178:
0008b7 c009      	RJMP _0x177
          _0x179:
0008b8 2f24      	MOV  R18,R20
0008b9 0f44      	LSL  R20
0008ba 0f44      	LSL  R20
0008bb 0f42      	ADD  R20,R18
0008bc 0f44      	LSL  R20
0008bd 2fe3      	MOV  R30,R19
0008be 53e0      	SUBI R30,LOW(48)
0008bf 0f4e      	ADD  R20,R30
0008c0 c0d2      	RJMP _0x169
          _0x177:
0008c1 2fe3      	MOV  R30,R19
0008c2 36e3      	CPI  R30,LOW(0x63)
0008c3 f421      	BRNE _0x17D
0008c4 d3ac      	RCALL SUBOPT_0x50
0008c5 91ec      	LD   R30,X
0008c6 d3b1      	RCALL SUBOPT_0x51
0008c7 c0ca      	RJMP _0x17E
          _0x17D:
0008c8 37e3      	CPI  R30,LOW(0x73)
0008c9 f449      	BRNE _0x180
0008ca d3a6      	RCALL SUBOPT_0x50
0008cb d476      	RCALL __GETD1P
0008cc 87ec      	STD  Y+12,R30
0008cd 87fd      	STD  Y+12+1,R31
0008ce 93fa      	ST   -Y,R31
0008cf 93ea      	ST   -Y,R30
0008d0 d3b9      	RCALL _strlen
0008d1 2f0e      	MOV  R16,R30
0008d2 c00b      	RJMP _0x181
          _0x180:
0008d3 37e0      	CPI  R30,LOW(0x70)
0008d4 f469      	BRNE _0x183
0008d5 d39b      	RCALL SUBOPT_0x50
0008d6 d46b      	RCALL __GETD1P
0008d7 83ee      	STD  Y+6,R30
0008d8 83ff      	STD  Y+6+1,R31
0008d9 93fa      	ST   -Y,R31
0008da 93ea      	ST   -Y,R30
0008db d3b8      	RCALL _strlenf
0008dc 2f0e      	MOV  R16,R30
0008dd 6018      	ORI  R17,LOW(8)
          _0x181:
0008de 6012      	ORI  R17,LOW(2)
0008df 771f      	ANDI R17,LOW(127)
0008e0 e020      	LDI  R18,LOW(0)
0008e1 c030      	RJMP _0x184
          _0x183:
0008e2 36e4      	CPI  R30,LOW(0x64)
0008e3 f011      	BREQ _0x187
0008e4 36e9      	CPI  R30,LOW(0x69)
0008e5 f411      	BRNE _0x188
          _0x187:
0008e6 6014      	ORI  R17,LOW(4)
0008e7 c002      	RJMP _0x189
          _0x188:
0008e8 37e5      	CPI  R30,LOW(0x75)
0008e9 f431      	BRNE _0x18A
          _0x189:
0008ea ede2      	LDI  R30,LOW(_tbl10_G2*2)
0008eb e0f0      	LDI  R31,HIGH(_tbl10_G2*2)
0008ec 83ee      	STD  Y+6,R30
0008ed 83ff      	STD  Y+6+1,R31
0008ee e005      	LDI  R16,LOW(5)
0008ef c00c      	RJMP _0x18B
          _0x18A:
0008f0 35e8      	CPI  R30,LOW(0x58)
0008f1 f411      	BRNE _0x18D
0008f2 6018      	ORI  R17,LOW(8)
0008f3 c003      	RJMP _0x18E
          _0x18D:
0008f4 37e8      	CPI  R30,LOW(0x78)
0008f5 f009      	BREQ PC+2
0008f6 c09b      	RJMP _0x1BC
          _0x18E:
0008f7 edec      	LDI  R30,LOW(_tbl16_G2*2)
0008f8 e0f0      	LDI  R31,HIGH(_tbl16_G2*2)
0008f9 83ee      	STD  Y+6,R30
0008fa 83ff      	STD  Y+6+1,R31
0008fb e004      	LDI  R16,LOW(4)
          _0x18B:
0008fc ff12      	SBRS R17,2
0008fd c012      	RJMP _0x190
0008fe d372      	RCALL SUBOPT_0x50
0008ff d37a      	RCALL SUBOPT_0x52
000900 85aa      	LDD  R26,Y+10
000901 85bb      	LDD  R27,Y+10+1
000902 9710      	SBIW R26,0
000903 f434      	BRGE _0x191
000904 85ea      	LDD  R30,Y+10
000905 85fb      	LDD  R31,Y+10+1
000906 d3f4      	RCALL __ANEGW1
000907 87ea      	STD  Y+10,R30
000908 87fb      	STD  Y+10+1,R31
000909 e25d      	LDI  R21,LOW(45)
          _0x191:
00090a 3050      	CPI  R21,0
00090b f011      	BREQ _0x192
00090c 5f0f      	SUBI R16,-LOW(1)
00090d c001      	RJMP _0x193
          _0x192:
00090e 7f1b      	ANDI R17,LOW(251)
          _0x193:
00090f c002      	RJMP _0x194
          _0x190:
000910 d360      	RCALL SUBOPT_0x50
000911 d368      	RCALL SUBOPT_0x52
          _0x194:
          _0x184:
000912 fd10      	SBRC R17,0
000913 c010      	RJMP _0x195
          _0x196:
000914 1704      	CP   R16,R20
000915 f470      	BRSH _0x198
000916 ff17      	SBRS R17,7
000917 c008      	RJMP _0x199
000918 ff12      	SBRS R17,2
000919 c004      	RJMP _0x19A
00091a 7f1b      	ANDI R17,LOW(251)
00091b 2f35      	MOV  R19,R21
00091c 5001      	SUBI R16,LOW(1)
00091d c001      	RJMP _0x19B
          _0x19A:
00091e e330      	LDI  R19,LOW(48)
          _0x19B:
00091f c001      	RJMP _0x19C
          _0x199:
000920 e230      	LDI  R19,LOW(32)
          _0x19C:
000921 d34d      	RCALL SUBOPT_0x4F
000922 5041      	SUBI R20,LOW(1)
000923 cff0      	RJMP _0x196
          _0x198:
          _0x195:
000924 2f20      	MOV  R18,R16
000925 ff11      	SBRS R17,1
000926 c01a      	RJMP _0x19D
          _0x19E:
000927 3020      	CPI  R18,0
000928 f0b9      	BREQ _0x1A0
000929 ff13      	SBRS R17,3
00092a c009      	RJMP _0x1A1
00092b 81ee      	LDD  R30,Y+6
00092c 81ff      	LDD  R31,Y+6+1
00092d 9631      	ADIW R30,1
00092e 83ee      	STD  Y+6,R30
00092f 83ff      	STD  Y+6+1,R31
000930 9731      	SBIW R30,1
000931 95c8      	LPM
000932 2de0      	MOV  R30,R0
000933 c005      	RJMP _0x1C8
          _0x1A1:
000934 85ac      	LDD  R26,Y+12
000935 85bd      	LDD  R27,Y+12+1
000936 91ed      	LD   R30,X+
000937 87ac      	STD  Y+12,R26
000938 87bd      	STD  Y+12+1,R27
          _0x1C8:
000939 93ea      	ST   -Y,R30
00093a df25      	RCALL __put_G2
00093b 3040      	CPI  R20,0
00093c f009      	BREQ _0x1A3
00093d 5041      	SUBI R20,LOW(1)
          _0x1A3:
00093e 5021      	SUBI R18,LOW(1)
00093f cfe7      	RJMP _0x19E
          _0x1A0:
000940 c049      	RJMP _0x1A4
          _0x19D:
          _0x1A6:
000941 e330      	LDI  R19,LOW(48)
000942 81ee      	LDD  R30,Y+6
000943 81ff      	LDD  R31,Y+6+1
000944 9632      	ADIW R30,2
000945 83ee      	STD  Y+6,R30
000946 83ff      	STD  Y+6+1,R31
000947 9732      	SBIW R30,2
000948 d402      	RCALL __GETW1PF
000949 87e8      	STD  Y+8,R30
00094a 87f9      	STD  Y+8+1,R31
00094b 85aa                                            ldd  r26,y+10  ;R26,R27=n
00094c 85bb                                            ldd  r27,y+11
                                            calc_digit:
00094d 17ae                                            cp   r26,r30
00094e 07bf                                            cpc  r27,r31
00094f f020                                            brlo calc_digit_done
000950 5f3f      	SUBI R19,-LOW(1)
000951 1bae      	                                  sub  r26,r30
000952 0bbf      	                                  sbc  r27,r31
000953 f7c9      	                                  brne calc_digit
                                            calc_digit_done:
000954 87aa                                            std  Y+10,r26 ;n=R26,R27
000955 87bb                                            std  y+11,r27
000956 e3e9      	LDI  R30,LOW(57)
000957 17e3      	CP   R30,R19
000958 f428      	BRSH _0x1A8
000959 ff13      	SBRS R17,3
00095a c002      	RJMP _0x1A9
00095b 5f39      	SUBI R19,-LOW(7)
00095c c001      	RJMP _0x1AA
          _0x1A9:
00095d 5d39      	SUBI R19,-LOW(39)
          _0x1AA:
          _0x1A8:
00095e fd14      	SBRC R17,4
00095f c01d      	RJMP _0x1AC
000960 e3e0      	LDI  R30,LOW(48)
000961 17e3      	CP   R30,R19
000962 f030      	BRLO _0x1AE
000963 85a8      	LDD  R26,Y+8
000964 85b9      	LDD  R27,Y+8+1
000965 30a1      	CPI  R26,LOW(0x1)
000966 e0e0      	LDI  R30,HIGH(0x1)
000967 07be      	CPC  R27,R30
000968 f411      	BRNE _0x1AD
          _0x1AE:
000969 6110      	ORI  R17,LOW(16)
00096a c00a      	RJMP _0x1B0
          _0x1AD:
00096b 1742      	CP   R20,R18
00096c f010      	BRLO _0x1B2
00096d ff10      	SBRS R17,0
00096e c001      	RJMP _0x1B3
          _0x1B2:
00096f c011      	RJMP _0x1B1
          _0x1B3:
000970 e230      	LDI  R19,LOW(32)
000971 ff17      	SBRS R17,7
000972 c00a      	RJMP _0x1B4
000973 e330      	LDI  R19,LOW(48)
000974 6110      	ORI  R17,LOW(16)
          _0x1B0:
000975 ff12      	SBRS R17,2
000976 c006      	RJMP _0x1B5
000977 7f1b      	ANDI R17,LOW(251)
000978 935a      	ST   -Y,R21
000979 dee6      	RCALL __put_G2
00097a 3040      	CPI  R20,0
00097b f009      	BREQ _0x1B6
00097c 5041      	SUBI R20,LOW(1)
          _0x1B6:
          _0x1B5:
          _0x1B4:
          _0x1AC:
00097d d2f1      	RCALL SUBOPT_0x4F
00097e 3040      	CPI  R20,0
00097f f009      	BREQ _0x1B7
000980 5041      	SUBI R20,LOW(1)
          _0x1B7:
          _0x1B1:
000981 5021      	SUBI R18,LOW(1)
000982 85a8      	LDD  R26,Y+8
000983 85b9      	LDD  R27,Y+8+1
000984 e0e1      	LDI  R30,LOW(1)
000985 e0f0      	LDI  R31,HIGH(1)
000986 17ea      	CP   R30,R26
000987 07fb      	CPC  R31,R27
000988 f408      	BRSH _0x1A7
000989 cfb7      	RJMP _0x1A6
          _0x1A7:
          _0x1A4:
00098a ff10      	SBRS R17,0
00098b c006      	RJMP _0x1B8
          _0x1B9:
00098c 3040      	CPI  R20,0
00098d f021      	BREQ _0x1BB
00098e 5041      	SUBI R20,LOW(1)
00098f e2e0      	LDI  R30,LOW(32)
000990 d2e7      	RCALL SUBOPT_0x51
000991 cffa      	RJMP _0x1B9
          _0x1BB:
          _0x1B8:
          _0x1BC:
          _0x17E:
000992 e000      	LDI  R16,LOW(0)
          _0x169:
000993 cee7      	RJMP _0x164
          _0x166:
000994 d5a8      	RCALL __LOADLOCR6
000995 9662      	ADIW R28,18
000996 9508      	RET
          _sprintf:
000997 2ef8      	MOV  R15,R24
000998 9722      	SBIW R28,2
000999 2fac      	MOV  R26,R28
00099a 2fbd      	MOV  R27,R29
00099b 9712      	SBIW R26,2
00099c d35a      	RCALL __ADDW2R15
00099d 83a8      	ST   Y,R26
00099e 83b9      	STD  Y+1,R27
00099f 2fac      	MOV  R26,R28
0009a0 2fbd      	MOV  R27,R29
0009a1 9614      	ADIW R26,4
0009a2 d2db      	RCALL SUBOPT_0x53
0009a3 93e0 0199 	STS  _pp_G2,R30
0009a5 93f0 019a 	STS  _pp_G2+1,R31
0009a7 2fac      	MOV  R26,R28
0009a8 2fbd      	MOV  R27,R29
0009a9 9612      	ADIW R26,2
0009aa d2d3      	RCALL SUBOPT_0x53
0009ab 93fa      	ST   -Y,R31
0009ac 93ea      	ST   -Y,R30
0009ad 81ea      	LDD  R30,Y+2
0009ae 81fb      	LDD  R31,Y+2+1
0009af 93fa      	ST   -Y,R31
0009b0 93ea      	ST   -Y,R30
0009b1 dec6      	RCALL __print_G2
0009b2 91a0 0199 	LDS  R26,_pp_G2
0009b4 91b0 019a 	LDS  R27,_pp_G2+1
0009b6 d115      	RCALL SUBOPT_0xD
0009b7 9622      	ADIW R28,2
0009b8 9508      	RET
          _log:
0009b9 d275      	RCALL SUBOPT_0x47
0009ba   +  	__GETD2S 6
0009ba 81ae      	LDD  R26,Y+0x6
0009bb 81bf      	LDD  R27,Y+0x6+1
0009bc 8588      	LDD  R24,Y+0x6+2
0009bd 8599      	LDD  R25,Y+0x6+3
          	.ENDM
0009be d568      	RCALL __CPD02
0009bf f02c      	BRLT _0x1BF
0009c0   +  	__GETD1N 0xFF7FFFFF
0009c0 efef      	LDI  R30,LOW(0xff7fffff)
0009c1 efff      	LDI  R31,HIGH(0xff7fffff)
0009c2 e76f      	LDI  R22,BYTE3(0xff7fffff)
0009c3 ef7f      	LDI  R23,BYTE4(0xff7fffff)
          	.ENDM
0009c4 c078      	RJMP _0x1C1
          _0x1BF:
0009c5   +  	__GETD1S 6
0009c5 81ee      	LDD  R30,Y+0x6
0009c6 81ff      	LDD  R31,Y+0x6+1
0009c7 8568      	LDD  R22,Y+0x6+2
0009c8 8579      	LDD  R23,Y+0x6+3
          	.ENDM
0009c9 d388      	RCALL __PUTPARD1
0009ca e1e0      	LDI  R30,LOW(16)
0009cb e0f0      	LDI  R31,HIGH(16)
0009cc 93fa      	ST   -Y,R31
0009cd 93ea      	ST   -Y,R30
0009ce d3cf      	RCALL _frexp
0009cf   +  	__PUTD1S 6
0009cf 83ee      	STD  Y+0x6,R30
0009d0 83ff      	STD  Y+0x6+1,R31
0009d1 8768      	STD  Y+0x6+2,R22
0009d2 8779      	STD  Y+0x6+3,R23
          	.ENDM
0009d3   +  	__GETD2S 6
0009d3 81ae      	LDD  R26,Y+0x6
0009d4 81bf      	LDD  R27,Y+0x6+1
0009d5 8588      	LDD  R24,Y+0x6+2
0009d6 8599      	LDD  R25,Y+0x6+3
          	.ENDM
0009d7   +  	__GETD1N 0x3F3504F3
0009d7 efe3      	LDI  R30,LOW(0x3f3504f3)
0009d8 e0f4      	LDI  R31,HIGH(0x3f3504f3)
0009d9 e365      	LDI  R22,BYTE3(0x3f3504f3)
0009da e37f      	LDI  R23,BYTE4(0x3f3504f3)
          	.ENDM
0009db d523      	RCALL __CMPF12
0009dc f440      	BRSH _0x1C0
0009dd d2a3      	RCALL SUBOPT_0x54
0009de d45f      	RCALL __ADDF12
0009df   +  	__PUTD1S 6
0009df 83ee      	STD  Y+0x6,R30
0009e0 83ff      	STD  Y+0x6+1,R31
0009e1 8768      	STD  Y+0x6+2,R22
0009e2 8779      	STD  Y+0x6+3,R23
          	.ENDM
0009e3   +  	__SUBWRN 16,17,1
0009e3 5001      	SUBI R0x10,LOW(0x1)
0009e4 4010      	SBCI R0x11,HIGH(0x1)
          	.ENDM
          _0x1C0:
0009e5   +  	__GETD2S 6
0009e5 81ae      	LDD  R26,Y+0x6
0009e6 81bf      	LDD  R27,Y+0x6+1
0009e7 8588      	LDD  R24,Y+0x6+2
0009e8 8599      	LDD  R25,Y+0x6+3
          	.ENDM
0009e9   +  	__GETD1N 0x3F800000
0009e9 e0e0      	LDI  R30,LOW(0x3f800000)
0009ea e0f0      	LDI  R31,HIGH(0x3f800000)
0009eb e860      	LDI  R22,BYTE3(0x3f800000)
0009ec e37f      	LDI  R23,BYTE4(0x3f800000)
          	.ENDM
0009ed d1ad      	RCALL SUBOPT_0x2D
0009ee 937f      	PUSH R23
0009ef 936f      	PUSH R22
0009f0 93ff      	PUSH R31
0009f1 93ef      	PUSH R30
0009f2   +  	__GETD1S 6
0009f2 81ee      	LDD  R30,Y+0x6
0009f3 81ff      	LDD  R31,Y+0x6+1
0009f4 8568      	LDD  R22,Y+0x6+2
0009f5 8579      	LDD  R23,Y+0x6+3
          	.ENDM
0009f6   +  	__GETD2N 0x3F800000
0009f6 e0a0      	LDI  R26,LOW(0x3f800000)
0009f7 e0b0      	LDI  R27,HIGH(0x3f800000)
0009f8 e880      	LDI  R24,BYTE3(0x3f800000)
0009f9 e39f      	LDI  R25,BYTE4(0x3f800000)
          	.ENDM
0009fa d443      	RCALL __ADDF12
0009fb 91af      	POP  R26
0009fc 91bf      	POP  R27
0009fd 918f      	POP  R24
0009fe 919f      	POP  R25
0009ff d4be      	RCALL __DIVF21
000a00   +  	__PUTD1S 6
000a00 83ee      	STD  Y+0x6,R30
000a01 83ff      	STD  Y+0x6+1,R31
000a02 8768      	STD  Y+0x6+2,R22
000a03 8779      	STD  Y+0x6+3,R23
          	.ENDM
000a04 d27c      	RCALL SUBOPT_0x54
000a05 d486      	RCALL __MULF12
000a06   +  	__PUTD1S 2
000a06 83ea      	STD  Y+0x2,R30
000a07 83fb      	STD  Y+0x2+1,R31
000a08 836c      	STD  Y+0x2+2,R22
000a09 837d      	STD  Y+0x2+3,R23
          	.ENDM
000a0a   +  	__GETD2N 0x3F654226
000a0a e2a6      	LDI  R26,LOW(0x3f654226)
000a0b e4b2      	LDI  R27,HIGH(0x3f654226)
000a0c e685      	LDI  R24,BYTE3(0x3f654226)
000a0d e39f      	LDI  R25,BYTE4(0x3f654226)
          	.ENDM
000a0e d189      	RCALL SUBOPT_0x2C
000a0f   +  	__GETD1N 0x4054114E
000a0f e4ee      	LDI  R30,LOW(0x4054114e)
000a10 e1f1      	LDI  R31,HIGH(0x4054114e)
000a11 e564      	LDI  R22,BYTE3(0x4054114e)
000a12 e470      	LDI  R23,BYTE4(0x4054114e)
          	.ENDM
000a13 d187      	RCALL SUBOPT_0x2D
000a14   +  	__GETD2S 6
000a14 81ae      	LDD  R26,Y+0x6
000a15 81bf      	LDD  R27,Y+0x6+1
000a16 8588      	LDD  R24,Y+0x6+2
000a17 8599      	LDD  R25,Y+0x6+3
          	.ENDM
000a18 d473      	RCALL __MULF12
000a19 937f      	PUSH R23
000a1a 936f      	PUSH R22
000a1b 93ff      	PUSH R31
000a1c 93ef      	PUSH R30
000a1d   +  	__GETD2S 2
000a1d 81aa      	LDD  R26,Y+0x2
000a1e 81bb      	LDD  R27,Y+0x2+1
000a1f 818c      	LDD  R24,Y+0x2+2
000a20 819d      	LDD  R25,Y+0x2+3
          	.ENDM
000a21   +  	__GETD1N 0x3FD4114D
000a21 e4ed      	LDI  R30,LOW(0x3fd4114d)
000a22 e1f1      	LDI  R31,HIGH(0x3fd4114d)
000a23 ed64      	LDI  R22,BYTE3(0x3fd4114d)
000a24 e37f      	LDI  R23,BYTE4(0x3fd4114d)
          	.ENDM
000a25 d175      	RCALL SUBOPT_0x2D
000a26 91af      	POP  R26
000a27 91bf      	POP  R27
000a28 918f      	POP  R24
000a29 919f      	POP  R25
000a2a d493      	RCALL __DIVF21
000a2b 937f      	PUSH R23
000a2c 936f      	PUSH R22
000a2d 93ff      	PUSH R31
000a2e 93ef      	PUSH R30
000a2f   +  	__GETW1R 16,17
000a2f 2fe0      	MOV  R30,R0x10
000a30 2ff1      	MOV  R31,R0x11
          	.ENDM
000a31   +  	__GETD2N 0x3F317218
000a31 e1a8      	LDI  R26,LOW(0x3f317218)
000a32 e7b2      	LDI  R27,HIGH(0x3f317218)
000a33 e381      	LDI  R24,BYTE3(0x3f317218)
000a34 e39f      	LDI  R25,BYTE4(0x3f317218)
          	.ENDM
000a35 d2d7      	RCALL __CWD1
000a36 d3c9      	RCALL __CDF1
000a37 d454      	RCALL __MULF12
000a38 91af      	POP  R26
000a39 91bf      	POP  R27
000a3a 918f      	POP  R24
000a3b 919f      	POP  R25
000a3c d401      	RCALL __ADDF12
          _0x1C1:
000a3d d503      	RCALL __LOADLOCR2
000a3e 962a      	ADIW R28,10
000a3f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x0:
000a40 27ee      	CLR  R30
000a41 93e0 016b 	STS  _cPWMVal,R30
000a43 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x1:
000a44 e0e1      	LDI  R30,LOW(1)
000a45 93ea      	ST   -Y,R30
000a46 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x2:
000a47 dded      	RCALL _WriteDataToConsoleLEDS
000a48 27ee      	CLR  R30
000a49 93e0 017c 	STS  _itrDelay,R30
000a4b 93e0 017d 	STS  _itrDelay+1,R30
000a4d 93e0 017e 	STS  _itrDelay+2,R30
000a4f 93e0 017f 	STS  _itrDelay+3,R30
000a51 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3:
000a52 91a0 017c 	LDS  R26,_itrDelay
000a54 91b0 017d 	LDS  R27,_itrDelay+1
000a56 9180 017e 	LDS  R24,_itrDelay+2
000a58 9190 017f 	LDS  R25,_itrDelay+3
000a5a   +  	__CPD2N 0x5640
000a5a 34a0      	CPI  R26,LOW(0x5640)
000a5b e5e6      	LDI  R30,HIGH(0x5640)
000a5c 07be      	CPC  R27,R30
000a5d e0e0      	LDI  R30,BYTE3(0x5640)
000a5e 078e      	CPC  R24,R30
000a5f e0e0      	LDI  R30,BYTE4(0x5640)
000a60 079e      	CPC  R25,R30
          	.ENDM
000a61 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x4:
000a62 27ee      	CLR  R30
000a63 93ea      	ST   -Y,R30
000a64 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x5:
000a65 d7b1      	RCALL _read_adc
000a66   +  	__PUTW1R 13,14
000a66 2ede      	MOV  R0xd,R30
000a67 2eef      	MOV  R0xe,R31
          	.ENDM
000a68   +  	__GETW1R 13,14
000a68 2ded      	MOV  R30,R0xd
000a69 2dfe      	MOV  R31,R0xe
          	.ENDM
000a6a d2a2      	RCALL __CWD1
000a6b d394      	RCALL __CDF1
000a6c 93e0 0191 	STS  _ftmp,R30
000a6e 93f0 0192 	STS  _ftmp+1,R31
000a70 9360 0193 	STS  _ftmp+2,R22
000a72 9370 0194 	STS  _ftmp+3,R23
000a74 91a0 0191 	LDS  R26,_ftmp
000a76 91b0 0192 	LDS  R27,_ftmp+1
000a78 9180 0193 	LDS  R24,_ftmp+2
000a7a 9190 0194 	LDS  R25,_ftmp+3
000a7c   +  	__GETD1N 0x3E5182AA
000a7c eaea      	LDI  R30,LOW(0x3e5182aa)
000a7d e8f2      	LDI  R31,HIGH(0x3e5182aa)
000a7e e561      	LDI  R22,BYTE3(0x3e5182aa)
000a7f e37e      	LDI  R23,BYTE4(0x3e5182aa)
          	.ENDM
000a80 d43d      	RCALL __DIVF21
000a81 93e0 018d 	STS  _vtmp,R30
000a83 93f0 018e 	STS  _vtmp+1,R31
000a85 9360 018f 	STS  _vtmp+2,R22
000a87 9370 0190 	STS  _vtmp+3,R23
000a89 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES
          SUBOPT_0x6:
000a8a 91e0 018d 	LDS  R30,_vtmp
000a8c 91f0 018e 	LDS  R31,_vtmp+1
000a8e 9160 018f 	LDS  R22,_vtmp+2
000a90 9170 0190 	LDS  R23,_vtmp+3
000a92 d347      	RCALL __CFD1
000a93 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x7:
000a94 91e0 0174 	LDS  R30,_CurrentWattSeconds
000a96 91f0 0175 	LDS  R31,_CurrentWattSeconds+1
000a98 9160 0176 	LDS  R22,_CurrentWattSeconds+2
000a9a 9170 0177 	LDS  R23,_CurrentWattSeconds+3
000a9c d2df      	RCALL __EEPROMWRD
000a9d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x8:
000a9e e0a1      	LDI  R26,LOW(_PowerWattSeconds)
000a9f e0b0      	LDI  R27,HIGH(_PowerWattSeconds)
000aa0 d2c8      	RCALL __EEPROMRDD
000aa1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x9:
000aa2   +  	__GETD1N 0x445C0
000aa2 ece0      	LDI  R30,LOW(0x445c0)
000aa3 e4f5      	LDI  R31,HIGH(0x445c0)
000aa4 e064      	LDI  R22,BYTE3(0x445c0)
000aa5 e070      	LDI  R23,BYTE4(0x445c0)
          	.ENDM
000aa6 93e0 0178 	STS  _SavedWattSeconds,R30
000aa8 93f0 0179 	STS  _SavedWattSeconds+1,R31
000aaa 9360 017a 	STS  _SavedWattSeconds+2,R22
000aac 9370 017b 	STS  _SavedWattSeconds+3,R23
000aae 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xA:
000aaf 81ea      	LDD  R30,Y+2
000ab0 81fb      	LDD  R31,Y+2+1
000ab1 81ac      	LDD  R26,Y+4
000ab2 81bd      	LDD  R27,Y+4+1
000ab3 0fae      	ADD  R26,R30
000ab4 1fbf      	ADC  R27,R31
000ab5 91ec      	LD   R30,X
000ab6 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xB:
000ab7 91a0 017c 	LDS  R26,_itrDelay
000ab9 91b0 017d 	LDS  R27,_itrDelay+1
000abb 9180 017e 	LDS  R24,_itrDelay+2
000abd 9190 017f 	LDS  R25,_itrDelay+3
000abf   +  	__CPD2N 0x14
000abf 31a4      	CPI  R26,LOW(0x14)
000ac0 e0e0      	LDI  R30,HIGH(0x14)
000ac1 07be      	CPC  R27,R30
000ac2 e0e0      	LDI  R30,BYTE3(0x14)
000ac3 078e      	CPC  R24,R30
000ac4 e0e0      	LDI  R30,BYTE4(0x14)
000ac5 079e      	CPC  R25,R30
          	.ENDM
000ac6 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xC:
000ac7 2da5      	MOV  R26,R5
000ac8 27bb      	CLR  R27
000ac9 5da4      	SUBI R26,LOW(-_ComRecBuff)
000aca 4fbe      	SBCI R27,HIGH(-_ComRecBuff)
000acb 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xD:
000acc 27ee      	CLR  R30
000acd 93ec      	ST   X,R30
000ace 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xE:
000acf eee3      	LDI  R30,LOW(65507)
000ad0 efff      	LDI  R31,HIGH(65507)
000ad1 bdfd      	OUT  0x2C+1,R31
000ad2 bdec      	OUT  0x2C,R30
000ad3 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xF:
000ad4 bbe5      	OUT  0x15,R30
000ad5 27ee      	CLR  R30
000ad6 bbe5      	OUT  0x15,R30
000ad7 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x10:
000ad8 91e0 0185 	LDS  R30,_iMotorTimer
000ada 91f0 0186 	LDS  R31,_iMotorTimer+1
000adc 93e0 0187 	STS  _iMotorSpeed,R30
000ade 93f0 0188 	STS  _iMotorSpeed+1,R31
000ae0 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x11:
000ae1 27ee      	CLR  R30
000ae2 93e0 0173 	STS  _iTimerSOC,R30
000ae4 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x12:
000ae5 27ee      	CLR  R30
000ae6 bbe5      	OUT  0x15,R30
000ae7 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x13:
000ae8 91e0 0195 	LDS  R30,_itmp
000aea 91f0 0196 	LDS  R31,_itmp+1
000aec 9631      	ADIW R30,1
000aed 93e0 0195 	STS  _itmp,R30
000aef 93f0 0196 	STS  _itmp+1,R31
000af1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x14:
000af2 91e0 013c 	LDS  R30,_PhaseOutFWD
000af4 bbe5      	OUT  0x15,R30
000af5 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x15:
000af6 91e0 013c 	LDS  R30,_PhaseOutFWD
000af8 64e0      	ORI  R30,0x40
000af9 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x16:
000afa 27ee      	CLR  R30
000afb 93e0 016f 	STS  _LEDbyte,R30
000afd 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x17:
000afe 27ee      	CLR  R30
000aff 93e0 0170 	STS  _OldLEDbyte,R30
000b01 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x18:
000b02 27ee      	CLR  R30
000b03 93e0 018c 	STS  _ComSequence,R30
000b05 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x19:
000b06 27ee      	CLR  R30
000b07 93e0 018b 	STS  _CurrentLimitByte,R30
000b09 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1A:
000b0a 27ee      	CLR  R30
000b0b 93e0 0180 	STS  _isecTmr,R30
000b0d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1B:
000b0e 27ee      	CLR  R30
000b0f 93e0 0183 	STS  _isecTmrWatts,R30
000b11 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES
          SUBOPT_0x1C:
000b12 e1e8      	LDI  R30,LOW(_ComStr)
000b13 e0f1      	LDI  R31,HIGH(_ComStr)
000b14 93fa      	ST   -Y,R31
000b15 93ea      	ST   -Y,R30
000b16 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1D:
000b17 de7f      	RCALL _sprintf
000b18 9624      	ADIW R28,4
000b19 cff8      	RJMP SUBOPT_0x1C
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x1E:
000b1a 52e0      	SUBI R30,LOW(-_SOC_LEDS)
000b1b 4fff      	SBCI R31,HIGH(-_SOC_LEDS)
000b1c 81e0      	LD   R30,Z
000b1d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x1F:
000b1e d6f8      	RCALL _read_adc
000b1f   +  	__PUTW1R 13,14
000b1f 2ede      	MOV  R0xd,R30
000b20 2eef      	MOV  R0xe,R31
          	.ENDM
000b21 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x20:
000b22 e0e1      	LDI  R30,LOW(1)
000b23 2eae      	MOV  R10,R30
000b24 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x21:
000b25 91a0 0178 	LDS  R26,_SavedWattSeconds
000b27 91b0 0179 	LDS  R27,_SavedWattSeconds+1
000b29 9180 017a 	LDS  R24,_SavedWattSeconds+2
000b2b 9190 017b 	LDS  R25,_SavedWattSeconds+3
000b2d   +  	__CPD2N 0x111700
000b2d 30a0      	CPI  R26,LOW(0x111700)
000b2e e1e7      	LDI  R30,HIGH(0x111700)
000b2f 07be      	CPC  R27,R30
000b30 e1e1      	LDI  R30,BYTE3(0x111700)
000b31 078e      	CPC  R24,R30
000b32 e0e0      	LDI  R30,BYTE4(0x111700)
000b33 079e      	CPC  R25,R30
          	.ENDM
000b34 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x22:
000b35 91e0 0144 	LDS  R30,_MaxWattSeconds
000b37 91f0 0145 	LDS  R31,_MaxWattSeconds+1
000b39 9160 0146 	LDS  R22,_MaxWattSeconds+2
000b3b 9170 0147 	LDS  R23,_MaxWattSeconds+3
000b3d 93e0 0174 	STS  _CurrentWattSeconds,R30
000b3f 93f0 0175 	STS  _CurrentWattSeconds+1,R31
000b41 9360 0176 	STS  _CurrentWattSeconds+2,R22
000b43 9370 0177 	STS  _CurrentWattSeconds+3,R23
000b45 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x23:
000b46 dba8      	RCALL _CalcStateOfChargeForConsole
000b47 93e0 0172 	STS  _LEDStatus,R30
000b49 27ff      	CLR  R31
000b4a cfcf      	RJMP SUBOPT_0x1E
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x24:
000b4b 91e0 0171 	LDS  R30,_calcLEDbyte
000b4d 93e0 016f 	STS  _LEDbyte,R30
000b4f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x25:
000b50 91e0 016f 	LDS  R30,_LEDbyte
000b52 93e0 0170 	STS  _OldLEDbyte,R30
000b54 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x26:
000b55 91e0 016f 	LDS  R30,_LEDbyte
000b57 93ea      	ST   -Y,R30
000b58 ccdc      	RJMP _WriteDataToConsoleLEDS
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x27:
000b59 e0ef      	LDI  R30,LOW(15)
000b5a 17ea      	CP   R30,R26
000b5b 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x28:
000b5c d1b0      	RCALL __CWD1
000b5d d2a2      	RCALL __CDF1
000b5e 93e0 0191 	STS  _ftmp,R30
000b60 93f0 0192 	STS  _ftmp+1,R31
000b62 9360 0193 	STS  _ftmp+2,R22
000b64 9370 0194 	STS  _ftmp+3,R23
000b66 91a0 0191 	LDS  R26,_ftmp
000b68 91b0 0192 	LDS  R27,_ftmp+1
000b6a 9180 0193 	LDS  R24,_ftmp+2
000b6c 9190 0194 	LDS  R25,_ftmp+3
000b6e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x29:
000b6f d2c7      	RCALL __SUBF12
000b70 93e0 018d 	STS  _vtmp,R30
000b72 93f0 018e 	STS  _vtmp+1,R31
000b74 9360 018f 	STS  _vtmp+2,R22
000b76 9370 0190 	STS  _vtmp+3,R23
000b78   +  	__GETD2N 0x3F800000
000b78 e0a0      	LDI  R26,LOW(0x3f800000)
000b79 e0b0      	LDI  R27,HIGH(0x3f800000)
000b7a e880      	LDI  R24,BYTE3(0x3f800000)
000b7b e39f      	LDI  R25,BYTE4(0x3f800000)
          	.ENDM
000b7c d341      	RCALL __DIVF21
000b7d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x2A:
000b7e 93e0 018d 	STS  _vtmp,R30
000b80 93f0 018e 	STS  _vtmp+1,R31
000b82 9360 018f 	STS  _vtmp+2,R22
000b84 9370 0190 	STS  _vtmp+3,R23
000b86 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x2B:
000b87 93e0 0191 	STS  _ftmp,R30
000b89 93f0 0192 	STS  _ftmp+1,R31
000b8b 9360 0193 	STS  _ftmp+2,R22
000b8d 9370 0194 	STS  _ftmp+3,R23
000b8f 91a0 0191 	LDS  R26,_ftmp
000b91 91b0 0192 	LDS  R27,_ftmp+1
000b93 9180 0193 	LDS  R24,_ftmp+2
000b95 9190 0194 	LDS  R25,_ftmp+3
000b97 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2C:
000b98 d2f3      	RCALL __MULF12
000b99 d17a      	RCALL __MOVED12
000b9a 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES
          SUBOPT_0x2D:
000b9b d1c0      	RCALL __SWAPD12
000b9c d29a      	RCALL __SUBF12
000b9d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2E:
000b9e 91e0 0191 	LDS  R30,_ftmp
000ba0 91f0 0192 	LDS  R31,_ftmp+1
000ba2 9160 0193 	LDS  R22,_ftmp+2
000ba4 9170 0194 	LDS  R23,_ftmp+3
000ba6 d233      	RCALL __CFD1
000ba7 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2F:
000ba8 93e0 0195 	STS  _itmp,R30
000baa 93f0 0196 	STS  _itmp+1,R31
000bac 91a0 0195 	LDS  R26,_itmp
000bae 91b0 0196 	LDS  R27,_itmp+1
000bb0 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x30:
000bb1 d2da      	RCALL __MULF12
000bb2 93e0 0191 	STS  _ftmp,R30
000bb4 93f0 0192 	STS  _ftmp+1,R31
000bb6 9360 0193 	STS  _ftmp+2,R22
000bb8 9370 0194 	STS  _ftmp+3,R23
000bba 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x31:
000bbb ece0      	LDI  R30,LOW(192)
000bbc 93e0 018b 	STS  _CurrentLimitByte,R30
000bbe 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x32:
000bbf 91a0 018c 	LDS  R26,_ComSequence
000bc1 30a4      	CPI  R26,LOW(0x4)
000bc2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x33:
000bc3 91a0 0152 	LDS  R26,_BatteryVoltage
000bc5 91b0 0153 	LDS  R27,_BatteryVoltage+1
000bc7 17ae      	CP   R26,R30
000bc8 07bf      	CPC  R27,R31
000bc9 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x34:
000bca 91a0 0184 	LDS  R26,_DriveEnable
000bcc 35a0      	CPI  R26,LOW(0x50)
000bcd 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x35:
000bce 0fae      	ADD  R26,R30
000bcf 1fbf      	ADC  R27,R31
000bd0 d16d      	RCALL __GETW1P
000bd1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x36:
000bd2 91e0 0191 	LDS  R30,_ftmp
000bd4 91f0 0192 	LDS  R31,_ftmp+1
000bd6 9160 0193 	LDS  R22,_ftmp+2
000bd8 9170 0194 	LDS  R23,_ftmp+3
000bda d1ff      	RCALL __CFD1
000bdb 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x37:
000bdc e0e1      	LDI  R30,LOW(1)
000bdd 15e9      	CP   R30,R9
000bde 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x38:
000bdf 27ee      	CLR  R30
000be0 93e0 0198 	STS  _tmpPWMVal,R30
000be2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x39:
000be3 91a0 0189 	LDS  R26,_iMotorRPM
000be5 91b0 018a 	LDS  R27,_iMotorRPM+1
000be7 38aa      	CPI  R26,LOW(0x28A)
000be8 e0e2      	LDI  R30,HIGH(0x28A)
000be9 07be      	CPC  R27,R30
000bea 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3A:
000beb d2d2      	RCALL __DIVF21
000bec 93e0 0191 	STS  _ftmp,R30
000bee 93f0 0192 	STS  _ftmp+1,R31
000bf0 9360 0193 	STS  _ftmp+2,R22
000bf2 9370 0194 	STS  _ftmp+3,R23
000bf4 cfdd      	RJMP SUBOPT_0x36
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3B:
000bf5 91e0 0198 	LDS  R30,_tmpPWMVal
000bf7 91a0 0197 	LDS  R26,_tmpChar
000bf9 17ae      	CP   R26,R30
000bfa 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3C:
000bfb 91e0 0197 	LDS  R30,_tmpChar
000bfd 93e0 0198 	STS  _tmpPWMVal,R30
000bff 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3D:
000c00 91e0 0151 	LDS  R30,_BatteryCurrent
000c02 27ff      	CLR  R31
000c03 2766      	CLR  R22
000c04 2777      	CLR  R23
000c05 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3E:
000c06 91e0 0171 	LDS  R30,_calcLEDbyte
000c08 30e0      	CPI  R30,0
000c09 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3F:
000c0a 91a0 018c 	LDS  R26,_ComSequence
000c0c 30a2      	CPI  R26,LOW(0x2)
000c0d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x40:
000c0e 93e0 0197 	STS  _tmpChar,R30
000c10 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x41:
000c11 93fa      	ST   -Y,R31
000c12 93ea      	ST   -Y,R30
000c13 91e0 016b 	LDS  R30,_cPWMVal
000c15 27ff      	CLR  R31
000c16 2766      	CLR  R22
000c17 2777      	CLR  R23
000c18 d139      	RCALL __PUTPARD1
000c19 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x42:
000c1a d0f2      	RCALL __CWD1
000c1b d136      	RCALL __PUTPARD1
000c1c 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES
          SUBOPT_0x43:
000c1d dd79      	RCALL _sprintf
000c1e 9628      	ADIW R28,8
000c1f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x44:
000c20 27ff      	CLR  R31
000c21 2766      	CLR  R22
000c22 2777      	CLR  R23
000c23 d12e      	RCALL __PUTPARD1
000c24 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x45:
000c25 91e0 0198 	LDS  R30,_tmpPWMVal
000c27 91a0 016c 	LDS  R26,_OldcPWMVal
000c29 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x46:
000c2a 91e0 0198 	LDS  R30,_tmpPWMVal
000c2c 93e0 016c 	STS  _OldcPWMVal,R30
000c2e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x47:
000c2f 9724      	SBIW R28,4
000c30 d309      	RCALL __SAVELOCR2
000c31 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x48:
000c32   +  	__GETW1R 16,17
000c32 2fe0      	MOV  R30,R0x10
000c33 2ff1      	MOV  R31,R0x11
          	.ENDM
000c34 eea6      	LDI  R26,LOW(_DischargePoints)
000c35 e0b0      	LDI  R27,HIGH(_DischargePoints)
000c36 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x49:
000c37 e0aa      	LDI  R26,LOW(10)
000c38 e0b0      	LDI  R27,HIGH(10)
000c39 d0df      	RCALL __MULW12U
000c3a 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4A:
000c3b 2fae      	MOV  R26,R30
000c3c 2fbf      	MOV  R27,R31
000c3d d100      	RCALL __GETW1P
000c3e cf84      	RJMP SUBOPT_0x33
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES
          SUBOPT_0x4B:
000c3f d24c      	RCALL __MULF12
000c40 93e0 018d 	STS  _vtmp,R30
000c42 93f0 018e 	STS  _vtmp+1,R31
000c44 9360 018f 	STS  _vtmp+2,R22
000c46 9370 0190 	STS  _vtmp+3,R23
000c48 ce41      	RJMP SUBOPT_0x6
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES
          SUBOPT_0x4C:
000c49   +  	__PUTD1S 2
000c49 83ea      	STD  Y+0x2,R30
000c4a 83fb      	STD  Y+0x2+1,R31
000c4b 836c      	STD  Y+0x2+2,R22
000c4c 837d      	STD  Y+0x2+3,R23
          	.ENDM
000c4d 91a0 0174 	LDS  R26,_CurrentWattSeconds
000c4f 91b0 0175 	LDS  R27,_CurrentWattSeconds+1
000c51 9180 0176 	LDS  R24,_CurrentWattSeconds+2
000c53 9190 0177 	LDS  R25,_CurrentWattSeconds+3
000c55 d2d7      	RCALL __CPD12
000c56 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4D:
000c57 91e0 0174 	LDS  R30,_CurrentWattSeconds
000c59 91f0 0175 	LDS  R31,_CurrentWattSeconds+1
000c5b 9160 0176 	LDS  R22,_CurrentWattSeconds+2
000c5d 9170 0177 	LDS  R23,_CurrentWattSeconds+3
000c5f   +  	__SUBD1N 100000
000c5f 5ae0      	SUBI R30,LOW(0x186a0)
000c60 48f6      	SBCI R31,HIGH(0x186a0)
000c61 4061      	SBCI R22,BYTE3(0x186a0)
000c62 4070      	SBCI R23,BYTE4(0x186a0)
          	.ENDM
000c63 93e0 0174 	STS  _CurrentWattSeconds,R30
000c65 93f0 0175 	STS  _CurrentWattSeconds+1,R31
000c67 9360 0176 	STS  _CurrentWattSeconds+2,R22
000c69 9370 0177 	STS  _CurrentWattSeconds+3,R23
000c6b 2444      	CLR  R4
000c6c 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4E:
000c6d d250      	RCALL __DIVF21
000c6e cf0f      	RJMP SUBOPT_0x2A
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x4F:
000c6f 933a      	ST   -Y,R19
000c70 cbef      	RJMP __put_G2
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x50:
000c71 85ae      	LDD  R26,Y+14
000c72 85bf      	LDD  R27,Y+14+1
000c73 9714      	SBIW R26,4
000c74 87ae      	STD  Y+14,R26
000c75 87bf      	STD  Y+14+1,R27
000c76 9614      	ADIW R26,4
000c77 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x51:
000c78 93ea      	ST   -Y,R30
000c79 cbe6      	RJMP __put_G2
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x52:
000c7a d0c3      	RCALL __GETW1P
000c7b 87ea      	STD  Y+10,R30
000c7c 87fb      	STD  Y+10+1,R31
000c7d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x53:
000c7e d078      	RCALL __ADDW2R15
000c7f d0be      	RCALL __GETW1P
000c80 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x54:
000c81   +  	__GETD1S 6
000c81 81ee      	LDD  R30,Y+0x6
000c82 81ff      	LDD  R31,Y+0x6+1
000c83 8568      	LDD  R22,Y+0x6+2
000c84 8579      	LDD  R23,Y+0x6+3
          	.ENDM
000c85   +  	__GETD2S 6
000c85 81ae      	LDD  R26,Y+0x6
000c86 81bf      	LDD  R27,Y+0x6+1
000c87 8588      	LDD  R24,Y+0x6+2
000c88 8599      	LDD  R25,Y+0x6+3
          	.ENDM
000c89 9508      	RET
         
          _strlen:
000c8a 91a9      	ld   r26,y+
000c8b 91b9      	ld   r27,y+
000c8c 27ee      	clr  r30
000c8d 27ff      	clr  r31
          __strlen0:
000c8e 916d      	ld   r22,x+
000c8f 2366      	tst  r22
000c90 f011      	breq __strlen1
000c91 9631      	adiw r30,1
000c92 cffb      	rjmp __strlen0
          __strlen1:
000c93 9508      	ret
         
          _strlenf:
000c94 27aa      	clr  r26
000c95 27bb      	clr  r27
000c96 91e9      	ld   r30,y+
000c97 91f9      	ld   r31,y+
          __strlenf0:
000c98 95c8      	lpm 
000c99 2000      	tst  r0
000c9a f019      	breq __strlenf1
000c9b 9611      	adiw r26,1
000c9c 9631      	adiw r30,1
000c9d cffa      	rjmp __strlenf0
          __strlenf1:
000c9e 2fea      	mov  r30,r26
000c9f 2ffb      	mov  r31,r27
000ca0 9508      	ret
         
          _sqrt:
000ca1 9724      	sbiw r28,4
000ca2 935f      	push r21
000ca3 819f      	ldd  r25,y+7
000ca4 2399      	tst  r25
000ca5 f411      	brne __sqrt0
000ca6 9628      	adiw r28,8
000ca7 c1d8      	rjmp __zerores
          __sqrt0:
000ca8 f412      	brpl __sqrt1
000ca9 9628      	adiw r28,8
000caa c1db      	rjmp __maxres
          __sqrt1:
000cab 934f      	push r20
000cac e442      	ldi  r20,66
000cad 818e      	ldd  r24,y+6
000cae 81bd      	ldd  r27,y+5
000caf 81ac      	ldd  r26,y+4
          __sqrt2:
000cb0 8388      	st   y,r24
000cb1 8399      	std  y+1,r25
000cb2 83aa      	std  y+2,r26
000cb3 83bb      	std  y+3,r27
000cb4 2fea      	mov  r30,r26
000cb5 2ffb      	mov  r31,r27
000cb6 2f68      	mov  r22,r24
000cb7 2f79      	mov  r23,r25
000cb8 81ac      	ldd  r26,y+4
000cb9 81bd      	ldd  r27,y+5
000cba 818e      	ldd  r24,y+6
000cbb 819f      	ldd  r25,y+7
000cbc d201      	rcall __divf21
000cbd 8188      	ld   r24,y
000cbe 8199      	ldd  r25,y+1
000cbf 81aa      	ldd  r26,y+2
000cc0 81bb      	ldd  r27,y+3
000cc1 d17c      	rcall __addf12
000cc2 d10e      	rcall __unpack1
000cc3 957a      	dec  r23
000cc4 d0f2      	rcall __repack
000cc5 8188      	ld   r24,y
000cc6 8199      	ldd  r25,y+1
000cc7 81aa      	ldd  r26,y+2
000cc8 81bb      	ldd  r27,y+3
000cc9 27ae      	eor  r26,r30
000cca 7fa8      	andi r26,0xf8
000ccb f421      	brne __sqrt4
000ccc 17bf      	cp   r27,r31
000ccd 0786      	cpc  r24,r22
000cce 0797      	cpc  r25,r23
000ccf f039      	breq __sqrt3
          __sqrt4:
000cd0 954a      	dec  r20
000cd1 f029      	breq __sqrt3
000cd2 2fae      	mov  r26,r30
000cd3 2fbf      	mov  r27,r31
000cd4 2f86      	mov  r24,r22
000cd5 2f97      	mov  r25,r23
000cd6 cfd9      	rjmp __sqrt2
          __sqrt3:
000cd7 914f      	pop  r20
000cd8 915f      	pop  r21
000cd9 9628      	adiw r28,8
000cda 9508      	ret
         
          __SAVEISR:
000cdb 920a      	ST   -Y,R0
000cdc 921a      	ST   -Y,R1
000cdd 92fa      	ST   -Y,R15
000cde 936a      	ST   -Y,R22
000cdf 937a      	ST   -Y,R23
000ce0 938a      	ST   -Y,R24
000ce1 939a      	ST   -Y,R25
000ce2 93aa      	ST   -Y,R26
000ce3 93ba      	ST   -Y,R27
000ce4 93ea      	ST   -Y,R30
000ce5 93fa      	ST   -Y,R31
000ce6 b60f      	IN   R0,SREG
000ce7 920a      	ST   -Y,R0
000ce8 9508      	RET
         
          __LOADISR:
000ce9 9009      	LD   R0,Y+
000cea be0f      	OUT  SREG,R0
000ceb 91f9      	LD   R31,Y+
000cec 91e9      	LD   R30,Y+
000ced 91b9      	LD   R27,Y+
000cee 91a9      	LD   R26,Y+
000cef 9199      	LD   R25,Y+
000cf0 9189      	LD   R24,Y+
000cf1 9179      	LD   R23,Y+
000cf2 9169      	LD   R22,Y+
000cf3 90f9      	LD   R15,Y+
000cf4 9019      	LD   R1,Y+
000cf5 9009      	LD   R0,Y+
000cf6 9508      	RET
         
          __ADDW2R15:
000cf7 2400      	CLR  R0
000cf8 0daf      	ADD  R26,R15
000cf9 1db0      	ADC  R27,R0
000cfa 9508      	RET
         
          __ANEGW1:
000cfb 95e0      	COM  R30
000cfc 95f0      	COM  R31
000cfd 9631      	ADIW R30,1
000cfe 9508      	RET
         
          __ANEGD1:
000cff 95e0      	COM  R30
000d00 95f0      	COM  R31
000d01 9560      	COM  R22
000d02 9570      	COM  R23
000d03 5fef      	SUBI R30,-1
000d04 4fff      	SBCI R31,-1
000d05 4f6f      	SBCI R22,-1
000d06 4f7f      	SBCI R23,-1
000d07 9508      	RET
         
          __LSRW2:
000d08 95f6      	LSR  R31
000d09 95e7      	ROR  R30
000d0a 95f6      	LSR  R31
000d0b 95e7      	ROR  R30
000d0c 9508      	RET
         
          __CWD1:
000d0d 2766      	CLR  R22
000d0e 2777      	CLR  R23
000d0f fff7      	SBRS R31,7
000d10 9508      	RET
000d11 ef6f      	SER  R22
000d12 ef7f      	SER  R23
000d13 9508      	RET
         
          __MOVED12:
000d14 2fae      	MOV  R26,R30
000d15 2fbf      	MOV  R27,R31
000d16 2f86      	MOV  R24,R22
000d17 2f97      	MOV  R25,R23
000d18 9508      	RET
         
          __MULW12U:
000d19 2e0a      	MOV  R0,R26
000d1a 2e1b      	MOV  R1,R27
000d1b e181      	LDI  R24,17
000d1c 27aa      	CLR  R26
000d1d 1bbb      	SUB  R27,R27
000d1e c005      	RJMP __MULW12U1
          __MULW12U3:
000d1f f410      	BRCC __MULW12U2
000d20 0da0      	ADD  R26,R0
000d21 1db1      	ADC  R27,R1
          __MULW12U2:
000d22 95b6      	LSR  R27
000d23 95a7      	ROR  R26
          __MULW12U1:
000d24 95f7      	ROR  R31
000d25 95e7      	ROR  R30
000d26 958a      	DEC  R24
000d27 f7b9      	BRNE __MULW12U3
000d28 9508      	RET
         
          __DIVW21U:
000d29 2400      	CLR  R0
000d2a 2411      	CLR  R1
000d2b e190      	LDI  R25,16
          __DIVW21U1:
000d2c 0faa      	LSL  R26
000d2d 1fbb      	ROL  R27
000d2e 1c00      	ROL  R0
000d2f 1c11      	ROL  R1
000d30 1a0e      	SUB  R0,R30
000d31 0a1f      	SBC  R1,R31
000d32 f418      	BRCC __DIVW21U2
000d33 0e0e      	ADD  R0,R30
000d34 1e1f      	ADC  R1,R31
000d35 c001      	RJMP __DIVW21U3
          __DIVW21U2:
000d36 60a1      	SBR  R26,1
          __DIVW21U3:
000d37 959a      	DEC  R25
000d38 f799      	BRNE __DIVW21U1
000d39 2fea      	MOV  R30,R26
000d3a 2ffb      	MOV  R31,R27
000d3b 2da0      	MOV  R26,R0
000d3c 2db1      	MOV  R27,R1
000d3d 9508      	RET
         
          __GETW1P:
000d3e 91ed      	LD   R30,X+
000d3f 91fc      	LD   R31,X
000d40 9711      	SBIW R26,1
000d41 9508      	RET
         
          __GETD1P:
000d42 91ed      	LD   R30,X+
000d43 91fd      	LD   R31,X+
000d44 916d      	LD   R22,X+
000d45 917c      	LD   R23,X
000d46 9713      	SBIW R26,3
000d47 9508      	RET
         
          __PUTWP1:
000d48 93ed      	ST   X+,R30
000d49 93fc      	ST   X,R31
000d4a 9508      	RET
         
          __GETW1PF:
000d4b 95c8      	LPM
000d4c 9631      	ADIW R30,1
000d4d 2c10      	MOV  R1,R0
000d4e 95c8      	LPM 
000d4f 2df0      	MOV  R31,R0
000d50 2de1      	MOV  R30,R1
000d51 9508      	RET
         
          __PUTPARD1:
000d52 937a      	ST   -Y,R23
000d53 936a      	ST   -Y,R22
000d54 93fa      	ST   -Y,R31
000d55 93ea      	ST   -Y,R30
000d56 9508      	RET
         
          __CDF2U:
000d57 9468      	SET
000d58 c001      	RJMP __CDF2U0
          __CDF2:
000d59 94e8      	CLT
          __CDF2U0:
000d5a d001      	RCALL __SWAPD12
000d5b d0a5      	RCALL __CDF1U0
         
          __SWAPD12:
000d5c 2e18      	MOV  R1,R24
000d5d 2f86      	MOV  R24,R22
000d5e 2d61      	MOV  R22,R1
000d5f 2e19      	MOV  R1,R25
000d60 2f97      	MOV  R25,R23
000d61 2d71      	MOV  R23,R1
         
          __SWAPW12:
000d62 2e1b      	MOV  R1,R27
000d63 2fbf      	MOV  R27,R31
000d64 2df1      	MOV  R31,R1
         
          __SWAPB12:
000d65 2e1a      	MOV  R1,R26
000d66 2fae      	MOV  R26,R30
000d67 2de1      	MOV  R30,R1
000d68 9508      	RET
         
          __EEPROMRDD:
000d69 9612      	ADIW R26,2
000d6a d003      	RCALL __EEPROMRDW
000d6b 2f7f      	MOV  R23,R31
000d6c 2f6e      	MOV  R22,R30
000d6d 9712      	SBIW R26,2
         
          __EEPROMRDW:
000d6e 9611      	ADIW R26,1
000d6f d002      	RCALL __EEPROMRDB
000d70 2ffe      	MOV  R31,R30
000d71 9711      	SBIW R26,1
         
          __EEPROMRDB:
000d72 99e1      	SBIC EECR,EEWE
000d73 cffe      	RJMP __EEPROMRDB
000d74 b60f      	IN   R0,SREG
000d75 94f8      	CLI
000d76 bbae      	OUT  EEARL,R26
000d77 bbbf      	OUT  EEARH,R27
000d78 9ae0      	SBI  EECR,EERE
000d79 b3ed      	IN   R30,EEDR
000d7a be0f      	OUT  SREG,R0
000d7b 9508      	RET
         
          __EEPROMWRD:
000d7c d00a      	RCALL __EEPROMWRW
000d7d 9612      	ADIW R26,2
000d7e 2e0e      	MOV  R0,R30
000d7f 2e1f      	MOV  R1,R31
000d80 2fe6      	MOV  R30,R22
000d81 2ff7      	MOV  R31,R23
000d82 d004      	RCALL __EEPROMWRW
000d83 2de0      	MOV  R30,R0
000d84 2df1      	MOV  R31,R1
000d85 9712      	SBIW R26,2
000d86 9508      	RET
         
          __EEPROMWRW:
000d87 d007      	RCALL __EEPROMWRB
000d88 9611      	ADIW R26,1
000d89 93ef      	PUSH R30
000d8a 2fef      	MOV  R30,R31
000d8b d003      	RCALL __EEPROMWRB
000d8c 91ef      	POP  R30
000d8d 9711      	SBIW R26,1
000d8e 9508      	RET
         
          __EEPROMWRB:
000d8f 99e1      	SBIC EECR,EEWE
000d90 cffe      	RJMP __EEPROMWRB
000d91 b79f      	IN   R25,SREG
000d92 94f8      	CLI
000d93 bbae      	OUT  EEARL,R26
000d94 bbbf      	OUT  EEARH,R27
000d95 9ae0      	SBI  EECR,EERE
000d96 b38d      	IN   R24,EEDR
000d97 17e8      	CP   R30,R24
000d98 f019      	BREQ __EEPROMWRB0
000d99 bbed      	OUT  EEDR,R30
000d9a 9ae2      	SBI  EECR,EEMWE
000d9b 9ae1      	SBI  EECR,EEWE
          __EEPROMWRB0:
000d9c bf9f      	OUT  SREG,R25
000d9d 9508      	RET
         
          _frexp:
000d9e 91a9      	LD   R26,Y+
000d9f 91b9      	LD   R27,Y+
000da0 91e9      	LD   R30,Y+
000da1 91f9      	LD   R31,Y+
000da2 9169      	LD   R22,Y+
000da3 9179      	LD   R23,Y+
000da4 fb77      	BST  R23,7
000da5 0f66      	LSL  R22
000da6 1f77      	ROL  R23
000da7 2788      	CLR  R24
000da8 577e      	SUBI R23,0x7E
000da9 0b88      	SBC  R24,R24
000daa 937d      	ST   X+,R23
000dab 938c      	ST   X,R24
000dac e77e      	LDI  R23,0x7E
000dad 9576      	LSR  R23
000dae 9567      	ROR  R22
000daf f00e      	BRTS __ANEGF1
000db0 9508      	RET
         
          __ANEGF1:
000db1 9730      	SBIW R30,0
000db2 4060      	SBCI R22,0
000db3 4070      	SBCI R23,0
000db4 f009      	BREQ __ANEGF10
000db5 5870      	SUBI R23,0x80
          __ANEGF10:
000db6 9508      	RET
         
          __REPACK:
000db7 e850      	LDI  R21,0x80
000db8 2757      	EOR  R21,R23
000db9 f411      	BRNE __REPACK0
000dba 935f      	PUSH R21
000dbb c0c4      	RJMP __ZERORES
          __REPACK0:
000dbc 3f5f      	CPI  R21,0xFF
000dbd f031      	BREQ __REPACK1
000dbe 0f66      	LSL  R22
000dbf 0c00      	LSL  R0
000dc0 9557      	ROR  R21
000dc1 9567      	ROR  R22
000dc2 2f75      	MOV  R23,R21
000dc3 9508      	RET
          __REPACK1:
000dc4 935f      	PUSH R21
000dc5 2000      	TST  R0
000dc6 f00a      	BRMI __REPACK2
000dc7 c0be      	RJMP __MAXRES
          __REPACK2:
000dc8 c0b1      	RJMP __MINRES
         
          __UNPACK:
000dc9 e850      	LDI  R21,0x80
000dca 2e19      	MOV  R1,R25
000dcb 2215      	AND  R1,R21
000dcc 0f88      	LSL  R24
000dcd 1f99      	ROL  R25
000dce 2795      	EOR  R25,R21
000dcf 0f55      	LSL  R21
000dd0 9587      	ROR  R24
         
          __UNPACK1:
000dd1 e850      	LDI  R21,0x80
000dd2 2e07      	MOV  R0,R23
000dd3 2205      	AND  R0,R21
000dd4 0f66      	LSL  R22
000dd5 1f77      	ROL  R23
000dd6 2775      	EOR  R23,R21
000dd7 0f55      	LSL  R21
000dd8 9567      	ROR  R22
000dd9 9508      	RET
         
          __CFD1:
000dda 935f      	PUSH R21
000ddb dff5      	RCALL __UNPACK1
000ddc 3870      	CPI  R23,0x80
000ddd f010      	BRLO __CFD10
000dde 3f7f      	CPI  R23,0xFF
000ddf f030      	BRLO __CFD18
          __CFD10:
000de0 e156      	LDI  R21,22
000de1 1b57      	SUB  R21,R23
000de2 f40a      	BRPL __CFD11
000de3 c0a2      	RJMP __MAXRES
          __CFD11:
000de4 3158      	CPI  R21,24
000de5 f008      	BRLO __CFD12
          __CFD18:
000de6 c099      	RJMP __ZERORES
          __CFD12:
000de7 2777      	CLR  R23
          __CFD13:
000de8 3058      	CPI  R21,8
000de9 f028      	BRLO __CFD14
000dea 2fef      	MOV  R30,R31
000deb 2ff6      	MOV  R31,R22
000dec 2f67      	MOV  R22,R23
000ded 5058      	SUBI R21,8
000dee cff9      	RJMP __CFD13
          __CFD14:
000def 2355      	TST  R21
000df0 f031      	BREQ __CFD16
          __CFD15:
000df1 9576      	LSR  R23
000df2 9567      	ROR  R22
000df3 95f7      	ROR  R31
000df4 95e7      	ROR  R30
000df5 955a      	DEC  R21
000df6 f7d1      	BRNE __CFD15
          __CFD16:
000df7 2777      	CLR  R23
000df8 2000      	TST  R0
000df9 f412      	BRPL __CFD17
000dfa d035      	RCALL __NEGMAN1
000dfb ef7f      	SER  R23
          __CFD17:
000dfc 915f      	POP  R21
000dfd 9508      	RET
         
          __CDF1U:
000dfe 9468      	SET
000dff c001      	RJMP __CDF1U0
          __CDF1:
000e00 94e8      	CLT
          __CDF1U0:
000e01 9730      	SBIW R30,0
000e02 4060      	SBCI R22,0
000e03 4070      	SBCI R23,0
000e04 f0b1      	BREQ __CDF10
000e05 2400      	CLR  R0
000e06 f026      	BRTS __CDF11
000e07 2377      	TST  R23
000e08 f412      	BRPL __CDF11
000e09 9400      	COM  R0
000e0a def4      	RCALL __ANEGD1
          __CDF11:
000e0b 2e17      	MOV  R1,R23
000e0c e17e      	LDI  R23,30
000e0d 2011      	TST  R1
          __CDF12:
000e0e f032      	BRMI __CDF13
000e0f 957a      	DEC  R23
000e10 0fee      	LSL  R30
000e11 1fff      	ROL  R31
000e12 1f66      	ROL  R22
000e13 1c11      	ROL  R1
000e14 cff9      	RJMP __CDF12
          __CDF13:
000e15 2fef      	MOV  R30,R31
000e16 2ff6      	MOV  R31,R22
000e17 2d61      	MOV  R22,R1
000e18 935f      	PUSH R21
000e19 df9d      	RCALL __REPACK
000e1a 915f      	POP  R21
          __CDF10:
000e1b 9508      	RET
         
          __SWAPACC:
000e1c 2f5e      	MOV  R21,R30
000e1d 2fea      	MOV  R30,R26
000e1e 2fa5      	MOV  R26,R21
000e1f 2f5f      	MOV  R21,R31
000e20 2ffb      	MOV  R31,R27
000e21 2fb5      	MOV  R27,R21
000e22 2f56      	MOV  R21,R22
000e23 2f68      	MOV  R22,R24
000e24 2f85      	MOV  R24,R21
000e25 2f57      	MOV  R21,R23
000e26 2f79      	MOV  R23,R25
000e27 2f95      	MOV  R25,R21
000e28 2d50      	MOV  R21,R0
000e29 2c01      	MOV  R0,R1
000e2a 2e15      	MOV  R1,R21
000e2b 9508      	RET
         
          __UADD12:
000e2c 0fea      	ADD  R30,R26
000e2d 1ffb      	ADC  R31,R27
000e2e 1f68      	ADC  R22,R24
000e2f 9508      	RET
         
          __NEGMAN1:
000e30 95e0      	COM  R30
000e31 95f0      	COM  R31
000e32 9560      	COM  R22
000e33 5fef      	SUBI R30,-1
000e34 4fff      	SBCI R31,-1
000e35 4f6f      	SBCI R22,-1
000e36 9508      	RET
         
          __SUBF12:
000e37 935f      	PUSH R21
000e38 df90      	RCALL __UNPACK
000e39 3890      	CPI  R25,0x80
000e3a f171      	BREQ __ADDF129
000e3b e850      	LDI  R21,0x80
000e3c 2615      	EOR  R1,R21
         
000e3d c004      	RJMP __ADDF120
         
          __ADDF12:
000e3e 935f      	PUSH R21
000e3f df89      	RCALL __UNPACK
000e40 3890      	CPI  R25,0x80
000e41 f139      	BREQ __ADDF129
         
          __ADDF120:
000e42 3870      	CPI  R23,0x80
000e43 f121      	BREQ __ADDF128
          __ADDF121:
000e44 2f57      	MOV  R21,R23
000e45 1b59      	SUB  R21,R25
000e46 f113      	BRVS __ADDF129
000e47 f412      	BRPL __ADDF122
000e48 dfd3      	RCALL __SWAPACC
000e49 cffa      	RJMP __ADDF121
          __ADDF122:
000e4a 3158      	CPI  R21,24
000e4b f018      	BRLO __ADDF123
000e4c 27aa      	CLR  R26
000e4d 27bb      	CLR  R27
000e4e 2788      	CLR  R24
          __ADDF123:
000e4f 3058      	CPI  R21,8
000e50 f028      	BRLO __ADDF124
000e51 2fab      	MOV  R26,R27
000e52 2fb8      	MOV  R27,R24
000e53 2788      	CLR  R24
000e54 5058      	SUBI R21,8
000e55 cff9      	RJMP __ADDF123
          __ADDF124:
000e56 2355      	TST  R21
000e57 f029      	BREQ __ADDF126
          __ADDF125:
000e58 9586      	LSR  R24
000e59 95b7      	ROR  R27
000e5a 95a7      	ROR  R26
000e5b 955a      	DEC  R21
000e5c f7d9      	BRNE __ADDF125
          __ADDF126:
000e5d 2d50      	MOV  R21,R0
000e5e 2551      	EOR  R21,R1
000e5f f062      	BRMI __ADDF127
000e60 dfcb      	RCALL __UADD12
000e61 f438      	BRCC __ADDF129
000e62 9567      	ROR  R22
000e63 95f7      	ROR  R31
000e64 95e7      	ROR  R30
000e65 9573      	INC  R23
000e66 f413      	BRVC __ADDF129
000e67 c01e      	RJMP __MAXRES
          __ADDF128:
000e68 dfb3      	RCALL __SWAPACC
          __ADDF129:
000e69 df4d      	RCALL __REPACK
000e6a 915f      	POP  R21
000e6b 9508      	RET
          __ADDF127:
000e6c 1bea      	SUB  R30,R26
000e6d 0bfb      	SBC  R31,R27
000e6e 0b68      	SBC  R22,R24
000e6f f081      	BREQ __ZERORES
000e70 f410      	BRCC __ADDF1210
000e71 9400      	COM  R0
000e72 dfbd      	RCALL __NEGMAN1
          __ADDF1210:
000e73 2366      	TST  R22
000e74 f3a2      	BRMI __ADDF129
000e75 0fee      	LSL  R30
000e76 1fff      	ROL  R31
000e77 1f66      	ROL  R22
000e78 957a      	DEC  R23
000e79 f7cb      	BRVC __ADDF1210
         
          __MINRES:
000e7a efef      	SER  R30
000e7b efff      	SER  R31
000e7c e76f      	LDI  R22,0x7F
000e7d ef7f      	SER  R23
000e7e 915f      	POP  R21
000e7f 9508      	RET
         
          __ZERORES:
000e80 27ee      	CLR  R30
000e81 27ff      	CLR  R31
000e82 2766      	CLR  R22
000e83 2777      	CLR  R23
000e84 915f      	POP  R21
000e85 9508      	RET
         
          __MAXRES:
000e86 efef      	SER  R30
000e87 efff      	SER  R31
000e88 e76f      	LDI  R22,0x7F
000e89 e77f      	LDI  R23,0x7F
000e8a 915f      	POP  R21
000e8b 9508      	RET
         
          __MULF12:
000e8c 935f      	PUSH R21
000e8d df3b      	RCALL __UNPACK
000e8e 3870      	CPI  R23,0x80
000e8f f381      	BREQ __ZERORES
000e90 3890      	CPI  R25,0x80
000e91 f371      	BREQ __ZERORES
000e92 2401      	EOR  R0,R1
000e93 9408      	SEC
000e94 1f79      	ADC  R23,R25
000e95 f423      	BRVC __MULF124
000e96 f34c      	BRLT __ZERORES
          __MULF125:
000e97 2000      	TST  R0
000e98 f30a      	BRMI __MINRES
000e99 cfec      	RJMP __MAXRES
          __MULF124:
000e9a 933f      	PUSH R19
000e9b 934f      	PUSH R20
000e9c 2411      	CLR  R1
000e9d 2733      	CLR  R19
000e9e 2744      	CLR  R20
000e9f 2755      	CLR  R21
000ea0 e198      	LDI  R25,24
          __MULF120:
000ea1 0f33      	LSL  R19
000ea2 1f44      	ROL  R20
000ea3 1f55      	ROL  R21
000ea4 1fee      	ROL  R30
000ea5 1fff      	ROL  R31
000ea6 1f66      	ROL  R22
000ea7 f430      	BRCC __MULF121
000ea8 0f3a      	ADD  R19,R26
000ea9 1f4b      	ADC  R20,R27
000eaa 1f58      	ADC  R21,R24
000eab 1de1      	ADC  R30,R1
000eac 1df1      	ADC  R31,R1
000ead 1d61      	ADC  R22,R1
          __MULF121:
000eae 959a      	DEC  R25
000eaf f789      	BRNE __MULF120
000eb0 914f      	POP  R20
000eb1 913f      	POP  R19
000eb2 2366      	TST  R22
000eb3 f02a      	BRMI __MULF122
000eb4 0f55      	LSL  R21
000eb5 1fee      	ROL  R30
000eb6 1fff      	ROL  R31
000eb7 1f66      	ROL  R22
000eb8 c002      	RJMP __MULF123
          __MULF122:
000eb9 9573      	INC  R23
000eba f2e3      	BRVS __MULF125
          __MULF123:
000ebb defb      	RCALL __REPACK
000ebc 915f      	POP  R21
000ebd 9508      	RET
         
          __DIVF21:
000ebe 935f      	PUSH R21
000ebf df09      	RCALL __UNPACK
000ec0 3870      	CPI  R23,0x80
000ec1 f419      	BRNE __DIVF210
000ec2 2011      	TST  R1
          __DIVF211:
000ec3 f612      	BRPL __MAXRES
000ec4 cfb5      	RJMP __MINRES
          __DIVF210:
000ec5 3890      	CPI  R25,0x80
000ec6 f409      	BRNE __DIVF218
          __DIVF217:
000ec7 cfb8      	RJMP __ZERORES
          __DIVF218:
000ec8 2401      	EOR  R0,R1
000ec9 9408      	SEC
000eca 0b97      	SBC  R25,R23
000ecb f41b      	BRVC __DIVF216
000ecc f3d4      	BRLT __DIVF217
000ecd 2000      	TST  R0
000ece cff4      	RJMP __DIVF211
          __DIVF216:
000ecf 2f79      	MOV  R23,R25
000ed0 9566      	LSR  R22
000ed1 95f7      	ROR  R31
000ed2 95e7      	ROR  R30
000ed3 9586      	LSR  R24
000ed4 95b7      	ROR  R27
000ed5 95a7      	ROR  R26
000ed6 934f      	PUSH R20
000ed7 2411      	CLR  R1
000ed8 2744      	CLR  R20
000ed9 2755      	CLR  R21
000eda e198      	LDI  R25,24
          __DIVF212:
000edb 17ae      	CP   R26,R30
000edc 07bf      	CPC  R27,R31
000edd 0786      	CPC  R24,R22
000ede f028      	BRLO __DIVF213
000edf 1bae      	SUB  R26,R30
000ee0 0bbf      	SBC  R27,R31
000ee1 0b86      	SBC  R24,R22
000ee2 9408      	SEC
000ee3 c001      	RJMP __DIVF214
          __DIVF213:
000ee4 9488      	CLC
          __DIVF214:
000ee5 1c11      	ROL  R1
000ee6 1f44      	ROL  R20
000ee7 1f55      	ROL  R21
000ee8 1faa      	ROL  R26
000ee9 1fbb      	ROL  R27
000eea 1f88      	ROL  R24
000eeb 959a      	DEC  R25
000eec f771      	BRNE __DIVF212
000eed 2de1      	MOV  R30,R1
000eee 2ff4      	MOV  R31,R20
000eef 2f65      	MOV  R22,R21
000ef0 95a6      	LSR  R26
000ef1 1fe9      	ADC  R30,R25
000ef2 1ff9      	ADC  R31,R25
000ef3 1f69      	ADC  R22,R25
000ef4 914f      	POP  R20
000ef5 2366      	TST  R22
000ef6 f02a      	BRMI __DIVF215
000ef7 0fee      	LSL  R30
000ef8 1fff      	ROL  R31
000ef9 1f66      	ROL  R22
000efa 957a      	DEC  R23
000efb f25b      	BRVS __DIVF217
          __DIVF215:
000efc deba      	RCALL __REPACK
000efd 915f      	POP  R21
000efe 9508      	RET
         
          __CMPF12:
000eff 2399      	TST  R25
000f00 f09a      	BRMI __CMPF120
000f01 2377      	TST  R23
000f02 f042      	BRMI __CMPF121
000f03 1797      	CP   R25,R23
000f04 f048      	BRLO __CMPF122
000f05 f429      	BRNE __CMPF121
000f06 17ae      	CP   R26,R30
000f07 07bf      	CPC  R27,R31
000f08 0786      	CPC  R24,R22
000f09 f020      	BRLO __CMPF122
000f0a f031      	BREQ __CMPF123
          __CMPF121:
000f0b 9498      	CLZ
000f0c 9488      	CLC
000f0d 9508      	RET
          __CMPF122:
000f0e 9498      	CLZ
000f0f 9408      	SEC
000f10 9508      	RET
          __CMPF123:
000f11 9418      	SEZ
000f12 9488      	CLC
000f13 9508      	RET
          __CMPF120:
000f14 2377      	TST  R23
000f15 f7c2      	BRPL __CMPF122
000f16 1797      	CP   R25,R23
000f17 f398      	BRLO __CMPF121
000f18 f7a9      	BRNE __CMPF122
000f19 17ea      	CP   R30,R26
000f1a 07fb      	CPC  R31,R27
000f1b 0768      	CPC  R22,R24
000f1c f388      	BRLO __CMPF122
000f1d f399      	BREQ __CMPF123
000f1e cfec      	RJMP __CMPF121
         
          __CPW02:
000f1f 2400      	CLR  R0
000f20 160a      	CP   R0,R26
000f21 060b      	CPC  R0,R27
000f22 9508      	RET
         
          __CPD20:
000f23 9710      	SBIW R26,0
000f24 4080      	SBCI R24,0
000f25 4090      	SBCI R25,0
000f26 9508      	RET
         
          __CPD02:
000f27 2400      	CLR  R0
000f28 160a      	CP   R0,R26
000f29 060b      	CPC  R0,R27
000f2a 0608      	CPC  R0,R24
000f2b 0609      	CPC  R0,R25
000f2c 9508      	RET
         
          __CPD12:
000f2d 17ea      	CP   R30,R26
000f2e 07fb      	CPC  R31,R27
000f2f 0768      	CPC  R22,R24
000f30 0779      	CPC  R23,R25
000f31 9508      	RET
         
          __LSLB3:
000f32 0fee      	LSL  R30
000f33 0fee      	LSL  R30
000f34 0fee      	LSL  R30
000f35 9508      	RET
         
          __SAVELOCR6:
000f36 935a      	ST   -Y,R21
          __SAVELOCR5:
000f37 934a      	ST   -Y,R20
          __SAVELOCR4:
000f38 933a      	ST   -Y,R19
          __SAVELOCR3:
000f39 932a      	ST   -Y,R18
          __SAVELOCR2:
000f3a 931a      	ST   -Y,R17
000f3b 930a      	ST   -Y,R16
000f3c 9508      	RET
         
          __LOADLOCR6:
000f3d 815d      	LDD  R21,Y+5
          __LOADLOCR5:
000f3e 814c      	LDD  R20,Y+4
          __LOADLOCR4:
000f3f 813b      	LDD  R19,Y+3
          __LOADLOCR3:
000f40 812a      	LDD  R18,Y+2
          __LOADLOCR2:
000f41 8119      	LDD  R17,Y+1
000f42 8108      	LD   R16,Y
000f43 9508      	RET
         

Assembly complete with no errors.
