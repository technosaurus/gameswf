General
=======

* text rendering is almost production-ready, so finishing touches here
  are a high priority.  In particular:

  * implement host-app driven text rendering functions

  * try it out; maybe add a little text output to chunklod or
    something

  * switch to shape rendering at larger scales (when the textures will
    be stretched)

  * text rendering is slightly blurrier than a scanline renderer would
    do it, due to mip-mapping.  Probably not fixable in a good way --
    *can* be fixed by not allowing scaling and by always pinning glyph
    origin to a pixel center; maybe that could be a host-driven
    rendering option or something, for specialized body text.  But,
    results are still nice for scalable, smoothly animating display
    text.

* sprites as button characters are not working.

* the half-implemented action stuff is an obstacle to progress; many
  of my test movies don't work because "goto frame" and/or some other
  actions are not working correctly.  Need to fix this.  Ideas:

  * disable all but the very simplest actions (i.e. up to SWF 4.0 or
    so), while working out the basics

  * make sure the frame semantics are correct.  I'm not 100% clear on
    the semantics of frame transitions.  I think that "being on frame
    N" means that N's tags and actions have been executed.  "goto N"
    is still unclear to me: does it mean that N's tags and actions
    should be executed, or do we start with N+1?  Does the display
    list need to be cleared, left as-is, or set to some pristine
    condition for frame N?  But the display list is built
    incrementally.  So this needs experimentation.  I haven't looked
    at flashsource's GPL code for this; maybe that will clear things
    up.

  * collect a canonical set of test movies and check them into CVS

* host-app to gameswf communication

  * some mechanism for gamepad-like control of SWF UI's.  SWF is
    oriented around a mouse & keyboard model, which is not a good fit
    for consoles (and console-like) UI's.  Not sure exactly what to do
    about this.  One element would be associating SWF buttons with
    specific gamepad/keyboard buttons, which could be done by tagging
    the buttons in the SWF with special names, and adding an API for
    the host to report gamepad button presses.  Another element is
    dealing with dpad selections, where the user uses
    up/down/left/right buttons to highlight different options on the
    screen, and then another button to accept.  Not sure of the best
    way to shoehorn this into SWF.

* packaging

  * eliminate SDL dependencies; need a minimal stream interface that
    game engines can easily bind to FILE* or SDL_RWops* or whatever
    crazy thing they use internally to read their resource files.

  * libjpeg and libz dependencies are necessary, so leave as-is

  * Xbox port (important to me personally; maybe not a high priority
    for others)

  * make a script or makefile target to zip up the code into a nice
    distro

  * pick a version number, post a release

* text entry?  No keyboard on consoles, text input is very platform
  specific; low priority for now.

* dynamic text fields -- necessary for most games, console or not.
  Given direct text-rendering calls, host app can hack in text entry,
  so don't prioritize this yet.

* named elements APIs, for easier UI programming in the host app

* more action stuff


Renderer
========

It's horribly slow right now, and has some glitches :(

* examine the sorting, improve:

  * don't sort more than necessary

  * don't allocate willy-nilly (examine use of array<>)

* antialiasing

  * in a "good enough for now" condition; currently using a half-pixel
    half-transparent line around the outside of shapes, and textured
    rendering for text.  Text looks good up to a certain size; maybe
    do some scale analysis to switch to outline rendering when text
    size goes above some threshold.

    Drawback of blurry-outline is that it expands the shape.  Keep
    thinking about the problem; no immediate good solution is
    currently known.

* optimizations

  * treat line segments as true line segments, instead of a flat curve.

  * get rid of naive (mis)use of array<>

  * coarse clip/cull

  * pre-cache shape tesselation?  Re-gen on the fly based on scale;
    with hysteresis.  Or is there some nice precomputation we can do
    without evaluating specific curve points, and then just rip
    through making strips & fans?

* real lines

  I think the way to handle this is to take advantage of a (mipmapped)
  circle texture, say 16x16, and actually draw rectangles.  But then
  it still doesn't seem too easy to get right.  Needs more thinking.
  Not a super high priority; doesn't seem to be a critical feature for
  most movies.
